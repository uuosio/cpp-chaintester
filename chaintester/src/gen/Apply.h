/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Apply_H
#define Apply_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "interfaces_types.h"

namespace chaintester {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApplyIf {
 public:
  virtual ~ApplyIf() {}
  virtual int32_t end_apply() = 0;
  virtual void get_active_producers(std::string& _return) = 0;
  virtual void get_resource_limits(GetResourceLimitsReturn& _return, const Uint64& account) = 0;
  virtual void set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight) = 0;
  virtual int64_t set_proposed_producers(const std::string& producer_data) = 0;
  virtual int64_t set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data) = 0;
  virtual bool is_privileged(const Uint64& account) = 0;
  virtual void set_privileged(const Uint64& account, const bool is_priv) = 0;
  virtual void set_blockchain_parameters_packed(const std::string& data) = 0;
  virtual void get_blockchain_parameters_packed(std::string& _return) = 0;
  virtual void preactivate_feature(const std::string& feature_digest) = 0;
  virtual int32_t check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data) = 0;
  virtual int32_t check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us) = 0;
  virtual int64_t get_permission_last_used(const Uint64& account, const Uint64& permission) = 0;
  virtual int64_t get_account_creation_time(const Uint64& account) = 0;
  virtual void prints(const std::string& cstr) = 0;
  virtual void prints_l(const std::string& cstr) = 0;
  virtual void printi(const int64_t n) = 0;
  virtual void printui(const Uint64& n) = 0;
  virtual void printi128(const std::string& value) = 0;
  virtual void printui128(const std::string& value) = 0;
  virtual void printsf(const std::string& value) = 0;
  virtual void printdf(const std::string& value) = 0;
  virtual void printqf(const std::string& value) = 0;
  virtual void printn(const Uint64& name) = 0;
  virtual void printhex(const std::string& data) = 0;
  virtual int32_t action_data_size() = 0;
  virtual void read_action_data(std::string& _return) = 0;
  virtual void require_recipient(const Uint64& name) = 0;
  virtual void require_auth(const Uint64& name) = 0;
  virtual bool has_auth(const Uint64& name) = 0;
  virtual void require_auth2(const Uint64& name, const Uint64& permission) = 0;
  virtual bool is_account(const Uint64& name) = 0;
  virtual void send_inline(const std::string& serialized_action) = 0;
  virtual void send_context_free_inline(const std::string& serialized_data) = 0;
  virtual void publication_time(Uint64& _return) = 0;
  virtual void current_receiver(Uint64& _return) = 0;
  virtual void eosio_assert(const bool test, const std::string& msg) = 0;
  virtual void eosio_assert_message(const bool test, const std::string& msg) = 0;
  virtual void eosio_assert_code(const bool test, const Uint64& code) = 0;
  virtual void eosio_exit(const int32_t code) = 0;
  virtual void current_time(Uint64& _return) = 0;
  virtual bool is_feature_activated(const std::string& feature_digest) = 0;
  virtual void get_sender(Uint64& _return) = 0;
  virtual void assert_sha256(const std::string& data, const std::string& hash) = 0;
  virtual void assert_sha1(const std::string& data, const std::string& hash) = 0;
  virtual void assert_sha512(const std::string& data, const std::string& hash) = 0;
  virtual void assert_ripemd160(const std::string& data, const std::string& hash) = 0;
  virtual void sha256(std::string& _return, const std::string& data) = 0;
  virtual void sha1(std::string& _return, const std::string& data) = 0;
  virtual void sha512(std::string& _return, const std::string& data) = 0;
  virtual void ripemd160(std::string& _return, const std::string& data) = 0;
  virtual void recover_key(std::string& _return, const std::string& digest, const std::string& sig) = 0;
  virtual void assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub) = 0;
  virtual void send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing) = 0;
  virtual int32_t cancel_deferred(const std::string& sender_id) = 0;
  virtual void read_transaction(std::string& _return) = 0;
  virtual int32_t transaction_size() = 0;
  virtual int32_t tapos_block_num() = 0;
  virtual int32_t tapos_block_prefix() = 0;
  virtual int64_t expiration() = 0;
  virtual void get_action(std::string& _return, const int32_t _type, const int32_t index) = 0;
  virtual void get_context_free_data(std::string& _return, const int32_t index) = 0;
  virtual int32_t db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) = 0;
  virtual void db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data) = 0;
  virtual void db_remove_i64(const int32_t iterator) = 0;
  virtual void db_get_i64(std::string& _return, const int32_t iterator) = 0;
  virtual void db_next_i64(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_previous_i64(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual int32_t db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) = 0;
  virtual int32_t db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) = 0;
  virtual int32_t db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) = 0;
  virtual int32_t db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table) = 0;
  virtual int32_t db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary) = 0;
  virtual void db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary) = 0;
  virtual void db_idx64_remove(const int32_t iterator) = 0;
  virtual void db_idx64_next(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx64_previous(NextPreviousReturn& _return, const int32_t iteratory) = 0;
  virtual void db_idx64_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) = 0;
  virtual void db_idx64_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary) = 0;
  virtual void db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) = 0;
  virtual void db_idx64_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) = 0;
  virtual int32_t db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table) = 0;
  virtual int32_t db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) = 0;
  virtual void db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) = 0;
  virtual void db_idx128_remove(const int32_t iterator) = 0;
  virtual void db_idx128_next(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx128_previous(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx128_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) = 0;
  virtual void db_idx128_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) = 0;
  virtual void db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) = 0;
  virtual void db_idx128_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) = 0;
  virtual int32_t db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table) = 0;
  virtual int32_t db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) = 0;
  virtual void db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data) = 0;
  virtual void db_idx256_remove(const int32_t iterator) = 0;
  virtual void db_idx256_next(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx256_previous(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx256_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) = 0;
  virtual void db_idx256_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data) = 0;
  virtual void db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) = 0;
  virtual void db_idx256_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) = 0;
  virtual int32_t db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table) = 0;
  virtual int32_t db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) = 0;
  virtual void db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) = 0;
  virtual void db_idx_double_remove(const int32_t iterator) = 0;
  virtual void db_idx_double_next(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx_double_previous(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) = 0;
  virtual void db_idx_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) = 0;
  virtual void db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) = 0;
  virtual void db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) = 0;
  virtual int32_t db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) = 0;
  virtual int32_t db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) = 0;
  virtual void db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) = 0;
  virtual void db_idx_long_double_remove(const int32_t iterator) = 0;
  virtual void db_idx_long_double_next(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx_long_double_previous(NextPreviousReturn& _return, const int32_t iterator) = 0;
  virtual void db_idx_long_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) = 0;
  virtual void db_idx_long_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) = 0;
  virtual void db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) = 0;
  virtual void db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) = 0;
  virtual int32_t db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) = 0;
};

class ApplyIfFactory {
 public:
  typedef ApplyIf Handler;

  virtual ~ApplyIfFactory() {}

  virtual ApplyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApplyIf* /* handler */) = 0;
  };

class ApplyIfSingletonFactory : virtual public ApplyIfFactory {
 public:
  ApplyIfSingletonFactory(const ::std::shared_ptr<ApplyIf>& iface) : iface_(iface) {}
  virtual ~ApplyIfSingletonFactory() {}

  virtual ApplyIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ApplyIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ApplyIf> iface_;
};

class ApplyNull : virtual public ApplyIf {
 public:
  virtual ~ApplyNull() {}
  int32_t end_apply() override {
    int32_t _return = 0;
    return _return;
  }
  void get_active_producers(std::string& /* _return */) override {
    return;
  }
  void get_resource_limits(GetResourceLimitsReturn& /* _return */, const Uint64& /* account */) override {
    return;
  }
  void set_resource_limits(const Uint64& /* account */, const int64_t /* ram_bytes */, const int64_t /* net_weight */, const int64_t /* cpu_weight */) override {
    return;
  }
  int64_t set_proposed_producers(const std::string& /* producer_data */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t set_proposed_producers_ex(const Uint64& /* producer_data_format */, const std::string& /* producer_data */) override {
    int64_t _return = 0;
    return _return;
  }
  bool is_privileged(const Uint64& /* account */) override {
    bool _return = false;
    return _return;
  }
  void set_privileged(const Uint64& /* account */, const bool /* is_priv */) override {
    return;
  }
  void set_blockchain_parameters_packed(const std::string& /* data */) override {
    return;
  }
  void get_blockchain_parameters_packed(std::string& /* _return */) override {
    return;
  }
  void preactivate_feature(const std::string& /* feature_digest */) override {
    return;
  }
  int32_t check_transaction_authorization(const std::string& /* trx_data */, const std::string& /* pubkeys_data */, const std::string& /* perms_data */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t check_permission_authorization(const Uint64& /* account */, const Uint64& /* permission */, const std::string& /* pubkeys_data */, const std::string& /* perms_data */, const Uint64& /* delay_us */) override {
    int32_t _return = 0;
    return _return;
  }
  int64_t get_permission_last_used(const Uint64& /* account */, const Uint64& /* permission */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t get_account_creation_time(const Uint64& /* account */) override {
    int64_t _return = 0;
    return _return;
  }
  void prints(const std::string& /* cstr */) override {
    return;
  }
  void prints_l(const std::string& /* cstr */) override {
    return;
  }
  void printi(const int64_t /* n */) override {
    return;
  }
  void printui(const Uint64& /* n */) override {
    return;
  }
  void printi128(const std::string& /* value */) override {
    return;
  }
  void printui128(const std::string& /* value */) override {
    return;
  }
  void printsf(const std::string& /* value */) override {
    return;
  }
  void printdf(const std::string& /* value */) override {
    return;
  }
  void printqf(const std::string& /* value */) override {
    return;
  }
  void printn(const Uint64& /* name */) override {
    return;
  }
  void printhex(const std::string& /* data */) override {
    return;
  }
  int32_t action_data_size() override {
    int32_t _return = 0;
    return _return;
  }
  void read_action_data(std::string& /* _return */) override {
    return;
  }
  void require_recipient(const Uint64& /* name */) override {
    return;
  }
  void require_auth(const Uint64& /* name */) override {
    return;
  }
  bool has_auth(const Uint64& /* name */) override {
    bool _return = false;
    return _return;
  }
  void require_auth2(const Uint64& /* name */, const Uint64& /* permission */) override {
    return;
  }
  bool is_account(const Uint64& /* name */) override {
    bool _return = false;
    return _return;
  }
  void send_inline(const std::string& /* serialized_action */) override {
    return;
  }
  void send_context_free_inline(const std::string& /* serialized_data */) override {
    return;
  }
  void publication_time(Uint64& /* _return */) override {
    return;
  }
  void current_receiver(Uint64& /* _return */) override {
    return;
  }
  void eosio_assert(const bool /* test */, const std::string& /* msg */) override {
    return;
  }
  void eosio_assert_message(const bool /* test */, const std::string& /* msg */) override {
    return;
  }
  void eosio_assert_code(const bool /* test */, const Uint64& /* code */) override {
    return;
  }
  void eosio_exit(const int32_t /* code */) override {
    return;
  }
  void current_time(Uint64& /* _return */) override {
    return;
  }
  bool is_feature_activated(const std::string& /* feature_digest */) override {
    bool _return = false;
    return _return;
  }
  void get_sender(Uint64& /* _return */) override {
    return;
  }
  void assert_sha256(const std::string& /* data */, const std::string& /* hash */) override {
    return;
  }
  void assert_sha1(const std::string& /* data */, const std::string& /* hash */) override {
    return;
  }
  void assert_sha512(const std::string& /* data */, const std::string& /* hash */) override {
    return;
  }
  void assert_ripemd160(const std::string& /* data */, const std::string& /* hash */) override {
    return;
  }
  void sha256(std::string& /* _return */, const std::string& /* data */) override {
    return;
  }
  void sha1(std::string& /* _return */, const std::string& /* data */) override {
    return;
  }
  void sha512(std::string& /* _return */, const std::string& /* data */) override {
    return;
  }
  void ripemd160(std::string& /* _return */, const std::string& /* data */) override {
    return;
  }
  void recover_key(std::string& /* _return */, const std::string& /* digest */, const std::string& /* sig */) override {
    return;
  }
  void assert_recover_key(const std::string& /* digest */, const std::string& /* sig */, const std::string& /* pub */) override {
    return;
  }
  void send_deferred(const std::string& /* sender_id */, const Uint64& /* payer */, const std::string& /* serialized_transaction */, const int32_t /* replace_existing */) override {
    return;
  }
  int32_t cancel_deferred(const std::string& /* sender_id */) override {
    int32_t _return = 0;
    return _return;
  }
  void read_transaction(std::string& /* _return */) override {
    return;
  }
  int32_t transaction_size() override {
    int32_t _return = 0;
    return _return;
  }
  int32_t tapos_block_num() override {
    int32_t _return = 0;
    return _return;
  }
  int32_t tapos_block_prefix() override {
    int32_t _return = 0;
    return _return;
  }
  int64_t expiration() override {
    int64_t _return = 0;
    return _return;
  }
  void get_action(std::string& /* _return */, const int32_t /* _type */, const int32_t /* index */) override {
    return;
  }
  void get_context_free_data(std::string& /* _return */, const int32_t /* index */) override {
    return;
  }
  int32_t db_store_i64(const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* payer */, const Uint64& /* id */, const std::string& /* data */) override {
    int32_t _return = 0;
    return _return;
  }
  void db_update_i64(const int32_t /* iterator */, const Uint64& /* payer */, const std::string& /* data */) override {
    return;
  }
  void db_remove_i64(const int32_t /* iterator */) override {
    return;
  }
  void db_get_i64(std::string& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_next_i64(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_previous_i64(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  int32_t db_find_i64(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* id */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_lowerbound_i64(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* id */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_upperbound_i64(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* id */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_end_i64(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_idx64_store(const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* payer */, const Uint64& /* id */, const Uint64& /* secondary */) override {
    int32_t _return = 0;
    return _return;
  }
  void db_idx64_update(const int32_t /* iterator */, const Uint64& /* payer */, const Uint64& /* secondary */) override {
    return;
  }
  void db_idx64_remove(const int32_t /* iterator */) override {
    return;
  }
  void db_idx64_next(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx64_previous(NextPreviousReturn& /* _return */, const int32_t /* iteratory */) override {
    return;
  }
  void db_idx64_find_primary(FindPrimaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx64_find_secondary(FindSecondaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* secondary */) override {
    return;
  }
  void db_idx64_lowerbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx64_upperbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  int32_t db_idx64_end(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_idx128_store(const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* payer */, const Uint64& /* id */, const std::string& /* secondary */) override {
    int32_t _return = 0;
    return _return;
  }
  void db_idx128_update(const int32_t /* iterator */, const Uint64& /* payer */, const std::string& /* secondary */) override {
    return;
  }
  void db_idx128_remove(const int32_t /* iterator */) override {
    return;
  }
  void db_idx128_next(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx128_previous(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx128_find_primary(FindPrimaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx128_find_secondary(FindSecondaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */) override {
    return;
  }
  void db_idx128_lowerbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx128_upperbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  int32_t db_idx128_end(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_idx256_store(const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* payer */, const Uint64& /* id */, const std::string& /* data */) override {
    int32_t _return = 0;
    return _return;
  }
  void db_idx256_update(const int32_t /* iterator */, const Uint64& /* payer */, const std::string& /* data */) override {
    return;
  }
  void db_idx256_remove(const int32_t /* iterator */) override {
    return;
  }
  void db_idx256_next(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx256_previous(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx256_find_primary(FindPrimaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx256_find_secondary(FindSecondaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* data */) override {
    return;
  }
  void db_idx256_lowerbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* data */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx256_upperbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* data */, const Uint64& /* primary */) override {
    return;
  }
  int32_t db_idx256_end(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_idx_double_store(const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* payer */, const Uint64& /* id */, const std::string& /* secondary */) override {
    int32_t _return = 0;
    return _return;
  }
  void db_idx_double_update(const int32_t /* iterator */, const Uint64& /* payer */, const std::string& /* secondary */) override {
    return;
  }
  void db_idx_double_remove(const int32_t /* iterator */) override {
    return;
  }
  void db_idx_double_next(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx_double_previous(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx_double_find_primary(FindPrimaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx_double_find_secondary(FindSecondaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */) override {
    return;
  }
  void db_idx_double_lowerbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx_double_upperbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  int32_t db_idx_double_end(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_idx_long_double_store(const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* payer */, const Uint64& /* id */, const std::string& /* secondary */) override {
    int32_t _return = 0;
    return _return;
  }
  void db_idx_long_double_update(const int32_t /* iterator */, const Uint64& /* payer */, const std::string& /* secondary */) override {
    return;
  }
  void db_idx_long_double_remove(const int32_t /* iterator */) override {
    return;
  }
  void db_idx_long_double_next(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx_long_double_previous(NextPreviousReturn& /* _return */, const int32_t /* iterator */) override {
    return;
  }
  void db_idx_long_double_find_primary(FindPrimaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx_long_double_find_secondary(FindSecondaryReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */) override {
    return;
  }
  void db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  void db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& /* _return */, const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */, const std::string& /* secondary */, const Uint64& /* primary */) override {
    return;
  }
  int32_t db_idx_long_double_end(const Uint64& /* code */, const Uint64& /* scope */, const Uint64& /* table */) override {
    int32_t _return = 0;
    return _return;
  }
};


class Apply_end_apply_args {
 public:

  Apply_end_apply_args(const Apply_end_apply_args&) noexcept;
  Apply_end_apply_args& operator=(const Apply_end_apply_args&) noexcept;
  Apply_end_apply_args() noexcept {
  }

  virtual ~Apply_end_apply_args() noexcept;

  bool operator == (const Apply_end_apply_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_end_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_end_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_end_apply_pargs {
 public:


  virtual ~Apply_end_apply_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_end_apply_result__isset {
  _Apply_end_apply_result__isset() : success(false) {}
  bool success :1;
} _Apply_end_apply_result__isset;

class Apply_end_apply_result {
 public:

  Apply_end_apply_result(const Apply_end_apply_result&) noexcept;
  Apply_end_apply_result& operator=(const Apply_end_apply_result&) noexcept;
  Apply_end_apply_result() noexcept
                         : success(0) {
  }

  virtual ~Apply_end_apply_result() noexcept;
  int32_t success;

  _Apply_end_apply_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_end_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_end_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_end_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_end_apply_presult__isset {
  _Apply_end_apply_presult__isset() : success(false) {}
  bool success :1;
} _Apply_end_apply_presult__isset;

class Apply_end_apply_presult {
 public:


  virtual ~Apply_end_apply_presult() noexcept;
  int32_t* success;

  _Apply_end_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_get_active_producers_args {
 public:

  Apply_get_active_producers_args(const Apply_get_active_producers_args&) noexcept;
  Apply_get_active_producers_args& operator=(const Apply_get_active_producers_args&) noexcept;
  Apply_get_active_producers_args() noexcept {
  }

  virtual ~Apply_get_active_producers_args() noexcept;

  bool operator == (const Apply_get_active_producers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_get_active_producers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_active_producers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_active_producers_pargs {
 public:


  virtual ~Apply_get_active_producers_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_active_producers_result__isset {
  _Apply_get_active_producers_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_active_producers_result__isset;

class Apply_get_active_producers_result {
 public:

  Apply_get_active_producers_result(const Apply_get_active_producers_result&);
  Apply_get_active_producers_result& operator=(const Apply_get_active_producers_result&);
  Apply_get_active_producers_result() noexcept
                                    : success() {
  }

  virtual ~Apply_get_active_producers_result() noexcept;
  std::string success;

  _Apply_get_active_producers_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_get_active_producers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_active_producers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_active_producers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_active_producers_presult__isset {
  _Apply_get_active_producers_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_active_producers_presult__isset;

class Apply_get_active_producers_presult {
 public:


  virtual ~Apply_get_active_producers_presult() noexcept;
  std::string* success;

  _Apply_get_active_producers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_get_resource_limits_args__isset {
  _Apply_get_resource_limits_args__isset() : account(false) {}
  bool account :1;
} _Apply_get_resource_limits_args__isset;

class Apply_get_resource_limits_args {
 public:

  Apply_get_resource_limits_args(const Apply_get_resource_limits_args&);
  Apply_get_resource_limits_args& operator=(const Apply_get_resource_limits_args&);
  Apply_get_resource_limits_args() noexcept {
  }

  virtual ~Apply_get_resource_limits_args() noexcept;
  Uint64 account;

  _Apply_get_resource_limits_args__isset __isset;

  void __set_account(const Uint64& val);

  bool operator == (const Apply_get_resource_limits_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const Apply_get_resource_limits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_resource_limits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_resource_limits_pargs {
 public:


  virtual ~Apply_get_resource_limits_pargs() noexcept;
  const Uint64* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_resource_limits_result__isset {
  _Apply_get_resource_limits_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_resource_limits_result__isset;

class Apply_get_resource_limits_result {
 public:

  Apply_get_resource_limits_result(const Apply_get_resource_limits_result&) noexcept;
  Apply_get_resource_limits_result& operator=(const Apply_get_resource_limits_result&) noexcept;
  Apply_get_resource_limits_result() noexcept {
  }

  virtual ~Apply_get_resource_limits_result() noexcept;
  GetResourceLimitsReturn success;

  _Apply_get_resource_limits_result__isset __isset;

  void __set_success(const GetResourceLimitsReturn& val);

  bool operator == (const Apply_get_resource_limits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_resource_limits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_resource_limits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_resource_limits_presult__isset {
  _Apply_get_resource_limits_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_resource_limits_presult__isset;

class Apply_get_resource_limits_presult {
 public:


  virtual ~Apply_get_resource_limits_presult() noexcept;
  GetResourceLimitsReturn* success;

  _Apply_get_resource_limits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_set_resource_limits_args__isset {
  _Apply_set_resource_limits_args__isset() : account(false), ram_bytes(false), net_weight(false), cpu_weight(false) {}
  bool account :1;
  bool ram_bytes :1;
  bool net_weight :1;
  bool cpu_weight :1;
} _Apply_set_resource_limits_args__isset;

class Apply_set_resource_limits_args {
 public:

  Apply_set_resource_limits_args(const Apply_set_resource_limits_args&);
  Apply_set_resource_limits_args& operator=(const Apply_set_resource_limits_args&);
  Apply_set_resource_limits_args() noexcept
                                 : ram_bytes(0),
                                   net_weight(0),
                                   cpu_weight(0) {
  }

  virtual ~Apply_set_resource_limits_args() noexcept;
  Uint64 account;
  int64_t ram_bytes;
  int64_t net_weight;
  int64_t cpu_weight;

  _Apply_set_resource_limits_args__isset __isset;

  void __set_account(const Uint64& val);

  void __set_ram_bytes(const int64_t val);

  void __set_net_weight(const int64_t val);

  void __set_cpu_weight(const int64_t val);

  bool operator == (const Apply_set_resource_limits_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(ram_bytes == rhs.ram_bytes))
      return false;
    if (!(net_weight == rhs.net_weight))
      return false;
    if (!(cpu_weight == rhs.cpu_weight))
      return false;
    return true;
  }
  bool operator != (const Apply_set_resource_limits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_resource_limits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_resource_limits_pargs {
 public:


  virtual ~Apply_set_resource_limits_pargs() noexcept;
  const Uint64* account;
  const int64_t* ram_bytes;
  const int64_t* net_weight;
  const int64_t* cpu_weight;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_resource_limits_result {
 public:

  Apply_set_resource_limits_result(const Apply_set_resource_limits_result&) noexcept;
  Apply_set_resource_limits_result& operator=(const Apply_set_resource_limits_result&) noexcept;
  Apply_set_resource_limits_result() noexcept {
  }

  virtual ~Apply_set_resource_limits_result() noexcept;

  bool operator == (const Apply_set_resource_limits_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_set_resource_limits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_resource_limits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_resource_limits_presult {
 public:


  virtual ~Apply_set_resource_limits_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_set_proposed_producers_args__isset {
  _Apply_set_proposed_producers_args__isset() : producer_data(false) {}
  bool producer_data :1;
} _Apply_set_proposed_producers_args__isset;

class Apply_set_proposed_producers_args {
 public:

  Apply_set_proposed_producers_args(const Apply_set_proposed_producers_args&);
  Apply_set_proposed_producers_args& operator=(const Apply_set_proposed_producers_args&);
  Apply_set_proposed_producers_args() noexcept
                                    : producer_data() {
  }

  virtual ~Apply_set_proposed_producers_args() noexcept;
  std::string producer_data;

  _Apply_set_proposed_producers_args__isset __isset;

  void __set_producer_data(const std::string& val);

  bool operator == (const Apply_set_proposed_producers_args & rhs) const
  {
    if (!(producer_data == rhs.producer_data))
      return false;
    return true;
  }
  bool operator != (const Apply_set_proposed_producers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_proposed_producers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_proposed_producers_pargs {
 public:


  virtual ~Apply_set_proposed_producers_pargs() noexcept;
  const std::string* producer_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_set_proposed_producers_result__isset {
  _Apply_set_proposed_producers_result__isset() : success(false) {}
  bool success :1;
} _Apply_set_proposed_producers_result__isset;

class Apply_set_proposed_producers_result {
 public:

  Apply_set_proposed_producers_result(const Apply_set_proposed_producers_result&) noexcept;
  Apply_set_proposed_producers_result& operator=(const Apply_set_proposed_producers_result&) noexcept;
  Apply_set_proposed_producers_result() noexcept
                                      : success(0) {
  }

  virtual ~Apply_set_proposed_producers_result() noexcept;
  int64_t success;

  _Apply_set_proposed_producers_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Apply_set_proposed_producers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_set_proposed_producers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_proposed_producers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_set_proposed_producers_presult__isset {
  _Apply_set_proposed_producers_presult__isset() : success(false) {}
  bool success :1;
} _Apply_set_proposed_producers_presult__isset;

class Apply_set_proposed_producers_presult {
 public:


  virtual ~Apply_set_proposed_producers_presult() noexcept;
  int64_t* success;

  _Apply_set_proposed_producers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_set_proposed_producers_ex_args__isset {
  _Apply_set_proposed_producers_ex_args__isset() : producer_data_format(false), producer_data(false) {}
  bool producer_data_format :1;
  bool producer_data :1;
} _Apply_set_proposed_producers_ex_args__isset;

class Apply_set_proposed_producers_ex_args {
 public:

  Apply_set_proposed_producers_ex_args(const Apply_set_proposed_producers_ex_args&);
  Apply_set_proposed_producers_ex_args& operator=(const Apply_set_proposed_producers_ex_args&);
  Apply_set_proposed_producers_ex_args() noexcept
                                       : producer_data() {
  }

  virtual ~Apply_set_proposed_producers_ex_args() noexcept;
  Uint64 producer_data_format;
  std::string producer_data;

  _Apply_set_proposed_producers_ex_args__isset __isset;

  void __set_producer_data_format(const Uint64& val);

  void __set_producer_data(const std::string& val);

  bool operator == (const Apply_set_proposed_producers_ex_args & rhs) const
  {
    if (!(producer_data_format == rhs.producer_data_format))
      return false;
    if (!(producer_data == rhs.producer_data))
      return false;
    return true;
  }
  bool operator != (const Apply_set_proposed_producers_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_proposed_producers_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_proposed_producers_ex_pargs {
 public:


  virtual ~Apply_set_proposed_producers_ex_pargs() noexcept;
  const Uint64* producer_data_format;
  const std::string* producer_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_set_proposed_producers_ex_result__isset {
  _Apply_set_proposed_producers_ex_result__isset() : success(false) {}
  bool success :1;
} _Apply_set_proposed_producers_ex_result__isset;

class Apply_set_proposed_producers_ex_result {
 public:

  Apply_set_proposed_producers_ex_result(const Apply_set_proposed_producers_ex_result&) noexcept;
  Apply_set_proposed_producers_ex_result& operator=(const Apply_set_proposed_producers_ex_result&) noexcept;
  Apply_set_proposed_producers_ex_result() noexcept
                                         : success(0) {
  }

  virtual ~Apply_set_proposed_producers_ex_result() noexcept;
  int64_t success;

  _Apply_set_proposed_producers_ex_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Apply_set_proposed_producers_ex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_set_proposed_producers_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_proposed_producers_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_set_proposed_producers_ex_presult__isset {
  _Apply_set_proposed_producers_ex_presult__isset() : success(false) {}
  bool success :1;
} _Apply_set_proposed_producers_ex_presult__isset;

class Apply_set_proposed_producers_ex_presult {
 public:


  virtual ~Apply_set_proposed_producers_ex_presult() noexcept;
  int64_t* success;

  _Apply_set_proposed_producers_ex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_is_privileged_args__isset {
  _Apply_is_privileged_args__isset() : account(false) {}
  bool account :1;
} _Apply_is_privileged_args__isset;

class Apply_is_privileged_args {
 public:

  Apply_is_privileged_args(const Apply_is_privileged_args&);
  Apply_is_privileged_args& operator=(const Apply_is_privileged_args&);
  Apply_is_privileged_args() noexcept {
  }

  virtual ~Apply_is_privileged_args() noexcept;
  Uint64 account;

  _Apply_is_privileged_args__isset __isset;

  void __set_account(const Uint64& val);

  bool operator == (const Apply_is_privileged_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const Apply_is_privileged_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_is_privileged_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_is_privileged_pargs {
 public:


  virtual ~Apply_is_privileged_pargs() noexcept;
  const Uint64* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_is_privileged_result__isset {
  _Apply_is_privileged_result__isset() : success(false) {}
  bool success :1;
} _Apply_is_privileged_result__isset;

class Apply_is_privileged_result {
 public:

  Apply_is_privileged_result(const Apply_is_privileged_result&) noexcept;
  Apply_is_privileged_result& operator=(const Apply_is_privileged_result&) noexcept;
  Apply_is_privileged_result() noexcept
                             : success(0) {
  }

  virtual ~Apply_is_privileged_result() noexcept;
  bool success;

  _Apply_is_privileged_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Apply_is_privileged_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_is_privileged_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_is_privileged_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_is_privileged_presult__isset {
  _Apply_is_privileged_presult__isset() : success(false) {}
  bool success :1;
} _Apply_is_privileged_presult__isset;

class Apply_is_privileged_presult {
 public:


  virtual ~Apply_is_privileged_presult() noexcept;
  bool* success;

  _Apply_is_privileged_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_set_privileged_args__isset {
  _Apply_set_privileged_args__isset() : account(false), is_priv(false) {}
  bool account :1;
  bool is_priv :1;
} _Apply_set_privileged_args__isset;

class Apply_set_privileged_args {
 public:

  Apply_set_privileged_args(const Apply_set_privileged_args&);
  Apply_set_privileged_args& operator=(const Apply_set_privileged_args&);
  Apply_set_privileged_args() noexcept
                            : is_priv(0) {
  }

  virtual ~Apply_set_privileged_args() noexcept;
  Uint64 account;
  bool is_priv;

  _Apply_set_privileged_args__isset __isset;

  void __set_account(const Uint64& val);

  void __set_is_priv(const bool val);

  bool operator == (const Apply_set_privileged_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(is_priv == rhs.is_priv))
      return false;
    return true;
  }
  bool operator != (const Apply_set_privileged_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_privileged_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_privileged_pargs {
 public:


  virtual ~Apply_set_privileged_pargs() noexcept;
  const Uint64* account;
  const bool* is_priv;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_privileged_result {
 public:

  Apply_set_privileged_result(const Apply_set_privileged_result&) noexcept;
  Apply_set_privileged_result& operator=(const Apply_set_privileged_result&) noexcept;
  Apply_set_privileged_result() noexcept {
  }

  virtual ~Apply_set_privileged_result() noexcept;

  bool operator == (const Apply_set_privileged_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_set_privileged_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_privileged_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_privileged_presult {
 public:


  virtual ~Apply_set_privileged_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_set_blockchain_parameters_packed_args__isset {
  _Apply_set_blockchain_parameters_packed_args__isset() : data(false) {}
  bool data :1;
} _Apply_set_blockchain_parameters_packed_args__isset;

class Apply_set_blockchain_parameters_packed_args {
 public:

  Apply_set_blockchain_parameters_packed_args(const Apply_set_blockchain_parameters_packed_args&);
  Apply_set_blockchain_parameters_packed_args& operator=(const Apply_set_blockchain_parameters_packed_args&);
  Apply_set_blockchain_parameters_packed_args() noexcept
                                              : data() {
  }

  virtual ~Apply_set_blockchain_parameters_packed_args() noexcept;
  std::string data;

  _Apply_set_blockchain_parameters_packed_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Apply_set_blockchain_parameters_packed_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_set_blockchain_parameters_packed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_blockchain_parameters_packed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_blockchain_parameters_packed_pargs {
 public:


  virtual ~Apply_set_blockchain_parameters_packed_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_blockchain_parameters_packed_result {
 public:

  Apply_set_blockchain_parameters_packed_result(const Apply_set_blockchain_parameters_packed_result&) noexcept;
  Apply_set_blockchain_parameters_packed_result& operator=(const Apply_set_blockchain_parameters_packed_result&) noexcept;
  Apply_set_blockchain_parameters_packed_result() noexcept {
  }

  virtual ~Apply_set_blockchain_parameters_packed_result() noexcept;

  bool operator == (const Apply_set_blockchain_parameters_packed_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_set_blockchain_parameters_packed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_set_blockchain_parameters_packed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_set_blockchain_parameters_packed_presult {
 public:


  virtual ~Apply_set_blockchain_parameters_packed_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_get_blockchain_parameters_packed_args {
 public:

  Apply_get_blockchain_parameters_packed_args(const Apply_get_blockchain_parameters_packed_args&) noexcept;
  Apply_get_blockchain_parameters_packed_args& operator=(const Apply_get_blockchain_parameters_packed_args&) noexcept;
  Apply_get_blockchain_parameters_packed_args() noexcept {
  }

  virtual ~Apply_get_blockchain_parameters_packed_args() noexcept;

  bool operator == (const Apply_get_blockchain_parameters_packed_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_get_blockchain_parameters_packed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_blockchain_parameters_packed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_blockchain_parameters_packed_pargs {
 public:


  virtual ~Apply_get_blockchain_parameters_packed_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_blockchain_parameters_packed_result__isset {
  _Apply_get_blockchain_parameters_packed_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_blockchain_parameters_packed_result__isset;

class Apply_get_blockchain_parameters_packed_result {
 public:

  Apply_get_blockchain_parameters_packed_result(const Apply_get_blockchain_parameters_packed_result&);
  Apply_get_blockchain_parameters_packed_result& operator=(const Apply_get_blockchain_parameters_packed_result&);
  Apply_get_blockchain_parameters_packed_result() noexcept
                                                : success() {
  }

  virtual ~Apply_get_blockchain_parameters_packed_result() noexcept;
  std::string success;

  _Apply_get_blockchain_parameters_packed_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_get_blockchain_parameters_packed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_blockchain_parameters_packed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_blockchain_parameters_packed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_blockchain_parameters_packed_presult__isset {
  _Apply_get_blockchain_parameters_packed_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_blockchain_parameters_packed_presult__isset;

class Apply_get_blockchain_parameters_packed_presult {
 public:


  virtual ~Apply_get_blockchain_parameters_packed_presult() noexcept;
  std::string* success;

  _Apply_get_blockchain_parameters_packed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_preactivate_feature_args__isset {
  _Apply_preactivate_feature_args__isset() : feature_digest(false) {}
  bool feature_digest :1;
} _Apply_preactivate_feature_args__isset;

class Apply_preactivate_feature_args {
 public:

  Apply_preactivate_feature_args(const Apply_preactivate_feature_args&);
  Apply_preactivate_feature_args& operator=(const Apply_preactivate_feature_args&);
  Apply_preactivate_feature_args() noexcept
                                 : feature_digest() {
  }

  virtual ~Apply_preactivate_feature_args() noexcept;
  std::string feature_digest;

  _Apply_preactivate_feature_args__isset __isset;

  void __set_feature_digest(const std::string& val);

  bool operator == (const Apply_preactivate_feature_args & rhs) const
  {
    if (!(feature_digest == rhs.feature_digest))
      return false;
    return true;
  }
  bool operator != (const Apply_preactivate_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_preactivate_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_preactivate_feature_pargs {
 public:


  virtual ~Apply_preactivate_feature_pargs() noexcept;
  const std::string* feature_digest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_preactivate_feature_result {
 public:

  Apply_preactivate_feature_result(const Apply_preactivate_feature_result&) noexcept;
  Apply_preactivate_feature_result& operator=(const Apply_preactivate_feature_result&) noexcept;
  Apply_preactivate_feature_result() noexcept {
  }

  virtual ~Apply_preactivate_feature_result() noexcept;

  bool operator == (const Apply_preactivate_feature_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_preactivate_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_preactivate_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_preactivate_feature_presult {
 public:


  virtual ~Apply_preactivate_feature_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_check_transaction_authorization_args__isset {
  _Apply_check_transaction_authorization_args__isset() : trx_data(false), pubkeys_data(false), perms_data(false) {}
  bool trx_data :1;
  bool pubkeys_data :1;
  bool perms_data :1;
} _Apply_check_transaction_authorization_args__isset;

class Apply_check_transaction_authorization_args {
 public:

  Apply_check_transaction_authorization_args(const Apply_check_transaction_authorization_args&);
  Apply_check_transaction_authorization_args& operator=(const Apply_check_transaction_authorization_args&);
  Apply_check_transaction_authorization_args() noexcept
                                             : trx_data(),
                                               pubkeys_data(),
                                               perms_data() {
  }

  virtual ~Apply_check_transaction_authorization_args() noexcept;
  std::string trx_data;
  std::string pubkeys_data;
  std::string perms_data;

  _Apply_check_transaction_authorization_args__isset __isset;

  void __set_trx_data(const std::string& val);

  void __set_pubkeys_data(const std::string& val);

  void __set_perms_data(const std::string& val);

  bool operator == (const Apply_check_transaction_authorization_args & rhs) const
  {
    if (!(trx_data == rhs.trx_data))
      return false;
    if (!(pubkeys_data == rhs.pubkeys_data))
      return false;
    if (!(perms_data == rhs.perms_data))
      return false;
    return true;
  }
  bool operator != (const Apply_check_transaction_authorization_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_check_transaction_authorization_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_check_transaction_authorization_pargs {
 public:


  virtual ~Apply_check_transaction_authorization_pargs() noexcept;
  const std::string* trx_data;
  const std::string* pubkeys_data;
  const std::string* perms_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_check_transaction_authorization_result__isset {
  _Apply_check_transaction_authorization_result__isset() : success(false) {}
  bool success :1;
} _Apply_check_transaction_authorization_result__isset;

class Apply_check_transaction_authorization_result {
 public:

  Apply_check_transaction_authorization_result(const Apply_check_transaction_authorization_result&) noexcept;
  Apply_check_transaction_authorization_result& operator=(const Apply_check_transaction_authorization_result&) noexcept;
  Apply_check_transaction_authorization_result() noexcept
                                               : success(0) {
  }

  virtual ~Apply_check_transaction_authorization_result() noexcept;
  int32_t success;

  _Apply_check_transaction_authorization_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_check_transaction_authorization_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_check_transaction_authorization_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_check_transaction_authorization_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_check_transaction_authorization_presult__isset {
  _Apply_check_transaction_authorization_presult__isset() : success(false) {}
  bool success :1;
} _Apply_check_transaction_authorization_presult__isset;

class Apply_check_transaction_authorization_presult {
 public:


  virtual ~Apply_check_transaction_authorization_presult() noexcept;
  int32_t* success;

  _Apply_check_transaction_authorization_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_check_permission_authorization_args__isset {
  _Apply_check_permission_authorization_args__isset() : account(false), permission(false), pubkeys_data(false), perms_data(false), delay_us(false) {}
  bool account :1;
  bool permission :1;
  bool pubkeys_data :1;
  bool perms_data :1;
  bool delay_us :1;
} _Apply_check_permission_authorization_args__isset;

class Apply_check_permission_authorization_args {
 public:

  Apply_check_permission_authorization_args(const Apply_check_permission_authorization_args&);
  Apply_check_permission_authorization_args& operator=(const Apply_check_permission_authorization_args&);
  Apply_check_permission_authorization_args() noexcept
                                            : pubkeys_data(),
                                              perms_data() {
  }

  virtual ~Apply_check_permission_authorization_args() noexcept;
  Uint64 account;
  Uint64 permission;
  std::string pubkeys_data;
  std::string perms_data;
  Uint64 delay_us;

  _Apply_check_permission_authorization_args__isset __isset;

  void __set_account(const Uint64& val);

  void __set_permission(const Uint64& val);

  void __set_pubkeys_data(const std::string& val);

  void __set_perms_data(const std::string& val);

  void __set_delay_us(const Uint64& val);

  bool operator == (const Apply_check_permission_authorization_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(permission == rhs.permission))
      return false;
    if (!(pubkeys_data == rhs.pubkeys_data))
      return false;
    if (!(perms_data == rhs.perms_data))
      return false;
    if (!(delay_us == rhs.delay_us))
      return false;
    return true;
  }
  bool operator != (const Apply_check_permission_authorization_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_check_permission_authorization_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_check_permission_authorization_pargs {
 public:


  virtual ~Apply_check_permission_authorization_pargs() noexcept;
  const Uint64* account;
  const Uint64* permission;
  const std::string* pubkeys_data;
  const std::string* perms_data;
  const Uint64* delay_us;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_check_permission_authorization_result__isset {
  _Apply_check_permission_authorization_result__isset() : success(false) {}
  bool success :1;
} _Apply_check_permission_authorization_result__isset;

class Apply_check_permission_authorization_result {
 public:

  Apply_check_permission_authorization_result(const Apply_check_permission_authorization_result&) noexcept;
  Apply_check_permission_authorization_result& operator=(const Apply_check_permission_authorization_result&) noexcept;
  Apply_check_permission_authorization_result() noexcept
                                              : success(0) {
  }

  virtual ~Apply_check_permission_authorization_result() noexcept;
  int32_t success;

  _Apply_check_permission_authorization_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_check_permission_authorization_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_check_permission_authorization_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_check_permission_authorization_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_check_permission_authorization_presult__isset {
  _Apply_check_permission_authorization_presult__isset() : success(false) {}
  bool success :1;
} _Apply_check_permission_authorization_presult__isset;

class Apply_check_permission_authorization_presult {
 public:


  virtual ~Apply_check_permission_authorization_presult() noexcept;
  int32_t* success;

  _Apply_check_permission_authorization_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_get_permission_last_used_args__isset {
  _Apply_get_permission_last_used_args__isset() : account(false), permission(false) {}
  bool account :1;
  bool permission :1;
} _Apply_get_permission_last_used_args__isset;

class Apply_get_permission_last_used_args {
 public:

  Apply_get_permission_last_used_args(const Apply_get_permission_last_used_args&);
  Apply_get_permission_last_used_args& operator=(const Apply_get_permission_last_used_args&);
  Apply_get_permission_last_used_args() noexcept {
  }

  virtual ~Apply_get_permission_last_used_args() noexcept;
  Uint64 account;
  Uint64 permission;

  _Apply_get_permission_last_used_args__isset __isset;

  void __set_account(const Uint64& val);

  void __set_permission(const Uint64& val);

  bool operator == (const Apply_get_permission_last_used_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const Apply_get_permission_last_used_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_permission_last_used_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_permission_last_used_pargs {
 public:


  virtual ~Apply_get_permission_last_used_pargs() noexcept;
  const Uint64* account;
  const Uint64* permission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_permission_last_used_result__isset {
  _Apply_get_permission_last_used_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_permission_last_used_result__isset;

class Apply_get_permission_last_used_result {
 public:

  Apply_get_permission_last_used_result(const Apply_get_permission_last_used_result&) noexcept;
  Apply_get_permission_last_used_result& operator=(const Apply_get_permission_last_used_result&) noexcept;
  Apply_get_permission_last_used_result() noexcept
                                        : success(0) {
  }

  virtual ~Apply_get_permission_last_used_result() noexcept;
  int64_t success;

  _Apply_get_permission_last_used_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Apply_get_permission_last_used_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_permission_last_used_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_permission_last_used_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_permission_last_used_presult__isset {
  _Apply_get_permission_last_used_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_permission_last_used_presult__isset;

class Apply_get_permission_last_used_presult {
 public:


  virtual ~Apply_get_permission_last_used_presult() noexcept;
  int64_t* success;

  _Apply_get_permission_last_used_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_get_account_creation_time_args__isset {
  _Apply_get_account_creation_time_args__isset() : account(false) {}
  bool account :1;
} _Apply_get_account_creation_time_args__isset;

class Apply_get_account_creation_time_args {
 public:

  Apply_get_account_creation_time_args(const Apply_get_account_creation_time_args&);
  Apply_get_account_creation_time_args& operator=(const Apply_get_account_creation_time_args&);
  Apply_get_account_creation_time_args() noexcept {
  }

  virtual ~Apply_get_account_creation_time_args() noexcept;
  Uint64 account;

  _Apply_get_account_creation_time_args__isset __isset;

  void __set_account(const Uint64& val);

  bool operator == (const Apply_get_account_creation_time_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const Apply_get_account_creation_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_account_creation_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_account_creation_time_pargs {
 public:


  virtual ~Apply_get_account_creation_time_pargs() noexcept;
  const Uint64* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_account_creation_time_result__isset {
  _Apply_get_account_creation_time_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_account_creation_time_result__isset;

class Apply_get_account_creation_time_result {
 public:

  Apply_get_account_creation_time_result(const Apply_get_account_creation_time_result&) noexcept;
  Apply_get_account_creation_time_result& operator=(const Apply_get_account_creation_time_result&) noexcept;
  Apply_get_account_creation_time_result() noexcept
                                         : success(0) {
  }

  virtual ~Apply_get_account_creation_time_result() noexcept;
  int64_t success;

  _Apply_get_account_creation_time_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Apply_get_account_creation_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_account_creation_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_account_creation_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_account_creation_time_presult__isset {
  _Apply_get_account_creation_time_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_account_creation_time_presult__isset;

class Apply_get_account_creation_time_presult {
 public:


  virtual ~Apply_get_account_creation_time_presult() noexcept;
  int64_t* success;

  _Apply_get_account_creation_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_prints_args__isset {
  _Apply_prints_args__isset() : cstr(false) {}
  bool cstr :1;
} _Apply_prints_args__isset;

class Apply_prints_args {
 public:

  Apply_prints_args(const Apply_prints_args&);
  Apply_prints_args& operator=(const Apply_prints_args&);
  Apply_prints_args() noexcept
                    : cstr() {
  }

  virtual ~Apply_prints_args() noexcept;
  std::string cstr;

  _Apply_prints_args__isset __isset;

  void __set_cstr(const std::string& val);

  bool operator == (const Apply_prints_args & rhs) const
  {
    if (!(cstr == rhs.cstr))
      return false;
    return true;
  }
  bool operator != (const Apply_prints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_prints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_prints_pargs {
 public:


  virtual ~Apply_prints_pargs() noexcept;
  const std::string* cstr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_prints_result {
 public:

  Apply_prints_result(const Apply_prints_result&) noexcept;
  Apply_prints_result& operator=(const Apply_prints_result&) noexcept;
  Apply_prints_result() noexcept {
  }

  virtual ~Apply_prints_result() noexcept;

  bool operator == (const Apply_prints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_prints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_prints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_prints_presult {
 public:


  virtual ~Apply_prints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_prints_l_args__isset {
  _Apply_prints_l_args__isset() : cstr(false) {}
  bool cstr :1;
} _Apply_prints_l_args__isset;

class Apply_prints_l_args {
 public:

  Apply_prints_l_args(const Apply_prints_l_args&);
  Apply_prints_l_args& operator=(const Apply_prints_l_args&);
  Apply_prints_l_args() noexcept
                      : cstr() {
  }

  virtual ~Apply_prints_l_args() noexcept;
  std::string cstr;

  _Apply_prints_l_args__isset __isset;

  void __set_cstr(const std::string& val);

  bool operator == (const Apply_prints_l_args & rhs) const
  {
    if (!(cstr == rhs.cstr))
      return false;
    return true;
  }
  bool operator != (const Apply_prints_l_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_prints_l_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_prints_l_pargs {
 public:


  virtual ~Apply_prints_l_pargs() noexcept;
  const std::string* cstr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_prints_l_result {
 public:

  Apply_prints_l_result(const Apply_prints_l_result&) noexcept;
  Apply_prints_l_result& operator=(const Apply_prints_l_result&) noexcept;
  Apply_prints_l_result() noexcept {
  }

  virtual ~Apply_prints_l_result() noexcept;

  bool operator == (const Apply_prints_l_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_prints_l_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_prints_l_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_prints_l_presult {
 public:


  virtual ~Apply_prints_l_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printi_args__isset {
  _Apply_printi_args__isset() : n(false) {}
  bool n :1;
} _Apply_printi_args__isset;

class Apply_printi_args {
 public:

  Apply_printi_args(const Apply_printi_args&) noexcept;
  Apply_printi_args& operator=(const Apply_printi_args&) noexcept;
  Apply_printi_args() noexcept
                    : n(0) {
  }

  virtual ~Apply_printi_args() noexcept;
  int64_t n;

  _Apply_printi_args__isset __isset;

  void __set_n(const int64_t val);

  bool operator == (const Apply_printi_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const Apply_printi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printi_pargs {
 public:


  virtual ~Apply_printi_pargs() noexcept;
  const int64_t* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printi_result {
 public:

  Apply_printi_result(const Apply_printi_result&) noexcept;
  Apply_printi_result& operator=(const Apply_printi_result&) noexcept;
  Apply_printi_result() noexcept {
  }

  virtual ~Apply_printi_result() noexcept;

  bool operator == (const Apply_printi_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printi_presult {
 public:


  virtual ~Apply_printi_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printui_args__isset {
  _Apply_printui_args__isset() : n(false) {}
  bool n :1;
} _Apply_printui_args__isset;

class Apply_printui_args {
 public:

  Apply_printui_args(const Apply_printui_args&);
  Apply_printui_args& operator=(const Apply_printui_args&);
  Apply_printui_args() noexcept {
  }

  virtual ~Apply_printui_args() noexcept;
  Uint64 n;

  _Apply_printui_args__isset __isset;

  void __set_n(const Uint64& val);

  bool operator == (const Apply_printui_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const Apply_printui_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printui_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printui_pargs {
 public:


  virtual ~Apply_printui_pargs() noexcept;
  const Uint64* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printui_result {
 public:

  Apply_printui_result(const Apply_printui_result&) noexcept;
  Apply_printui_result& operator=(const Apply_printui_result&) noexcept;
  Apply_printui_result() noexcept {
  }

  virtual ~Apply_printui_result() noexcept;

  bool operator == (const Apply_printui_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printui_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printui_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printui_presult {
 public:


  virtual ~Apply_printui_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printi128_args__isset {
  _Apply_printi128_args__isset() : value(false) {}
  bool value :1;
} _Apply_printi128_args__isset;

class Apply_printi128_args {
 public:

  Apply_printi128_args(const Apply_printi128_args&);
  Apply_printi128_args& operator=(const Apply_printi128_args&);
  Apply_printi128_args() noexcept
                       : value() {
  }

  virtual ~Apply_printi128_args() noexcept;
  std::string value;

  _Apply_printi128_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const Apply_printi128_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Apply_printi128_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printi128_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printi128_pargs {
 public:


  virtual ~Apply_printi128_pargs() noexcept;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printi128_result {
 public:

  Apply_printi128_result(const Apply_printi128_result&) noexcept;
  Apply_printi128_result& operator=(const Apply_printi128_result&) noexcept;
  Apply_printi128_result() noexcept {
  }

  virtual ~Apply_printi128_result() noexcept;

  bool operator == (const Apply_printi128_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printi128_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printi128_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printi128_presult {
 public:


  virtual ~Apply_printi128_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printui128_args__isset {
  _Apply_printui128_args__isset() : value(false) {}
  bool value :1;
} _Apply_printui128_args__isset;

class Apply_printui128_args {
 public:

  Apply_printui128_args(const Apply_printui128_args&);
  Apply_printui128_args& operator=(const Apply_printui128_args&);
  Apply_printui128_args() noexcept
                        : value() {
  }

  virtual ~Apply_printui128_args() noexcept;
  std::string value;

  _Apply_printui128_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const Apply_printui128_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Apply_printui128_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printui128_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printui128_pargs {
 public:


  virtual ~Apply_printui128_pargs() noexcept;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printui128_result {
 public:

  Apply_printui128_result(const Apply_printui128_result&) noexcept;
  Apply_printui128_result& operator=(const Apply_printui128_result&) noexcept;
  Apply_printui128_result() noexcept {
  }

  virtual ~Apply_printui128_result() noexcept;

  bool operator == (const Apply_printui128_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printui128_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printui128_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printui128_presult {
 public:


  virtual ~Apply_printui128_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printsf_args__isset {
  _Apply_printsf_args__isset() : value(false) {}
  bool value :1;
} _Apply_printsf_args__isset;

class Apply_printsf_args {
 public:

  Apply_printsf_args(const Apply_printsf_args&);
  Apply_printsf_args& operator=(const Apply_printsf_args&);
  Apply_printsf_args() noexcept
                     : value() {
  }

  virtual ~Apply_printsf_args() noexcept;
  std::string value;

  _Apply_printsf_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const Apply_printsf_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Apply_printsf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printsf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printsf_pargs {
 public:


  virtual ~Apply_printsf_pargs() noexcept;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printsf_result {
 public:

  Apply_printsf_result(const Apply_printsf_result&) noexcept;
  Apply_printsf_result& operator=(const Apply_printsf_result&) noexcept;
  Apply_printsf_result() noexcept {
  }

  virtual ~Apply_printsf_result() noexcept;

  bool operator == (const Apply_printsf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printsf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printsf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printsf_presult {
 public:


  virtual ~Apply_printsf_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printdf_args__isset {
  _Apply_printdf_args__isset() : value(false) {}
  bool value :1;
} _Apply_printdf_args__isset;

class Apply_printdf_args {
 public:

  Apply_printdf_args(const Apply_printdf_args&);
  Apply_printdf_args& operator=(const Apply_printdf_args&);
  Apply_printdf_args() noexcept
                     : value() {
  }

  virtual ~Apply_printdf_args() noexcept;
  std::string value;

  _Apply_printdf_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const Apply_printdf_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Apply_printdf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printdf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printdf_pargs {
 public:


  virtual ~Apply_printdf_pargs() noexcept;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printdf_result {
 public:

  Apply_printdf_result(const Apply_printdf_result&) noexcept;
  Apply_printdf_result& operator=(const Apply_printdf_result&) noexcept;
  Apply_printdf_result() noexcept {
  }

  virtual ~Apply_printdf_result() noexcept;

  bool operator == (const Apply_printdf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printdf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printdf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printdf_presult {
 public:


  virtual ~Apply_printdf_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printqf_args__isset {
  _Apply_printqf_args__isset() : value(false) {}
  bool value :1;
} _Apply_printqf_args__isset;

class Apply_printqf_args {
 public:

  Apply_printqf_args(const Apply_printqf_args&);
  Apply_printqf_args& operator=(const Apply_printqf_args&);
  Apply_printqf_args() noexcept
                     : value() {
  }

  virtual ~Apply_printqf_args() noexcept;
  std::string value;

  _Apply_printqf_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const Apply_printqf_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Apply_printqf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printqf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printqf_pargs {
 public:


  virtual ~Apply_printqf_pargs() noexcept;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printqf_result {
 public:

  Apply_printqf_result(const Apply_printqf_result&) noexcept;
  Apply_printqf_result& operator=(const Apply_printqf_result&) noexcept;
  Apply_printqf_result() noexcept {
  }

  virtual ~Apply_printqf_result() noexcept;

  bool operator == (const Apply_printqf_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printqf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printqf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printqf_presult {
 public:


  virtual ~Apply_printqf_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printn_args__isset {
  _Apply_printn_args__isset() : name(false) {}
  bool name :1;
} _Apply_printn_args__isset;

class Apply_printn_args {
 public:

  Apply_printn_args(const Apply_printn_args&);
  Apply_printn_args& operator=(const Apply_printn_args&);
  Apply_printn_args() noexcept {
  }

  virtual ~Apply_printn_args() noexcept;
  Uint64 name;

  _Apply_printn_args__isset __isset;

  void __set_name(const Uint64& val);

  bool operator == (const Apply_printn_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Apply_printn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printn_pargs {
 public:


  virtual ~Apply_printn_pargs() noexcept;
  const Uint64* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printn_result {
 public:

  Apply_printn_result(const Apply_printn_result&) noexcept;
  Apply_printn_result& operator=(const Apply_printn_result&) noexcept;
  Apply_printn_result() noexcept {
  }

  virtual ~Apply_printn_result() noexcept;

  bool operator == (const Apply_printn_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printn_presult {
 public:


  virtual ~Apply_printn_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_printhex_args__isset {
  _Apply_printhex_args__isset() : data(false) {}
  bool data :1;
} _Apply_printhex_args__isset;

class Apply_printhex_args {
 public:

  Apply_printhex_args(const Apply_printhex_args&);
  Apply_printhex_args& operator=(const Apply_printhex_args&);
  Apply_printhex_args() noexcept
                      : data() {
  }

  virtual ~Apply_printhex_args() noexcept;
  std::string data;

  _Apply_printhex_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Apply_printhex_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_printhex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printhex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printhex_pargs {
 public:


  virtual ~Apply_printhex_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printhex_result {
 public:

  Apply_printhex_result(const Apply_printhex_result&) noexcept;
  Apply_printhex_result& operator=(const Apply_printhex_result&) noexcept;
  Apply_printhex_result() noexcept {
  }

  virtual ~Apply_printhex_result() noexcept;

  bool operator == (const Apply_printhex_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_printhex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_printhex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_printhex_presult {
 public:


  virtual ~Apply_printhex_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_action_data_size_args {
 public:

  Apply_action_data_size_args(const Apply_action_data_size_args&) noexcept;
  Apply_action_data_size_args& operator=(const Apply_action_data_size_args&) noexcept;
  Apply_action_data_size_args() noexcept {
  }

  virtual ~Apply_action_data_size_args() noexcept;

  bool operator == (const Apply_action_data_size_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_action_data_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_action_data_size_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_action_data_size_pargs {
 public:


  virtual ~Apply_action_data_size_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_action_data_size_result__isset {
  _Apply_action_data_size_result__isset() : success(false) {}
  bool success :1;
} _Apply_action_data_size_result__isset;

class Apply_action_data_size_result {
 public:

  Apply_action_data_size_result(const Apply_action_data_size_result&) noexcept;
  Apply_action_data_size_result& operator=(const Apply_action_data_size_result&) noexcept;
  Apply_action_data_size_result() noexcept
                                : success(0) {
  }

  virtual ~Apply_action_data_size_result() noexcept;
  int32_t success;

  _Apply_action_data_size_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_action_data_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_action_data_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_action_data_size_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_action_data_size_presult__isset {
  _Apply_action_data_size_presult__isset() : success(false) {}
  bool success :1;
} _Apply_action_data_size_presult__isset;

class Apply_action_data_size_presult {
 public:


  virtual ~Apply_action_data_size_presult() noexcept;
  int32_t* success;

  _Apply_action_data_size_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_read_action_data_args {
 public:

  Apply_read_action_data_args(const Apply_read_action_data_args&) noexcept;
  Apply_read_action_data_args& operator=(const Apply_read_action_data_args&) noexcept;
  Apply_read_action_data_args() noexcept {
  }

  virtual ~Apply_read_action_data_args() noexcept;

  bool operator == (const Apply_read_action_data_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_read_action_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_read_action_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_read_action_data_pargs {
 public:


  virtual ~Apply_read_action_data_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_read_action_data_result__isset {
  _Apply_read_action_data_result__isset() : success(false) {}
  bool success :1;
} _Apply_read_action_data_result__isset;

class Apply_read_action_data_result {
 public:

  Apply_read_action_data_result(const Apply_read_action_data_result&);
  Apply_read_action_data_result& operator=(const Apply_read_action_data_result&);
  Apply_read_action_data_result() noexcept
                                : success() {
  }

  virtual ~Apply_read_action_data_result() noexcept;
  std::string success;

  _Apply_read_action_data_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_read_action_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_read_action_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_read_action_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_read_action_data_presult__isset {
  _Apply_read_action_data_presult__isset() : success(false) {}
  bool success :1;
} _Apply_read_action_data_presult__isset;

class Apply_read_action_data_presult {
 public:


  virtual ~Apply_read_action_data_presult() noexcept;
  std::string* success;

  _Apply_read_action_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_require_recipient_args__isset {
  _Apply_require_recipient_args__isset() : name(false) {}
  bool name :1;
} _Apply_require_recipient_args__isset;

class Apply_require_recipient_args {
 public:

  Apply_require_recipient_args(const Apply_require_recipient_args&);
  Apply_require_recipient_args& operator=(const Apply_require_recipient_args&);
  Apply_require_recipient_args() noexcept {
  }

  virtual ~Apply_require_recipient_args() noexcept;
  Uint64 name;

  _Apply_require_recipient_args__isset __isset;

  void __set_name(const Uint64& val);

  bool operator == (const Apply_require_recipient_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Apply_require_recipient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_require_recipient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_recipient_pargs {
 public:


  virtual ~Apply_require_recipient_pargs() noexcept;
  const Uint64* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_recipient_result {
 public:

  Apply_require_recipient_result(const Apply_require_recipient_result&) noexcept;
  Apply_require_recipient_result& operator=(const Apply_require_recipient_result&) noexcept;
  Apply_require_recipient_result() noexcept {
  }

  virtual ~Apply_require_recipient_result() noexcept;

  bool operator == (const Apply_require_recipient_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_require_recipient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_require_recipient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_recipient_presult {
 public:


  virtual ~Apply_require_recipient_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_require_auth_args__isset {
  _Apply_require_auth_args__isset() : name(false) {}
  bool name :1;
} _Apply_require_auth_args__isset;

class Apply_require_auth_args {
 public:

  Apply_require_auth_args(const Apply_require_auth_args&);
  Apply_require_auth_args& operator=(const Apply_require_auth_args&);
  Apply_require_auth_args() noexcept {
  }

  virtual ~Apply_require_auth_args() noexcept;
  Uint64 name;

  _Apply_require_auth_args__isset __isset;

  void __set_name(const Uint64& val);

  bool operator == (const Apply_require_auth_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Apply_require_auth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_require_auth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_auth_pargs {
 public:


  virtual ~Apply_require_auth_pargs() noexcept;
  const Uint64* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_auth_result {
 public:

  Apply_require_auth_result(const Apply_require_auth_result&) noexcept;
  Apply_require_auth_result& operator=(const Apply_require_auth_result&) noexcept;
  Apply_require_auth_result() noexcept {
  }

  virtual ~Apply_require_auth_result() noexcept;

  bool operator == (const Apply_require_auth_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_require_auth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_require_auth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_auth_presult {
 public:


  virtual ~Apply_require_auth_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_has_auth_args__isset {
  _Apply_has_auth_args__isset() : name(false) {}
  bool name :1;
} _Apply_has_auth_args__isset;

class Apply_has_auth_args {
 public:

  Apply_has_auth_args(const Apply_has_auth_args&);
  Apply_has_auth_args& operator=(const Apply_has_auth_args&);
  Apply_has_auth_args() noexcept {
  }

  virtual ~Apply_has_auth_args() noexcept;
  Uint64 name;

  _Apply_has_auth_args__isset __isset;

  void __set_name(const Uint64& val);

  bool operator == (const Apply_has_auth_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Apply_has_auth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_has_auth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_has_auth_pargs {
 public:


  virtual ~Apply_has_auth_pargs() noexcept;
  const Uint64* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_has_auth_result__isset {
  _Apply_has_auth_result__isset() : success(false) {}
  bool success :1;
} _Apply_has_auth_result__isset;

class Apply_has_auth_result {
 public:

  Apply_has_auth_result(const Apply_has_auth_result&) noexcept;
  Apply_has_auth_result& operator=(const Apply_has_auth_result&) noexcept;
  Apply_has_auth_result() noexcept
                        : success(0) {
  }

  virtual ~Apply_has_auth_result() noexcept;
  bool success;

  _Apply_has_auth_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Apply_has_auth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_has_auth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_has_auth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_has_auth_presult__isset {
  _Apply_has_auth_presult__isset() : success(false) {}
  bool success :1;
} _Apply_has_auth_presult__isset;

class Apply_has_auth_presult {
 public:


  virtual ~Apply_has_auth_presult() noexcept;
  bool* success;

  _Apply_has_auth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_require_auth2_args__isset {
  _Apply_require_auth2_args__isset() : name(false), permission(false) {}
  bool name :1;
  bool permission :1;
} _Apply_require_auth2_args__isset;

class Apply_require_auth2_args {
 public:

  Apply_require_auth2_args(const Apply_require_auth2_args&);
  Apply_require_auth2_args& operator=(const Apply_require_auth2_args&);
  Apply_require_auth2_args() noexcept {
  }

  virtual ~Apply_require_auth2_args() noexcept;
  Uint64 name;
  Uint64 permission;

  _Apply_require_auth2_args__isset __isset;

  void __set_name(const Uint64& val);

  void __set_permission(const Uint64& val);

  bool operator == (const Apply_require_auth2_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const Apply_require_auth2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_require_auth2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_auth2_pargs {
 public:


  virtual ~Apply_require_auth2_pargs() noexcept;
  const Uint64* name;
  const Uint64* permission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_auth2_result {
 public:

  Apply_require_auth2_result(const Apply_require_auth2_result&) noexcept;
  Apply_require_auth2_result& operator=(const Apply_require_auth2_result&) noexcept;
  Apply_require_auth2_result() noexcept {
  }

  virtual ~Apply_require_auth2_result() noexcept;

  bool operator == (const Apply_require_auth2_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_require_auth2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_require_auth2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_require_auth2_presult {
 public:


  virtual ~Apply_require_auth2_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_is_account_args__isset {
  _Apply_is_account_args__isset() : name(false) {}
  bool name :1;
} _Apply_is_account_args__isset;

class Apply_is_account_args {
 public:

  Apply_is_account_args(const Apply_is_account_args&);
  Apply_is_account_args& operator=(const Apply_is_account_args&);
  Apply_is_account_args() noexcept {
  }

  virtual ~Apply_is_account_args() noexcept;
  Uint64 name;

  _Apply_is_account_args__isset __isset;

  void __set_name(const Uint64& val);

  bool operator == (const Apply_is_account_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Apply_is_account_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_is_account_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_is_account_pargs {
 public:


  virtual ~Apply_is_account_pargs() noexcept;
  const Uint64* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_is_account_result__isset {
  _Apply_is_account_result__isset() : success(false) {}
  bool success :1;
} _Apply_is_account_result__isset;

class Apply_is_account_result {
 public:

  Apply_is_account_result(const Apply_is_account_result&) noexcept;
  Apply_is_account_result& operator=(const Apply_is_account_result&) noexcept;
  Apply_is_account_result() noexcept
                          : success(0) {
  }

  virtual ~Apply_is_account_result() noexcept;
  bool success;

  _Apply_is_account_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Apply_is_account_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_is_account_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_is_account_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_is_account_presult__isset {
  _Apply_is_account_presult__isset() : success(false) {}
  bool success :1;
} _Apply_is_account_presult__isset;

class Apply_is_account_presult {
 public:


  virtual ~Apply_is_account_presult() noexcept;
  bool* success;

  _Apply_is_account_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_send_inline_args__isset {
  _Apply_send_inline_args__isset() : serialized_action(false) {}
  bool serialized_action :1;
} _Apply_send_inline_args__isset;

class Apply_send_inline_args {
 public:

  Apply_send_inline_args(const Apply_send_inline_args&);
  Apply_send_inline_args& operator=(const Apply_send_inline_args&);
  Apply_send_inline_args() noexcept
                         : serialized_action() {
  }

  virtual ~Apply_send_inline_args() noexcept;
  std::string serialized_action;

  _Apply_send_inline_args__isset __isset;

  void __set_serialized_action(const std::string& val);

  bool operator == (const Apply_send_inline_args & rhs) const
  {
    if (!(serialized_action == rhs.serialized_action))
      return false;
    return true;
  }
  bool operator != (const Apply_send_inline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_send_inline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_inline_pargs {
 public:


  virtual ~Apply_send_inline_pargs() noexcept;
  const std::string* serialized_action;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_inline_result {
 public:

  Apply_send_inline_result(const Apply_send_inline_result&) noexcept;
  Apply_send_inline_result& operator=(const Apply_send_inline_result&) noexcept;
  Apply_send_inline_result() noexcept {
  }

  virtual ~Apply_send_inline_result() noexcept;

  bool operator == (const Apply_send_inline_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_send_inline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_send_inline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_inline_presult {
 public:


  virtual ~Apply_send_inline_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_send_context_free_inline_args__isset {
  _Apply_send_context_free_inline_args__isset() : serialized_data(false) {}
  bool serialized_data :1;
} _Apply_send_context_free_inline_args__isset;

class Apply_send_context_free_inline_args {
 public:

  Apply_send_context_free_inline_args(const Apply_send_context_free_inline_args&);
  Apply_send_context_free_inline_args& operator=(const Apply_send_context_free_inline_args&);
  Apply_send_context_free_inline_args() noexcept
                                      : serialized_data() {
  }

  virtual ~Apply_send_context_free_inline_args() noexcept;
  std::string serialized_data;

  _Apply_send_context_free_inline_args__isset __isset;

  void __set_serialized_data(const std::string& val);

  bool operator == (const Apply_send_context_free_inline_args & rhs) const
  {
    if (!(serialized_data == rhs.serialized_data))
      return false;
    return true;
  }
  bool operator != (const Apply_send_context_free_inline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_send_context_free_inline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_context_free_inline_pargs {
 public:


  virtual ~Apply_send_context_free_inline_pargs() noexcept;
  const std::string* serialized_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_context_free_inline_result {
 public:

  Apply_send_context_free_inline_result(const Apply_send_context_free_inline_result&) noexcept;
  Apply_send_context_free_inline_result& operator=(const Apply_send_context_free_inline_result&) noexcept;
  Apply_send_context_free_inline_result() noexcept {
  }

  virtual ~Apply_send_context_free_inline_result() noexcept;

  bool operator == (const Apply_send_context_free_inline_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_send_context_free_inline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_send_context_free_inline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_context_free_inline_presult {
 public:


  virtual ~Apply_send_context_free_inline_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_publication_time_args {
 public:

  Apply_publication_time_args(const Apply_publication_time_args&) noexcept;
  Apply_publication_time_args& operator=(const Apply_publication_time_args&) noexcept;
  Apply_publication_time_args() noexcept {
  }

  virtual ~Apply_publication_time_args() noexcept;

  bool operator == (const Apply_publication_time_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_publication_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_publication_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_publication_time_pargs {
 public:


  virtual ~Apply_publication_time_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_publication_time_result__isset {
  _Apply_publication_time_result__isset() : success(false) {}
  bool success :1;
} _Apply_publication_time_result__isset;

class Apply_publication_time_result {
 public:

  Apply_publication_time_result(const Apply_publication_time_result&);
  Apply_publication_time_result& operator=(const Apply_publication_time_result&);
  Apply_publication_time_result() noexcept {
  }

  virtual ~Apply_publication_time_result() noexcept;
  Uint64 success;

  _Apply_publication_time_result__isset __isset;

  void __set_success(const Uint64& val);

  bool operator == (const Apply_publication_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_publication_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_publication_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_publication_time_presult__isset {
  _Apply_publication_time_presult__isset() : success(false) {}
  bool success :1;
} _Apply_publication_time_presult__isset;

class Apply_publication_time_presult {
 public:


  virtual ~Apply_publication_time_presult() noexcept;
  Uint64* success;

  _Apply_publication_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_current_receiver_args {
 public:

  Apply_current_receiver_args(const Apply_current_receiver_args&) noexcept;
  Apply_current_receiver_args& operator=(const Apply_current_receiver_args&) noexcept;
  Apply_current_receiver_args() noexcept {
  }

  virtual ~Apply_current_receiver_args() noexcept;

  bool operator == (const Apply_current_receiver_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_current_receiver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_current_receiver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_current_receiver_pargs {
 public:


  virtual ~Apply_current_receiver_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_current_receiver_result__isset {
  _Apply_current_receiver_result__isset() : success(false) {}
  bool success :1;
} _Apply_current_receiver_result__isset;

class Apply_current_receiver_result {
 public:

  Apply_current_receiver_result(const Apply_current_receiver_result&);
  Apply_current_receiver_result& operator=(const Apply_current_receiver_result&);
  Apply_current_receiver_result() noexcept {
  }

  virtual ~Apply_current_receiver_result() noexcept;
  Uint64 success;

  _Apply_current_receiver_result__isset __isset;

  void __set_success(const Uint64& val);

  bool operator == (const Apply_current_receiver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_current_receiver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_current_receiver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_current_receiver_presult__isset {
  _Apply_current_receiver_presult__isset() : success(false) {}
  bool success :1;
} _Apply_current_receiver_presult__isset;

class Apply_current_receiver_presult {
 public:


  virtual ~Apply_current_receiver_presult() noexcept;
  Uint64* success;

  _Apply_current_receiver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_eosio_assert_args__isset {
  _Apply_eosio_assert_args__isset() : test(false), msg(false) {}
  bool test :1;
  bool msg :1;
} _Apply_eosio_assert_args__isset;

class Apply_eosio_assert_args {
 public:

  Apply_eosio_assert_args(const Apply_eosio_assert_args&);
  Apply_eosio_assert_args& operator=(const Apply_eosio_assert_args&);
  Apply_eosio_assert_args() noexcept
                          : test(0),
                            msg() {
  }

  virtual ~Apply_eosio_assert_args() noexcept;
  bool test;
  std::string msg;

  _Apply_eosio_assert_args__isset __isset;

  void __set_test(const bool val);

  void __set_msg(const std::string& val);

  bool operator == (const Apply_eosio_assert_args & rhs) const
  {
    if (!(test == rhs.test))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Apply_eosio_assert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_assert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_pargs {
 public:


  virtual ~Apply_eosio_assert_pargs() noexcept;
  const bool* test;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_result {
 public:

  Apply_eosio_assert_result(const Apply_eosio_assert_result&) noexcept;
  Apply_eosio_assert_result& operator=(const Apply_eosio_assert_result&) noexcept;
  Apply_eosio_assert_result() noexcept {
  }

  virtual ~Apply_eosio_assert_result() noexcept;

  bool operator == (const Apply_eosio_assert_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_eosio_assert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_assert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_presult {
 public:


  virtual ~Apply_eosio_assert_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_eosio_assert_message_args__isset {
  _Apply_eosio_assert_message_args__isset() : test(false), msg(false) {}
  bool test :1;
  bool msg :1;
} _Apply_eosio_assert_message_args__isset;

class Apply_eosio_assert_message_args {
 public:

  Apply_eosio_assert_message_args(const Apply_eosio_assert_message_args&);
  Apply_eosio_assert_message_args& operator=(const Apply_eosio_assert_message_args&);
  Apply_eosio_assert_message_args() noexcept
                                  : test(0),
                                    msg() {
  }

  virtual ~Apply_eosio_assert_message_args() noexcept;
  bool test;
  std::string msg;

  _Apply_eosio_assert_message_args__isset __isset;

  void __set_test(const bool val);

  void __set_msg(const std::string& val);

  bool operator == (const Apply_eosio_assert_message_args & rhs) const
  {
    if (!(test == rhs.test))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Apply_eosio_assert_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_assert_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_message_pargs {
 public:


  virtual ~Apply_eosio_assert_message_pargs() noexcept;
  const bool* test;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_message_result {
 public:

  Apply_eosio_assert_message_result(const Apply_eosio_assert_message_result&) noexcept;
  Apply_eosio_assert_message_result& operator=(const Apply_eosio_assert_message_result&) noexcept;
  Apply_eosio_assert_message_result() noexcept {
  }

  virtual ~Apply_eosio_assert_message_result() noexcept;

  bool operator == (const Apply_eosio_assert_message_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_eosio_assert_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_assert_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_message_presult {
 public:


  virtual ~Apply_eosio_assert_message_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_eosio_assert_code_args__isset {
  _Apply_eosio_assert_code_args__isset() : test(false), code(false) {}
  bool test :1;
  bool code :1;
} _Apply_eosio_assert_code_args__isset;

class Apply_eosio_assert_code_args {
 public:

  Apply_eosio_assert_code_args(const Apply_eosio_assert_code_args&);
  Apply_eosio_assert_code_args& operator=(const Apply_eosio_assert_code_args&);
  Apply_eosio_assert_code_args() noexcept
                               : test(0) {
  }

  virtual ~Apply_eosio_assert_code_args() noexcept;
  bool test;
  Uint64 code;

  _Apply_eosio_assert_code_args__isset __isset;

  void __set_test(const bool val);

  void __set_code(const Uint64& val);

  bool operator == (const Apply_eosio_assert_code_args & rhs) const
  {
    if (!(test == rhs.test))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const Apply_eosio_assert_code_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_assert_code_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_code_pargs {
 public:


  virtual ~Apply_eosio_assert_code_pargs() noexcept;
  const bool* test;
  const Uint64* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_code_result {
 public:

  Apply_eosio_assert_code_result(const Apply_eosio_assert_code_result&) noexcept;
  Apply_eosio_assert_code_result& operator=(const Apply_eosio_assert_code_result&) noexcept;
  Apply_eosio_assert_code_result() noexcept {
  }

  virtual ~Apply_eosio_assert_code_result() noexcept;

  bool operator == (const Apply_eosio_assert_code_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_eosio_assert_code_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_assert_code_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_assert_code_presult {
 public:


  virtual ~Apply_eosio_assert_code_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_eosio_exit_args__isset {
  _Apply_eosio_exit_args__isset() : code(false) {}
  bool code :1;
} _Apply_eosio_exit_args__isset;

class Apply_eosio_exit_args {
 public:

  Apply_eosio_exit_args(const Apply_eosio_exit_args&) noexcept;
  Apply_eosio_exit_args& operator=(const Apply_eosio_exit_args&) noexcept;
  Apply_eosio_exit_args() noexcept
                        : code(0) {
  }

  virtual ~Apply_eosio_exit_args() noexcept;
  int32_t code;

  _Apply_eosio_exit_args__isset __isset;

  void __set_code(const int32_t val);

  bool operator == (const Apply_eosio_exit_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const Apply_eosio_exit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_exit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_exit_pargs {
 public:


  virtual ~Apply_eosio_exit_pargs() noexcept;
  const int32_t* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_exit_result {
 public:

  Apply_eosio_exit_result(const Apply_eosio_exit_result&) noexcept;
  Apply_eosio_exit_result& operator=(const Apply_eosio_exit_result&) noexcept;
  Apply_eosio_exit_result() noexcept {
  }

  virtual ~Apply_eosio_exit_result() noexcept;

  bool operator == (const Apply_eosio_exit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_eosio_exit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_eosio_exit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_eosio_exit_presult {
 public:


  virtual ~Apply_eosio_exit_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_current_time_args {
 public:

  Apply_current_time_args(const Apply_current_time_args&) noexcept;
  Apply_current_time_args& operator=(const Apply_current_time_args&) noexcept;
  Apply_current_time_args() noexcept {
  }

  virtual ~Apply_current_time_args() noexcept;

  bool operator == (const Apply_current_time_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_current_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_current_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_current_time_pargs {
 public:


  virtual ~Apply_current_time_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_current_time_result__isset {
  _Apply_current_time_result__isset() : success(false) {}
  bool success :1;
} _Apply_current_time_result__isset;

class Apply_current_time_result {
 public:

  Apply_current_time_result(const Apply_current_time_result&);
  Apply_current_time_result& operator=(const Apply_current_time_result&);
  Apply_current_time_result() noexcept {
  }

  virtual ~Apply_current_time_result() noexcept;
  Uint64 success;

  _Apply_current_time_result__isset __isset;

  void __set_success(const Uint64& val);

  bool operator == (const Apply_current_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_current_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_current_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_current_time_presult__isset {
  _Apply_current_time_presult__isset() : success(false) {}
  bool success :1;
} _Apply_current_time_presult__isset;

class Apply_current_time_presult {
 public:


  virtual ~Apply_current_time_presult() noexcept;
  Uint64* success;

  _Apply_current_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_is_feature_activated_args__isset {
  _Apply_is_feature_activated_args__isset() : feature_digest(false) {}
  bool feature_digest :1;
} _Apply_is_feature_activated_args__isset;

class Apply_is_feature_activated_args {
 public:

  Apply_is_feature_activated_args(const Apply_is_feature_activated_args&);
  Apply_is_feature_activated_args& operator=(const Apply_is_feature_activated_args&);
  Apply_is_feature_activated_args() noexcept
                                  : feature_digest() {
  }

  virtual ~Apply_is_feature_activated_args() noexcept;
  std::string feature_digest;

  _Apply_is_feature_activated_args__isset __isset;

  void __set_feature_digest(const std::string& val);

  bool operator == (const Apply_is_feature_activated_args & rhs) const
  {
    if (!(feature_digest == rhs.feature_digest))
      return false;
    return true;
  }
  bool operator != (const Apply_is_feature_activated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_is_feature_activated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_is_feature_activated_pargs {
 public:


  virtual ~Apply_is_feature_activated_pargs() noexcept;
  const std::string* feature_digest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_is_feature_activated_result__isset {
  _Apply_is_feature_activated_result__isset() : success(false) {}
  bool success :1;
} _Apply_is_feature_activated_result__isset;

class Apply_is_feature_activated_result {
 public:

  Apply_is_feature_activated_result(const Apply_is_feature_activated_result&) noexcept;
  Apply_is_feature_activated_result& operator=(const Apply_is_feature_activated_result&) noexcept;
  Apply_is_feature_activated_result() noexcept
                                    : success(0) {
  }

  virtual ~Apply_is_feature_activated_result() noexcept;
  bool success;

  _Apply_is_feature_activated_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Apply_is_feature_activated_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_is_feature_activated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_is_feature_activated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_is_feature_activated_presult__isset {
  _Apply_is_feature_activated_presult__isset() : success(false) {}
  bool success :1;
} _Apply_is_feature_activated_presult__isset;

class Apply_is_feature_activated_presult {
 public:


  virtual ~Apply_is_feature_activated_presult() noexcept;
  bool* success;

  _Apply_is_feature_activated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_get_sender_args {
 public:

  Apply_get_sender_args(const Apply_get_sender_args&) noexcept;
  Apply_get_sender_args& operator=(const Apply_get_sender_args&) noexcept;
  Apply_get_sender_args() noexcept {
  }

  virtual ~Apply_get_sender_args() noexcept;

  bool operator == (const Apply_get_sender_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_get_sender_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_sender_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_sender_pargs {
 public:


  virtual ~Apply_get_sender_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_sender_result__isset {
  _Apply_get_sender_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_sender_result__isset;

class Apply_get_sender_result {
 public:

  Apply_get_sender_result(const Apply_get_sender_result&);
  Apply_get_sender_result& operator=(const Apply_get_sender_result&);
  Apply_get_sender_result() noexcept {
  }

  virtual ~Apply_get_sender_result() noexcept;
  Uint64 success;

  _Apply_get_sender_result__isset __isset;

  void __set_success(const Uint64& val);

  bool operator == (const Apply_get_sender_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_sender_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_sender_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_sender_presult__isset {
  _Apply_get_sender_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_sender_presult__isset;

class Apply_get_sender_presult {
 public:


  virtual ~Apply_get_sender_presult() noexcept;
  Uint64* success;

  _Apply_get_sender_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_assert_sha256_args__isset {
  _Apply_assert_sha256_args__isset() : data(false), hash(false) {}
  bool data :1;
  bool hash :1;
} _Apply_assert_sha256_args__isset;

class Apply_assert_sha256_args {
 public:

  Apply_assert_sha256_args(const Apply_assert_sha256_args&);
  Apply_assert_sha256_args& operator=(const Apply_assert_sha256_args&);
  Apply_assert_sha256_args() noexcept
                           : data(),
                             hash() {
  }

  virtual ~Apply_assert_sha256_args() noexcept;
  std::string data;
  std::string hash;

  _Apply_assert_sha256_args__isset __isset;

  void __set_data(const std::string& val);

  void __set_hash(const std::string& val);

  bool operator == (const Apply_assert_sha256_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(hash == rhs.hash))
      return false;
    return true;
  }
  bool operator != (const Apply_assert_sha256_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_sha256_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha256_pargs {
 public:


  virtual ~Apply_assert_sha256_pargs() noexcept;
  const std::string* data;
  const std::string* hash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha256_result {
 public:

  Apply_assert_sha256_result(const Apply_assert_sha256_result&) noexcept;
  Apply_assert_sha256_result& operator=(const Apply_assert_sha256_result&) noexcept;
  Apply_assert_sha256_result() noexcept {
  }

  virtual ~Apply_assert_sha256_result() noexcept;

  bool operator == (const Apply_assert_sha256_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_assert_sha256_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_sha256_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha256_presult {
 public:


  virtual ~Apply_assert_sha256_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_assert_sha1_args__isset {
  _Apply_assert_sha1_args__isset() : data(false), hash(false) {}
  bool data :1;
  bool hash :1;
} _Apply_assert_sha1_args__isset;

class Apply_assert_sha1_args {
 public:

  Apply_assert_sha1_args(const Apply_assert_sha1_args&);
  Apply_assert_sha1_args& operator=(const Apply_assert_sha1_args&);
  Apply_assert_sha1_args() noexcept
                         : data(),
                           hash() {
  }

  virtual ~Apply_assert_sha1_args() noexcept;
  std::string data;
  std::string hash;

  _Apply_assert_sha1_args__isset __isset;

  void __set_data(const std::string& val);

  void __set_hash(const std::string& val);

  bool operator == (const Apply_assert_sha1_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(hash == rhs.hash))
      return false;
    return true;
  }
  bool operator != (const Apply_assert_sha1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_sha1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha1_pargs {
 public:


  virtual ~Apply_assert_sha1_pargs() noexcept;
  const std::string* data;
  const std::string* hash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha1_result {
 public:

  Apply_assert_sha1_result(const Apply_assert_sha1_result&) noexcept;
  Apply_assert_sha1_result& operator=(const Apply_assert_sha1_result&) noexcept;
  Apply_assert_sha1_result() noexcept {
  }

  virtual ~Apply_assert_sha1_result() noexcept;

  bool operator == (const Apply_assert_sha1_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_assert_sha1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_sha1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha1_presult {
 public:


  virtual ~Apply_assert_sha1_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_assert_sha512_args__isset {
  _Apply_assert_sha512_args__isset() : data(false), hash(false) {}
  bool data :1;
  bool hash :1;
} _Apply_assert_sha512_args__isset;

class Apply_assert_sha512_args {
 public:

  Apply_assert_sha512_args(const Apply_assert_sha512_args&);
  Apply_assert_sha512_args& operator=(const Apply_assert_sha512_args&);
  Apply_assert_sha512_args() noexcept
                           : data(),
                             hash() {
  }

  virtual ~Apply_assert_sha512_args() noexcept;
  std::string data;
  std::string hash;

  _Apply_assert_sha512_args__isset __isset;

  void __set_data(const std::string& val);

  void __set_hash(const std::string& val);

  bool operator == (const Apply_assert_sha512_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(hash == rhs.hash))
      return false;
    return true;
  }
  bool operator != (const Apply_assert_sha512_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_sha512_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha512_pargs {
 public:


  virtual ~Apply_assert_sha512_pargs() noexcept;
  const std::string* data;
  const std::string* hash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha512_result {
 public:

  Apply_assert_sha512_result(const Apply_assert_sha512_result&) noexcept;
  Apply_assert_sha512_result& operator=(const Apply_assert_sha512_result&) noexcept;
  Apply_assert_sha512_result() noexcept {
  }

  virtual ~Apply_assert_sha512_result() noexcept;

  bool operator == (const Apply_assert_sha512_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_assert_sha512_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_sha512_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_sha512_presult {
 public:


  virtual ~Apply_assert_sha512_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_assert_ripemd160_args__isset {
  _Apply_assert_ripemd160_args__isset() : data(false), hash(false) {}
  bool data :1;
  bool hash :1;
} _Apply_assert_ripemd160_args__isset;

class Apply_assert_ripemd160_args {
 public:

  Apply_assert_ripemd160_args(const Apply_assert_ripemd160_args&);
  Apply_assert_ripemd160_args& operator=(const Apply_assert_ripemd160_args&);
  Apply_assert_ripemd160_args() noexcept
                              : data(),
                                hash() {
  }

  virtual ~Apply_assert_ripemd160_args() noexcept;
  std::string data;
  std::string hash;

  _Apply_assert_ripemd160_args__isset __isset;

  void __set_data(const std::string& val);

  void __set_hash(const std::string& val);

  bool operator == (const Apply_assert_ripemd160_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(hash == rhs.hash))
      return false;
    return true;
  }
  bool operator != (const Apply_assert_ripemd160_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_ripemd160_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_ripemd160_pargs {
 public:


  virtual ~Apply_assert_ripemd160_pargs() noexcept;
  const std::string* data;
  const std::string* hash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_ripemd160_result {
 public:

  Apply_assert_ripemd160_result(const Apply_assert_ripemd160_result&) noexcept;
  Apply_assert_ripemd160_result& operator=(const Apply_assert_ripemd160_result&) noexcept;
  Apply_assert_ripemd160_result() noexcept {
  }

  virtual ~Apply_assert_ripemd160_result() noexcept;

  bool operator == (const Apply_assert_ripemd160_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_assert_ripemd160_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_ripemd160_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_ripemd160_presult {
 public:


  virtual ~Apply_assert_ripemd160_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_sha256_args__isset {
  _Apply_sha256_args__isset() : data(false) {}
  bool data :1;
} _Apply_sha256_args__isset;

class Apply_sha256_args {
 public:

  Apply_sha256_args(const Apply_sha256_args&);
  Apply_sha256_args& operator=(const Apply_sha256_args&);
  Apply_sha256_args() noexcept
                    : data() {
  }

  virtual ~Apply_sha256_args() noexcept;
  std::string data;

  _Apply_sha256_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Apply_sha256_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_sha256_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_sha256_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_sha256_pargs {
 public:


  virtual ~Apply_sha256_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_sha256_result__isset {
  _Apply_sha256_result__isset() : success(false) {}
  bool success :1;
} _Apply_sha256_result__isset;

class Apply_sha256_result {
 public:

  Apply_sha256_result(const Apply_sha256_result&);
  Apply_sha256_result& operator=(const Apply_sha256_result&);
  Apply_sha256_result() noexcept
                      : success() {
  }

  virtual ~Apply_sha256_result() noexcept;
  std::string success;

  _Apply_sha256_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_sha256_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_sha256_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_sha256_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_sha256_presult__isset {
  _Apply_sha256_presult__isset() : success(false) {}
  bool success :1;
} _Apply_sha256_presult__isset;

class Apply_sha256_presult {
 public:


  virtual ~Apply_sha256_presult() noexcept;
  std::string* success;

  _Apply_sha256_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_sha1_args__isset {
  _Apply_sha1_args__isset() : data(false) {}
  bool data :1;
} _Apply_sha1_args__isset;

class Apply_sha1_args {
 public:

  Apply_sha1_args(const Apply_sha1_args&);
  Apply_sha1_args& operator=(const Apply_sha1_args&);
  Apply_sha1_args() noexcept
                  : data() {
  }

  virtual ~Apply_sha1_args() noexcept;
  std::string data;

  _Apply_sha1_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Apply_sha1_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_sha1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_sha1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_sha1_pargs {
 public:


  virtual ~Apply_sha1_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_sha1_result__isset {
  _Apply_sha1_result__isset() : success(false) {}
  bool success :1;
} _Apply_sha1_result__isset;

class Apply_sha1_result {
 public:

  Apply_sha1_result(const Apply_sha1_result&);
  Apply_sha1_result& operator=(const Apply_sha1_result&);
  Apply_sha1_result() noexcept
                    : success() {
  }

  virtual ~Apply_sha1_result() noexcept;
  std::string success;

  _Apply_sha1_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_sha1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_sha1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_sha1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_sha1_presult__isset {
  _Apply_sha1_presult__isset() : success(false) {}
  bool success :1;
} _Apply_sha1_presult__isset;

class Apply_sha1_presult {
 public:


  virtual ~Apply_sha1_presult() noexcept;
  std::string* success;

  _Apply_sha1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_sha512_args__isset {
  _Apply_sha512_args__isset() : data(false) {}
  bool data :1;
} _Apply_sha512_args__isset;

class Apply_sha512_args {
 public:

  Apply_sha512_args(const Apply_sha512_args&);
  Apply_sha512_args& operator=(const Apply_sha512_args&);
  Apply_sha512_args() noexcept
                    : data() {
  }

  virtual ~Apply_sha512_args() noexcept;
  std::string data;

  _Apply_sha512_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Apply_sha512_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_sha512_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_sha512_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_sha512_pargs {
 public:


  virtual ~Apply_sha512_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_sha512_result__isset {
  _Apply_sha512_result__isset() : success(false) {}
  bool success :1;
} _Apply_sha512_result__isset;

class Apply_sha512_result {
 public:

  Apply_sha512_result(const Apply_sha512_result&);
  Apply_sha512_result& operator=(const Apply_sha512_result&);
  Apply_sha512_result() noexcept
                      : success() {
  }

  virtual ~Apply_sha512_result() noexcept;
  std::string success;

  _Apply_sha512_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_sha512_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_sha512_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_sha512_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_sha512_presult__isset {
  _Apply_sha512_presult__isset() : success(false) {}
  bool success :1;
} _Apply_sha512_presult__isset;

class Apply_sha512_presult {
 public:


  virtual ~Apply_sha512_presult() noexcept;
  std::string* success;

  _Apply_sha512_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_ripemd160_args__isset {
  _Apply_ripemd160_args__isset() : data(false) {}
  bool data :1;
} _Apply_ripemd160_args__isset;

class Apply_ripemd160_args {
 public:

  Apply_ripemd160_args(const Apply_ripemd160_args&);
  Apply_ripemd160_args& operator=(const Apply_ripemd160_args&);
  Apply_ripemd160_args() noexcept
                       : data() {
  }

  virtual ~Apply_ripemd160_args() noexcept;
  std::string data;

  _Apply_ripemd160_args__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const Apply_ripemd160_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_ripemd160_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_ripemd160_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_ripemd160_pargs {
 public:


  virtual ~Apply_ripemd160_pargs() noexcept;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_ripemd160_result__isset {
  _Apply_ripemd160_result__isset() : success(false) {}
  bool success :1;
} _Apply_ripemd160_result__isset;

class Apply_ripemd160_result {
 public:

  Apply_ripemd160_result(const Apply_ripemd160_result&);
  Apply_ripemd160_result& operator=(const Apply_ripemd160_result&);
  Apply_ripemd160_result() noexcept
                         : success() {
  }

  virtual ~Apply_ripemd160_result() noexcept;
  std::string success;

  _Apply_ripemd160_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_ripemd160_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_ripemd160_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_ripemd160_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_ripemd160_presult__isset {
  _Apply_ripemd160_presult__isset() : success(false) {}
  bool success :1;
} _Apply_ripemd160_presult__isset;

class Apply_ripemd160_presult {
 public:


  virtual ~Apply_ripemd160_presult() noexcept;
  std::string* success;

  _Apply_ripemd160_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_recover_key_args__isset {
  _Apply_recover_key_args__isset() : digest(false), sig(false) {}
  bool digest :1;
  bool sig :1;
} _Apply_recover_key_args__isset;

class Apply_recover_key_args {
 public:

  Apply_recover_key_args(const Apply_recover_key_args&);
  Apply_recover_key_args& operator=(const Apply_recover_key_args&);
  Apply_recover_key_args() noexcept
                         : digest(),
                           sig() {
  }

  virtual ~Apply_recover_key_args() noexcept;
  std::string digest;
  std::string sig;

  _Apply_recover_key_args__isset __isset;

  void __set_digest(const std::string& val);

  void __set_sig(const std::string& val);

  bool operator == (const Apply_recover_key_args & rhs) const
  {
    if (!(digest == rhs.digest))
      return false;
    if (!(sig == rhs.sig))
      return false;
    return true;
  }
  bool operator != (const Apply_recover_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_recover_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_recover_key_pargs {
 public:


  virtual ~Apply_recover_key_pargs() noexcept;
  const std::string* digest;
  const std::string* sig;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_recover_key_result__isset {
  _Apply_recover_key_result__isset() : success(false) {}
  bool success :1;
} _Apply_recover_key_result__isset;

class Apply_recover_key_result {
 public:

  Apply_recover_key_result(const Apply_recover_key_result&);
  Apply_recover_key_result& operator=(const Apply_recover_key_result&);
  Apply_recover_key_result() noexcept
                           : success() {
  }

  virtual ~Apply_recover_key_result() noexcept;
  std::string success;

  _Apply_recover_key_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_recover_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_recover_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_recover_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_recover_key_presult__isset {
  _Apply_recover_key_presult__isset() : success(false) {}
  bool success :1;
} _Apply_recover_key_presult__isset;

class Apply_recover_key_presult {
 public:


  virtual ~Apply_recover_key_presult() noexcept;
  std::string* success;

  _Apply_recover_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_assert_recover_key_args__isset {
  _Apply_assert_recover_key_args__isset() : digest(false), sig(false), pub(false) {}
  bool digest :1;
  bool sig :1;
  bool pub :1;
} _Apply_assert_recover_key_args__isset;

class Apply_assert_recover_key_args {
 public:

  Apply_assert_recover_key_args(const Apply_assert_recover_key_args&);
  Apply_assert_recover_key_args& operator=(const Apply_assert_recover_key_args&);
  Apply_assert_recover_key_args() noexcept
                                : digest(),
                                  sig(),
                                  pub() {
  }

  virtual ~Apply_assert_recover_key_args() noexcept;
  std::string digest;
  std::string sig;
  std::string pub;

  _Apply_assert_recover_key_args__isset __isset;

  void __set_digest(const std::string& val);

  void __set_sig(const std::string& val);

  void __set_pub(const std::string& val);

  bool operator == (const Apply_assert_recover_key_args & rhs) const
  {
    if (!(digest == rhs.digest))
      return false;
    if (!(sig == rhs.sig))
      return false;
    if (!(pub == rhs.pub))
      return false;
    return true;
  }
  bool operator != (const Apply_assert_recover_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_recover_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_recover_key_pargs {
 public:


  virtual ~Apply_assert_recover_key_pargs() noexcept;
  const std::string* digest;
  const std::string* sig;
  const std::string* pub;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_recover_key_result {
 public:

  Apply_assert_recover_key_result(const Apply_assert_recover_key_result&) noexcept;
  Apply_assert_recover_key_result& operator=(const Apply_assert_recover_key_result&) noexcept;
  Apply_assert_recover_key_result() noexcept {
  }

  virtual ~Apply_assert_recover_key_result() noexcept;

  bool operator == (const Apply_assert_recover_key_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_assert_recover_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_assert_recover_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_assert_recover_key_presult {
 public:


  virtual ~Apply_assert_recover_key_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_send_deferred_args__isset {
  _Apply_send_deferred_args__isset() : sender_id(false), payer(false), serialized_transaction(false), replace_existing(false) {}
  bool sender_id :1;
  bool payer :1;
  bool serialized_transaction :1;
  bool replace_existing :1;
} _Apply_send_deferred_args__isset;

class Apply_send_deferred_args {
 public:

  Apply_send_deferred_args(const Apply_send_deferred_args&);
  Apply_send_deferred_args& operator=(const Apply_send_deferred_args&);
  Apply_send_deferred_args() noexcept
                           : sender_id(),
                             serialized_transaction(),
                             replace_existing(0) {
  }

  virtual ~Apply_send_deferred_args() noexcept;
  std::string sender_id;
  Uint64 payer;
  std::string serialized_transaction;
  int32_t replace_existing;

  _Apply_send_deferred_args__isset __isset;

  void __set_sender_id(const std::string& val);

  void __set_payer(const Uint64& val);

  void __set_serialized_transaction(const std::string& val);

  void __set_replace_existing(const int32_t val);

  bool operator == (const Apply_send_deferred_args & rhs) const
  {
    if (!(sender_id == rhs.sender_id))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(serialized_transaction == rhs.serialized_transaction))
      return false;
    if (!(replace_existing == rhs.replace_existing))
      return false;
    return true;
  }
  bool operator != (const Apply_send_deferred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_send_deferred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_deferred_pargs {
 public:


  virtual ~Apply_send_deferred_pargs() noexcept;
  const std::string* sender_id;
  const Uint64* payer;
  const std::string* serialized_transaction;
  const int32_t* replace_existing;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_deferred_result {
 public:

  Apply_send_deferred_result(const Apply_send_deferred_result&) noexcept;
  Apply_send_deferred_result& operator=(const Apply_send_deferred_result&) noexcept;
  Apply_send_deferred_result() noexcept {
  }

  virtual ~Apply_send_deferred_result() noexcept;

  bool operator == (const Apply_send_deferred_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_send_deferred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_send_deferred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_send_deferred_presult {
 public:


  virtual ~Apply_send_deferred_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_cancel_deferred_args__isset {
  _Apply_cancel_deferred_args__isset() : sender_id(false) {}
  bool sender_id :1;
} _Apply_cancel_deferred_args__isset;

class Apply_cancel_deferred_args {
 public:

  Apply_cancel_deferred_args(const Apply_cancel_deferred_args&);
  Apply_cancel_deferred_args& operator=(const Apply_cancel_deferred_args&);
  Apply_cancel_deferred_args() noexcept
                             : sender_id() {
  }

  virtual ~Apply_cancel_deferred_args() noexcept;
  std::string sender_id;

  _Apply_cancel_deferred_args__isset __isset;

  void __set_sender_id(const std::string& val);

  bool operator == (const Apply_cancel_deferred_args & rhs) const
  {
    if (!(sender_id == rhs.sender_id))
      return false;
    return true;
  }
  bool operator != (const Apply_cancel_deferred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_cancel_deferred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_cancel_deferred_pargs {
 public:


  virtual ~Apply_cancel_deferred_pargs() noexcept;
  const std::string* sender_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_cancel_deferred_result__isset {
  _Apply_cancel_deferred_result__isset() : success(false) {}
  bool success :1;
} _Apply_cancel_deferred_result__isset;

class Apply_cancel_deferred_result {
 public:

  Apply_cancel_deferred_result(const Apply_cancel_deferred_result&) noexcept;
  Apply_cancel_deferred_result& operator=(const Apply_cancel_deferred_result&) noexcept;
  Apply_cancel_deferred_result() noexcept
                               : success(0) {
  }

  virtual ~Apply_cancel_deferred_result() noexcept;
  int32_t success;

  _Apply_cancel_deferred_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_cancel_deferred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_cancel_deferred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_cancel_deferred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_cancel_deferred_presult__isset {
  _Apply_cancel_deferred_presult__isset() : success(false) {}
  bool success :1;
} _Apply_cancel_deferred_presult__isset;

class Apply_cancel_deferred_presult {
 public:


  virtual ~Apply_cancel_deferred_presult() noexcept;
  int32_t* success;

  _Apply_cancel_deferred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_read_transaction_args {
 public:

  Apply_read_transaction_args(const Apply_read_transaction_args&) noexcept;
  Apply_read_transaction_args& operator=(const Apply_read_transaction_args&) noexcept;
  Apply_read_transaction_args() noexcept {
  }

  virtual ~Apply_read_transaction_args() noexcept;

  bool operator == (const Apply_read_transaction_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_read_transaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_read_transaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_read_transaction_pargs {
 public:


  virtual ~Apply_read_transaction_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_read_transaction_result__isset {
  _Apply_read_transaction_result__isset() : success(false) {}
  bool success :1;
} _Apply_read_transaction_result__isset;

class Apply_read_transaction_result {
 public:

  Apply_read_transaction_result(const Apply_read_transaction_result&);
  Apply_read_transaction_result& operator=(const Apply_read_transaction_result&);
  Apply_read_transaction_result() noexcept
                                : success() {
  }

  virtual ~Apply_read_transaction_result() noexcept;
  std::string success;

  _Apply_read_transaction_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_read_transaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_read_transaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_read_transaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_read_transaction_presult__isset {
  _Apply_read_transaction_presult__isset() : success(false) {}
  bool success :1;
} _Apply_read_transaction_presult__isset;

class Apply_read_transaction_presult {
 public:


  virtual ~Apply_read_transaction_presult() noexcept;
  std::string* success;

  _Apply_read_transaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_transaction_size_args {
 public:

  Apply_transaction_size_args(const Apply_transaction_size_args&) noexcept;
  Apply_transaction_size_args& operator=(const Apply_transaction_size_args&) noexcept;
  Apply_transaction_size_args() noexcept {
  }

  virtual ~Apply_transaction_size_args() noexcept;

  bool operator == (const Apply_transaction_size_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_transaction_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_transaction_size_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_transaction_size_pargs {
 public:


  virtual ~Apply_transaction_size_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_transaction_size_result__isset {
  _Apply_transaction_size_result__isset() : success(false) {}
  bool success :1;
} _Apply_transaction_size_result__isset;

class Apply_transaction_size_result {
 public:

  Apply_transaction_size_result(const Apply_transaction_size_result&) noexcept;
  Apply_transaction_size_result& operator=(const Apply_transaction_size_result&) noexcept;
  Apply_transaction_size_result() noexcept
                                : success(0) {
  }

  virtual ~Apply_transaction_size_result() noexcept;
  int32_t success;

  _Apply_transaction_size_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_transaction_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_transaction_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_transaction_size_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_transaction_size_presult__isset {
  _Apply_transaction_size_presult__isset() : success(false) {}
  bool success :1;
} _Apply_transaction_size_presult__isset;

class Apply_transaction_size_presult {
 public:


  virtual ~Apply_transaction_size_presult() noexcept;
  int32_t* success;

  _Apply_transaction_size_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_tapos_block_num_args {
 public:

  Apply_tapos_block_num_args(const Apply_tapos_block_num_args&) noexcept;
  Apply_tapos_block_num_args& operator=(const Apply_tapos_block_num_args&) noexcept;
  Apply_tapos_block_num_args() noexcept {
  }

  virtual ~Apply_tapos_block_num_args() noexcept;

  bool operator == (const Apply_tapos_block_num_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_tapos_block_num_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_tapos_block_num_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_tapos_block_num_pargs {
 public:


  virtual ~Apply_tapos_block_num_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_tapos_block_num_result__isset {
  _Apply_tapos_block_num_result__isset() : success(false) {}
  bool success :1;
} _Apply_tapos_block_num_result__isset;

class Apply_tapos_block_num_result {
 public:

  Apply_tapos_block_num_result(const Apply_tapos_block_num_result&) noexcept;
  Apply_tapos_block_num_result& operator=(const Apply_tapos_block_num_result&) noexcept;
  Apply_tapos_block_num_result() noexcept
                               : success(0) {
  }

  virtual ~Apply_tapos_block_num_result() noexcept;
  int32_t success;

  _Apply_tapos_block_num_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_tapos_block_num_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_tapos_block_num_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_tapos_block_num_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_tapos_block_num_presult__isset {
  _Apply_tapos_block_num_presult__isset() : success(false) {}
  bool success :1;
} _Apply_tapos_block_num_presult__isset;

class Apply_tapos_block_num_presult {
 public:


  virtual ~Apply_tapos_block_num_presult() noexcept;
  int32_t* success;

  _Apply_tapos_block_num_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_tapos_block_prefix_args {
 public:

  Apply_tapos_block_prefix_args(const Apply_tapos_block_prefix_args&) noexcept;
  Apply_tapos_block_prefix_args& operator=(const Apply_tapos_block_prefix_args&) noexcept;
  Apply_tapos_block_prefix_args() noexcept {
  }

  virtual ~Apply_tapos_block_prefix_args() noexcept;

  bool operator == (const Apply_tapos_block_prefix_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_tapos_block_prefix_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_tapos_block_prefix_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_tapos_block_prefix_pargs {
 public:


  virtual ~Apply_tapos_block_prefix_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_tapos_block_prefix_result__isset {
  _Apply_tapos_block_prefix_result__isset() : success(false) {}
  bool success :1;
} _Apply_tapos_block_prefix_result__isset;

class Apply_tapos_block_prefix_result {
 public:

  Apply_tapos_block_prefix_result(const Apply_tapos_block_prefix_result&) noexcept;
  Apply_tapos_block_prefix_result& operator=(const Apply_tapos_block_prefix_result&) noexcept;
  Apply_tapos_block_prefix_result() noexcept
                                  : success(0) {
  }

  virtual ~Apply_tapos_block_prefix_result() noexcept;
  int32_t success;

  _Apply_tapos_block_prefix_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_tapos_block_prefix_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_tapos_block_prefix_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_tapos_block_prefix_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_tapos_block_prefix_presult__isset {
  _Apply_tapos_block_prefix_presult__isset() : success(false) {}
  bool success :1;
} _Apply_tapos_block_prefix_presult__isset;

class Apply_tapos_block_prefix_presult {
 public:


  virtual ~Apply_tapos_block_prefix_presult() noexcept;
  int32_t* success;

  _Apply_tapos_block_prefix_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Apply_expiration_args {
 public:

  Apply_expiration_args(const Apply_expiration_args&) noexcept;
  Apply_expiration_args& operator=(const Apply_expiration_args&) noexcept;
  Apply_expiration_args() noexcept {
  }

  virtual ~Apply_expiration_args() noexcept;

  bool operator == (const Apply_expiration_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_expiration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_expiration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_expiration_pargs {
 public:


  virtual ~Apply_expiration_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_expiration_result__isset {
  _Apply_expiration_result__isset() : success(false) {}
  bool success :1;
} _Apply_expiration_result__isset;

class Apply_expiration_result {
 public:

  Apply_expiration_result(const Apply_expiration_result&) noexcept;
  Apply_expiration_result& operator=(const Apply_expiration_result&) noexcept;
  Apply_expiration_result() noexcept
                          : success(0) {
  }

  virtual ~Apply_expiration_result() noexcept;
  int64_t success;

  _Apply_expiration_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Apply_expiration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_expiration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_expiration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_expiration_presult__isset {
  _Apply_expiration_presult__isset() : success(false) {}
  bool success :1;
} _Apply_expiration_presult__isset;

class Apply_expiration_presult {
 public:


  virtual ~Apply_expiration_presult() noexcept;
  int64_t* success;

  _Apply_expiration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_get_action_args__isset {
  _Apply_get_action_args__isset() : _type(false), index(false) {}
  bool _type :1;
  bool index :1;
} _Apply_get_action_args__isset;

class Apply_get_action_args {
 public:

  Apply_get_action_args(const Apply_get_action_args&) noexcept;
  Apply_get_action_args& operator=(const Apply_get_action_args&) noexcept;
  Apply_get_action_args() noexcept
                        : _type(0),
                          index(0) {
  }

  virtual ~Apply_get_action_args() noexcept;
  int32_t _type;
  int32_t index;

  _Apply_get_action_args__isset __isset;

  void __set__type(const int32_t val);

  void __set_index(const int32_t val);

  bool operator == (const Apply_get_action_args & rhs) const
  {
    if (!(_type == rhs._type))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Apply_get_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_action_pargs {
 public:


  virtual ~Apply_get_action_pargs() noexcept;
  const int32_t* _type;
  const int32_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_action_result__isset {
  _Apply_get_action_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_action_result__isset;

class Apply_get_action_result {
 public:

  Apply_get_action_result(const Apply_get_action_result&);
  Apply_get_action_result& operator=(const Apply_get_action_result&);
  Apply_get_action_result() noexcept
                          : success() {
  }

  virtual ~Apply_get_action_result() noexcept;
  std::string success;

  _Apply_get_action_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_get_action_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_action_presult__isset {
  _Apply_get_action_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_action_presult__isset;

class Apply_get_action_presult {
 public:


  virtual ~Apply_get_action_presult() noexcept;
  std::string* success;

  _Apply_get_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_get_context_free_data_args__isset {
  _Apply_get_context_free_data_args__isset() : index(false) {}
  bool index :1;
} _Apply_get_context_free_data_args__isset;

class Apply_get_context_free_data_args {
 public:

  Apply_get_context_free_data_args(const Apply_get_context_free_data_args&) noexcept;
  Apply_get_context_free_data_args& operator=(const Apply_get_context_free_data_args&) noexcept;
  Apply_get_context_free_data_args() noexcept
                                   : index(0) {
  }

  virtual ~Apply_get_context_free_data_args() noexcept;
  int32_t index;

  _Apply_get_context_free_data_args__isset __isset;

  void __set_index(const int32_t val);

  bool operator == (const Apply_get_context_free_data_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Apply_get_context_free_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_context_free_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_get_context_free_data_pargs {
 public:


  virtual ~Apply_get_context_free_data_pargs() noexcept;
  const int32_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_context_free_data_result__isset {
  _Apply_get_context_free_data_result__isset() : success(false) {}
  bool success :1;
} _Apply_get_context_free_data_result__isset;

class Apply_get_context_free_data_result {
 public:

  Apply_get_context_free_data_result(const Apply_get_context_free_data_result&);
  Apply_get_context_free_data_result& operator=(const Apply_get_context_free_data_result&);
  Apply_get_context_free_data_result() noexcept
                                     : success() {
  }

  virtual ~Apply_get_context_free_data_result() noexcept;
  std::string success;

  _Apply_get_context_free_data_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_get_context_free_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_get_context_free_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_get_context_free_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_get_context_free_data_presult__isset {
  _Apply_get_context_free_data_presult__isset() : success(false) {}
  bool success :1;
} _Apply_get_context_free_data_presult__isset;

class Apply_get_context_free_data_presult {
 public:


  virtual ~Apply_get_context_free_data_presult() noexcept;
  std::string* success;

  _Apply_get_context_free_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_store_i64_args__isset {
  _Apply_db_store_i64_args__isset() : scope(false), table(false), payer(false), id(false), data(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool data :1;
} _Apply_db_store_i64_args__isset;

class Apply_db_store_i64_args {
 public:

  Apply_db_store_i64_args(const Apply_db_store_i64_args&);
  Apply_db_store_i64_args& operator=(const Apply_db_store_i64_args&);
  Apply_db_store_i64_args() noexcept
                          : data() {
  }

  virtual ~Apply_db_store_i64_args() noexcept;
  Uint64 scope;
  Uint64 table;
  Uint64 payer;
  Uint64 id;
  std::string data;

  _Apply_db_store_i64_args__isset __isset;

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_payer(const Uint64& val);

  void __set_id(const Uint64& val);

  void __set_data(const std::string& val);

  bool operator == (const Apply_db_store_i64_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_db_store_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_store_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_store_i64_pargs {
 public:


  virtual ~Apply_db_store_i64_pargs() noexcept;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* payer;
  const Uint64* id;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_store_i64_result__isset {
  _Apply_db_store_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_store_i64_result__isset;

class Apply_db_store_i64_result {
 public:

  Apply_db_store_i64_result(const Apply_db_store_i64_result&) noexcept;
  Apply_db_store_i64_result& operator=(const Apply_db_store_i64_result&) noexcept;
  Apply_db_store_i64_result() noexcept
                            : success(0) {
  }

  virtual ~Apply_db_store_i64_result() noexcept;
  int32_t success;

  _Apply_db_store_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_store_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_store_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_store_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_store_i64_presult__isset {
  _Apply_db_store_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_store_i64_presult__isset;

class Apply_db_store_i64_presult {
 public:


  virtual ~Apply_db_store_i64_presult() noexcept;
  int32_t* success;

  _Apply_db_store_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_update_i64_args__isset {
  _Apply_db_update_i64_args__isset() : iterator(false), payer(false), data(false) {}
  bool iterator :1;
  bool payer :1;
  bool data :1;
} _Apply_db_update_i64_args__isset;

class Apply_db_update_i64_args {
 public:

  Apply_db_update_i64_args(const Apply_db_update_i64_args&);
  Apply_db_update_i64_args& operator=(const Apply_db_update_i64_args&);
  Apply_db_update_i64_args() noexcept
                           : iterator(0),
                             data() {
  }

  virtual ~Apply_db_update_i64_args() noexcept;
  int32_t iterator;
  Uint64 payer;
  std::string data;

  _Apply_db_update_i64_args__isset __isset;

  void __set_iterator(const int32_t val);

  void __set_payer(const Uint64& val);

  void __set_data(const std::string& val);

  bool operator == (const Apply_db_update_i64_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_db_update_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_update_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_update_i64_pargs {
 public:


  virtual ~Apply_db_update_i64_pargs() noexcept;
  const int32_t* iterator;
  const Uint64* payer;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_update_i64_result {
 public:

  Apply_db_update_i64_result(const Apply_db_update_i64_result&) noexcept;
  Apply_db_update_i64_result& operator=(const Apply_db_update_i64_result&) noexcept;
  Apply_db_update_i64_result() noexcept {
  }

  virtual ~Apply_db_update_i64_result() noexcept;

  bool operator == (const Apply_db_update_i64_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_update_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_update_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_update_i64_presult {
 public:


  virtual ~Apply_db_update_i64_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_remove_i64_args__isset {
  _Apply_db_remove_i64_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_remove_i64_args__isset;

class Apply_db_remove_i64_args {
 public:

  Apply_db_remove_i64_args(const Apply_db_remove_i64_args&) noexcept;
  Apply_db_remove_i64_args& operator=(const Apply_db_remove_i64_args&) noexcept;
  Apply_db_remove_i64_args() noexcept
                           : iterator(0) {
  }

  virtual ~Apply_db_remove_i64_args() noexcept;
  int32_t iterator;

  _Apply_db_remove_i64_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_remove_i64_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_remove_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_remove_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_remove_i64_pargs {
 public:


  virtual ~Apply_db_remove_i64_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_remove_i64_result {
 public:

  Apply_db_remove_i64_result(const Apply_db_remove_i64_result&) noexcept;
  Apply_db_remove_i64_result& operator=(const Apply_db_remove_i64_result&) noexcept;
  Apply_db_remove_i64_result() noexcept {
  }

  virtual ~Apply_db_remove_i64_result() noexcept;

  bool operator == (const Apply_db_remove_i64_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_remove_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_remove_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_remove_i64_presult {
 public:


  virtual ~Apply_db_remove_i64_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_get_i64_args__isset {
  _Apply_db_get_i64_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_get_i64_args__isset;

class Apply_db_get_i64_args {
 public:

  Apply_db_get_i64_args(const Apply_db_get_i64_args&) noexcept;
  Apply_db_get_i64_args& operator=(const Apply_db_get_i64_args&) noexcept;
  Apply_db_get_i64_args() noexcept
                        : iterator(0) {
  }

  virtual ~Apply_db_get_i64_args() noexcept;
  int32_t iterator;

  _Apply_db_get_i64_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_get_i64_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_get_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_get_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_get_i64_pargs {
 public:


  virtual ~Apply_db_get_i64_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_get_i64_result__isset {
  _Apply_db_get_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_get_i64_result__isset;

class Apply_db_get_i64_result {
 public:

  Apply_db_get_i64_result(const Apply_db_get_i64_result&);
  Apply_db_get_i64_result& operator=(const Apply_db_get_i64_result&);
  Apply_db_get_i64_result() noexcept
                          : success() {
  }

  virtual ~Apply_db_get_i64_result() noexcept;
  std::string success;

  _Apply_db_get_i64_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Apply_db_get_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_get_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_get_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_get_i64_presult__isset {
  _Apply_db_get_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_get_i64_presult__isset;

class Apply_db_get_i64_presult {
 public:


  virtual ~Apply_db_get_i64_presult() noexcept;
  std::string* success;

  _Apply_db_get_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_next_i64_args__isset {
  _Apply_db_next_i64_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_next_i64_args__isset;

class Apply_db_next_i64_args {
 public:

  Apply_db_next_i64_args(const Apply_db_next_i64_args&) noexcept;
  Apply_db_next_i64_args& operator=(const Apply_db_next_i64_args&) noexcept;
  Apply_db_next_i64_args() noexcept
                         : iterator(0) {
  }

  virtual ~Apply_db_next_i64_args() noexcept;
  int32_t iterator;

  _Apply_db_next_i64_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_next_i64_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_next_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_next_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_next_i64_pargs {
 public:


  virtual ~Apply_db_next_i64_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_next_i64_result__isset {
  _Apply_db_next_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_next_i64_result__isset;

class Apply_db_next_i64_result {
 public:

  Apply_db_next_i64_result(const Apply_db_next_i64_result&);
  Apply_db_next_i64_result& operator=(const Apply_db_next_i64_result&);
  Apply_db_next_i64_result() noexcept {
  }

  virtual ~Apply_db_next_i64_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_next_i64_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_next_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_next_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_next_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_next_i64_presult__isset {
  _Apply_db_next_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_next_i64_presult__isset;

class Apply_db_next_i64_presult {
 public:


  virtual ~Apply_db_next_i64_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_next_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_previous_i64_args__isset {
  _Apply_db_previous_i64_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_previous_i64_args__isset;

class Apply_db_previous_i64_args {
 public:

  Apply_db_previous_i64_args(const Apply_db_previous_i64_args&) noexcept;
  Apply_db_previous_i64_args& operator=(const Apply_db_previous_i64_args&) noexcept;
  Apply_db_previous_i64_args() noexcept
                             : iterator(0) {
  }

  virtual ~Apply_db_previous_i64_args() noexcept;
  int32_t iterator;

  _Apply_db_previous_i64_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_previous_i64_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_previous_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_previous_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_previous_i64_pargs {
 public:


  virtual ~Apply_db_previous_i64_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_previous_i64_result__isset {
  _Apply_db_previous_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_previous_i64_result__isset;

class Apply_db_previous_i64_result {
 public:

  Apply_db_previous_i64_result(const Apply_db_previous_i64_result&);
  Apply_db_previous_i64_result& operator=(const Apply_db_previous_i64_result&);
  Apply_db_previous_i64_result() noexcept {
  }

  virtual ~Apply_db_previous_i64_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_previous_i64_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_previous_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_previous_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_previous_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_previous_i64_presult__isset {
  _Apply_db_previous_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_previous_i64_presult__isset;

class Apply_db_previous_i64_presult {
 public:


  virtual ~Apply_db_previous_i64_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_previous_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_find_i64_args__isset {
  _Apply_db_find_i64_args__isset() : code(false), scope(false), table(false), id(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool id :1;
} _Apply_db_find_i64_args__isset;

class Apply_db_find_i64_args {
 public:

  Apply_db_find_i64_args(const Apply_db_find_i64_args&);
  Apply_db_find_i64_args& operator=(const Apply_db_find_i64_args&);
  Apply_db_find_i64_args() noexcept {
  }

  virtual ~Apply_db_find_i64_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 id;

  _Apply_db_find_i64_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_id(const Uint64& val);

  bool operator == (const Apply_db_find_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Apply_db_find_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_find_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_find_i64_pargs {
 public:


  virtual ~Apply_db_find_i64_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_find_i64_result__isset {
  _Apply_db_find_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_find_i64_result__isset;

class Apply_db_find_i64_result {
 public:

  Apply_db_find_i64_result(const Apply_db_find_i64_result&) noexcept;
  Apply_db_find_i64_result& operator=(const Apply_db_find_i64_result&) noexcept;
  Apply_db_find_i64_result() noexcept
                           : success(0) {
  }

  virtual ~Apply_db_find_i64_result() noexcept;
  int32_t success;

  _Apply_db_find_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_find_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_find_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_find_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_find_i64_presult__isset {
  _Apply_db_find_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_find_i64_presult__isset;

class Apply_db_find_i64_presult {
 public:


  virtual ~Apply_db_find_i64_presult() noexcept;
  int32_t* success;

  _Apply_db_find_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_lowerbound_i64_args__isset {
  _Apply_db_lowerbound_i64_args__isset() : code(false), scope(false), table(false), id(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool id :1;
} _Apply_db_lowerbound_i64_args__isset;

class Apply_db_lowerbound_i64_args {
 public:

  Apply_db_lowerbound_i64_args(const Apply_db_lowerbound_i64_args&);
  Apply_db_lowerbound_i64_args& operator=(const Apply_db_lowerbound_i64_args&);
  Apply_db_lowerbound_i64_args() noexcept {
  }

  virtual ~Apply_db_lowerbound_i64_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 id;

  _Apply_db_lowerbound_i64_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_id(const Uint64& val);

  bool operator == (const Apply_db_lowerbound_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Apply_db_lowerbound_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_lowerbound_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_lowerbound_i64_pargs {
 public:


  virtual ~Apply_db_lowerbound_i64_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_lowerbound_i64_result__isset {
  _Apply_db_lowerbound_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_lowerbound_i64_result__isset;

class Apply_db_lowerbound_i64_result {
 public:

  Apply_db_lowerbound_i64_result(const Apply_db_lowerbound_i64_result&) noexcept;
  Apply_db_lowerbound_i64_result& operator=(const Apply_db_lowerbound_i64_result&) noexcept;
  Apply_db_lowerbound_i64_result() noexcept
                                 : success(0) {
  }

  virtual ~Apply_db_lowerbound_i64_result() noexcept;
  int32_t success;

  _Apply_db_lowerbound_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_lowerbound_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_lowerbound_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_lowerbound_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_lowerbound_i64_presult__isset {
  _Apply_db_lowerbound_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_lowerbound_i64_presult__isset;

class Apply_db_lowerbound_i64_presult {
 public:


  virtual ~Apply_db_lowerbound_i64_presult() noexcept;
  int32_t* success;

  _Apply_db_lowerbound_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_upperbound_i64_args__isset {
  _Apply_db_upperbound_i64_args__isset() : code(false), scope(false), table(false), id(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool id :1;
} _Apply_db_upperbound_i64_args__isset;

class Apply_db_upperbound_i64_args {
 public:

  Apply_db_upperbound_i64_args(const Apply_db_upperbound_i64_args&);
  Apply_db_upperbound_i64_args& operator=(const Apply_db_upperbound_i64_args&);
  Apply_db_upperbound_i64_args() noexcept {
  }

  virtual ~Apply_db_upperbound_i64_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 id;

  _Apply_db_upperbound_i64_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_id(const Uint64& val);

  bool operator == (const Apply_db_upperbound_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Apply_db_upperbound_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_upperbound_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_upperbound_i64_pargs {
 public:


  virtual ~Apply_db_upperbound_i64_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_upperbound_i64_result__isset {
  _Apply_db_upperbound_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_upperbound_i64_result__isset;

class Apply_db_upperbound_i64_result {
 public:

  Apply_db_upperbound_i64_result(const Apply_db_upperbound_i64_result&) noexcept;
  Apply_db_upperbound_i64_result& operator=(const Apply_db_upperbound_i64_result&) noexcept;
  Apply_db_upperbound_i64_result() noexcept
                                 : success(0) {
  }

  virtual ~Apply_db_upperbound_i64_result() noexcept;
  int32_t success;

  _Apply_db_upperbound_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_upperbound_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_upperbound_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_upperbound_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_upperbound_i64_presult__isset {
  _Apply_db_upperbound_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_upperbound_i64_presult__isset;

class Apply_db_upperbound_i64_presult {
 public:


  virtual ~Apply_db_upperbound_i64_presult() noexcept;
  int32_t* success;

  _Apply_db_upperbound_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_end_i64_args__isset {
  _Apply_db_end_i64_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _Apply_db_end_i64_args__isset;

class Apply_db_end_i64_args {
 public:

  Apply_db_end_i64_args(const Apply_db_end_i64_args&);
  Apply_db_end_i64_args& operator=(const Apply_db_end_i64_args&);
  Apply_db_end_i64_args() noexcept {
  }

  virtual ~Apply_db_end_i64_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;

  _Apply_db_end_i64_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  bool operator == (const Apply_db_end_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const Apply_db_end_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_end_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_end_i64_pargs {
 public:


  virtual ~Apply_db_end_i64_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_end_i64_result__isset {
  _Apply_db_end_i64_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_end_i64_result__isset;

class Apply_db_end_i64_result {
 public:

  Apply_db_end_i64_result(const Apply_db_end_i64_result&) noexcept;
  Apply_db_end_i64_result& operator=(const Apply_db_end_i64_result&) noexcept;
  Apply_db_end_i64_result() noexcept
                          : success(0) {
  }

  virtual ~Apply_db_end_i64_result() noexcept;
  int32_t success;

  _Apply_db_end_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_end_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_end_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_end_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_end_i64_presult__isset {
  _Apply_db_end_i64_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_end_i64_presult__isset;

class Apply_db_end_i64_presult {
 public:


  virtual ~Apply_db_end_i64_presult() noexcept;
  int32_t* success;

  _Apply_db_end_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_store_args__isset {
  _Apply_db_idx64_store_args__isset() : scope(false), table(false), payer(false), id(false), secondary(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool secondary :1;
} _Apply_db_idx64_store_args__isset;

class Apply_db_idx64_store_args {
 public:

  Apply_db_idx64_store_args(const Apply_db_idx64_store_args&);
  Apply_db_idx64_store_args& operator=(const Apply_db_idx64_store_args&);
  Apply_db_idx64_store_args() noexcept {
  }

  virtual ~Apply_db_idx64_store_args() noexcept;
  Uint64 scope;
  Uint64 table;
  Uint64 payer;
  Uint64 id;
  Uint64 secondary;

  _Apply_db_idx64_store_args__isset __isset;

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_payer(const Uint64& val);

  void __set_id(const Uint64& val);

  void __set_secondary(const Uint64& val);

  bool operator == (const Apply_db_idx64_store_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_store_pargs {
 public:


  virtual ~Apply_db_idx64_store_pargs() noexcept;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* payer;
  const Uint64* id;
  const Uint64* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_store_result__isset {
  _Apply_db_idx64_store_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_store_result__isset;

class Apply_db_idx64_store_result {
 public:

  Apply_db_idx64_store_result(const Apply_db_idx64_store_result&) noexcept;
  Apply_db_idx64_store_result& operator=(const Apply_db_idx64_store_result&) noexcept;
  Apply_db_idx64_store_result() noexcept
                              : success(0) {
  }

  virtual ~Apply_db_idx64_store_result() noexcept;
  int32_t success;

  _Apply_db_idx64_store_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx64_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_store_presult__isset {
  _Apply_db_idx64_store_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_store_presult__isset;

class Apply_db_idx64_store_presult {
 public:


  virtual ~Apply_db_idx64_store_presult() noexcept;
  int32_t* success;

  _Apply_db_idx64_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_update_args__isset {
  _Apply_db_idx64_update_args__isset() : iterator(false), payer(false), secondary(false) {}
  bool iterator :1;
  bool payer :1;
  bool secondary :1;
} _Apply_db_idx64_update_args__isset;

class Apply_db_idx64_update_args {
 public:

  Apply_db_idx64_update_args(const Apply_db_idx64_update_args&);
  Apply_db_idx64_update_args& operator=(const Apply_db_idx64_update_args&);
  Apply_db_idx64_update_args() noexcept
                             : iterator(0) {
  }

  virtual ~Apply_db_idx64_update_args() noexcept;
  int32_t iterator;
  Uint64 payer;
  Uint64 secondary;

  _Apply_db_idx64_update_args__isset __isset;

  void __set_iterator(const int32_t val);

  void __set_payer(const Uint64& val);

  void __set_secondary(const Uint64& val);

  bool operator == (const Apply_db_idx64_update_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_update_pargs {
 public:


  virtual ~Apply_db_idx64_update_pargs() noexcept;
  const int32_t* iterator;
  const Uint64* payer;
  const Uint64* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_update_result {
 public:

  Apply_db_idx64_update_result(const Apply_db_idx64_update_result&) noexcept;
  Apply_db_idx64_update_result& operator=(const Apply_db_idx64_update_result&) noexcept;
  Apply_db_idx64_update_result() noexcept {
  }

  virtual ~Apply_db_idx64_update_result() noexcept;

  bool operator == (const Apply_db_idx64_update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx64_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_update_presult {
 public:


  virtual ~Apply_db_idx64_update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_remove_args__isset {
  _Apply_db_idx64_remove_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx64_remove_args__isset;

class Apply_db_idx64_remove_args {
 public:

  Apply_db_idx64_remove_args(const Apply_db_idx64_remove_args&) noexcept;
  Apply_db_idx64_remove_args& operator=(const Apply_db_idx64_remove_args&) noexcept;
  Apply_db_idx64_remove_args() noexcept
                             : iterator(0) {
  }

  virtual ~Apply_db_idx64_remove_args() noexcept;
  int32_t iterator;

  _Apply_db_idx64_remove_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx64_remove_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_remove_pargs {
 public:


  virtual ~Apply_db_idx64_remove_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_remove_result {
 public:

  Apply_db_idx64_remove_result(const Apply_db_idx64_remove_result&) noexcept;
  Apply_db_idx64_remove_result& operator=(const Apply_db_idx64_remove_result&) noexcept;
  Apply_db_idx64_remove_result() noexcept {
  }

  virtual ~Apply_db_idx64_remove_result() noexcept;

  bool operator == (const Apply_db_idx64_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx64_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_remove_presult {
 public:


  virtual ~Apply_db_idx64_remove_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_next_args__isset {
  _Apply_db_idx64_next_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx64_next_args__isset;

class Apply_db_idx64_next_args {
 public:

  Apply_db_idx64_next_args(const Apply_db_idx64_next_args&) noexcept;
  Apply_db_idx64_next_args& operator=(const Apply_db_idx64_next_args&) noexcept;
  Apply_db_idx64_next_args() noexcept
                           : iterator(0) {
  }

  virtual ~Apply_db_idx64_next_args() noexcept;
  int32_t iterator;

  _Apply_db_idx64_next_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx64_next_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_next_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_next_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_next_pargs {
 public:


  virtual ~Apply_db_idx64_next_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_next_result__isset {
  _Apply_db_idx64_next_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_next_result__isset;

class Apply_db_idx64_next_result {
 public:

  Apply_db_idx64_next_result(const Apply_db_idx64_next_result&);
  Apply_db_idx64_next_result& operator=(const Apply_db_idx64_next_result&);
  Apply_db_idx64_next_result() noexcept {
  }

  virtual ~Apply_db_idx64_next_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx64_next_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx64_next_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_next_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_next_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_next_presult__isset {
  _Apply_db_idx64_next_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_next_presult__isset;

class Apply_db_idx64_next_presult {
 public:


  virtual ~Apply_db_idx64_next_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx64_next_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_previous_args__isset {
  _Apply_db_idx64_previous_args__isset() : iteratory(false) {}
  bool iteratory :1;
} _Apply_db_idx64_previous_args__isset;

class Apply_db_idx64_previous_args {
 public:

  Apply_db_idx64_previous_args(const Apply_db_idx64_previous_args&) noexcept;
  Apply_db_idx64_previous_args& operator=(const Apply_db_idx64_previous_args&) noexcept;
  Apply_db_idx64_previous_args() noexcept
                               : iteratory(0) {
  }

  virtual ~Apply_db_idx64_previous_args() noexcept;
  int32_t iteratory;

  _Apply_db_idx64_previous_args__isset __isset;

  void __set_iteratory(const int32_t val);

  bool operator == (const Apply_db_idx64_previous_args & rhs) const
  {
    if (!(iteratory == rhs.iteratory))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_previous_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_previous_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_previous_pargs {
 public:


  virtual ~Apply_db_idx64_previous_pargs() noexcept;
  const int32_t* iteratory;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_previous_result__isset {
  _Apply_db_idx64_previous_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_previous_result__isset;

class Apply_db_idx64_previous_result {
 public:

  Apply_db_idx64_previous_result(const Apply_db_idx64_previous_result&);
  Apply_db_idx64_previous_result& operator=(const Apply_db_idx64_previous_result&);
  Apply_db_idx64_previous_result() noexcept {
  }

  virtual ~Apply_db_idx64_previous_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx64_previous_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx64_previous_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_previous_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_previous_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_previous_presult__isset {
  _Apply_db_idx64_previous_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_previous_presult__isset;

class Apply_db_idx64_previous_presult {
 public:


  virtual ~Apply_db_idx64_previous_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx64_previous_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_find_primary_args__isset {
  _Apply_db_idx64_find_primary_args__isset() : code(false), scope(false), table(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool primary :1;
} _Apply_db_idx64_find_primary_args__isset;

class Apply_db_idx64_find_primary_args {
 public:

  Apply_db_idx64_find_primary_args(const Apply_db_idx64_find_primary_args&);
  Apply_db_idx64_find_primary_args& operator=(const Apply_db_idx64_find_primary_args&);
  Apply_db_idx64_find_primary_args() noexcept {
  }

  virtual ~Apply_db_idx64_find_primary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 primary;

  _Apply_db_idx64_find_primary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx64_find_primary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_find_primary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_find_primary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_find_primary_pargs {
 public:


  virtual ~Apply_db_idx64_find_primary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_find_primary_result__isset {
  _Apply_db_idx64_find_primary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_find_primary_result__isset;

class Apply_db_idx64_find_primary_result {
 public:

  Apply_db_idx64_find_primary_result(const Apply_db_idx64_find_primary_result&);
  Apply_db_idx64_find_primary_result& operator=(const Apply_db_idx64_find_primary_result&);
  Apply_db_idx64_find_primary_result() noexcept {
  }

  virtual ~Apply_db_idx64_find_primary_result() noexcept;
  FindPrimaryReturn success;

  _Apply_db_idx64_find_primary_result__isset __isset;

  void __set_success(const FindPrimaryReturn& val);

  bool operator == (const Apply_db_idx64_find_primary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_find_primary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_find_primary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_find_primary_presult__isset {
  _Apply_db_idx64_find_primary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_find_primary_presult__isset;

class Apply_db_idx64_find_primary_presult {
 public:


  virtual ~Apply_db_idx64_find_primary_presult() noexcept;
  FindPrimaryReturn* success;

  _Apply_db_idx64_find_primary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_find_secondary_args__isset {
  _Apply_db_idx64_find_secondary_args__isset() : code(false), scope(false), table(false), secondary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
} _Apply_db_idx64_find_secondary_args__isset;

class Apply_db_idx64_find_secondary_args {
 public:

  Apply_db_idx64_find_secondary_args(const Apply_db_idx64_find_secondary_args&);
  Apply_db_idx64_find_secondary_args& operator=(const Apply_db_idx64_find_secondary_args&);
  Apply_db_idx64_find_secondary_args() noexcept {
  }

  virtual ~Apply_db_idx64_find_secondary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 secondary;

  _Apply_db_idx64_find_secondary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const Uint64& val);

  bool operator == (const Apply_db_idx64_find_secondary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_find_secondary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_find_secondary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_find_secondary_pargs {
 public:


  virtual ~Apply_db_idx64_find_secondary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_find_secondary_result__isset {
  _Apply_db_idx64_find_secondary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_find_secondary_result__isset;

class Apply_db_idx64_find_secondary_result {
 public:

  Apply_db_idx64_find_secondary_result(const Apply_db_idx64_find_secondary_result&);
  Apply_db_idx64_find_secondary_result& operator=(const Apply_db_idx64_find_secondary_result&);
  Apply_db_idx64_find_secondary_result() noexcept {
  }

  virtual ~Apply_db_idx64_find_secondary_result() noexcept;
  FindSecondaryReturn success;

  _Apply_db_idx64_find_secondary_result__isset __isset;

  void __set_success(const FindSecondaryReturn& val);

  bool operator == (const Apply_db_idx64_find_secondary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_find_secondary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_find_secondary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_find_secondary_presult__isset {
  _Apply_db_idx64_find_secondary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_find_secondary_presult__isset;

class Apply_db_idx64_find_secondary_presult {
 public:


  virtual ~Apply_db_idx64_find_secondary_presult() noexcept;
  FindSecondaryReturn* success;

  _Apply_db_idx64_find_secondary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_lowerbound_args__isset {
  _Apply_db_idx64_lowerbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx64_lowerbound_args__isset;

class Apply_db_idx64_lowerbound_args {
 public:

  Apply_db_idx64_lowerbound_args(const Apply_db_idx64_lowerbound_args&);
  Apply_db_idx64_lowerbound_args& operator=(const Apply_db_idx64_lowerbound_args&);
  Apply_db_idx64_lowerbound_args() noexcept {
  }

  virtual ~Apply_db_idx64_lowerbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 secondary;
  Uint64 primary;

  _Apply_db_idx64_lowerbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx64_lowerbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_lowerbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_lowerbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_lowerbound_pargs {
 public:


  virtual ~Apply_db_idx64_lowerbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_lowerbound_result__isset {
  _Apply_db_idx64_lowerbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_lowerbound_result__isset;

class Apply_db_idx64_lowerbound_result {
 public:

  Apply_db_idx64_lowerbound_result(const Apply_db_idx64_lowerbound_result&);
  Apply_db_idx64_lowerbound_result& operator=(const Apply_db_idx64_lowerbound_result&);
  Apply_db_idx64_lowerbound_result() noexcept {
  }

  virtual ~Apply_db_idx64_lowerbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx64_lowerbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx64_lowerbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_lowerbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_lowerbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_lowerbound_presult__isset {
  _Apply_db_idx64_lowerbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_lowerbound_presult__isset;

class Apply_db_idx64_lowerbound_presult {
 public:


  virtual ~Apply_db_idx64_lowerbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx64_lowerbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_upperbound_args__isset {
  _Apply_db_idx64_upperbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx64_upperbound_args__isset;

class Apply_db_idx64_upperbound_args {
 public:

  Apply_db_idx64_upperbound_args(const Apply_db_idx64_upperbound_args&);
  Apply_db_idx64_upperbound_args& operator=(const Apply_db_idx64_upperbound_args&);
  Apply_db_idx64_upperbound_args() noexcept {
  }

  virtual ~Apply_db_idx64_upperbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 secondary;
  Uint64 primary;

  _Apply_db_idx64_upperbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx64_upperbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_upperbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_upperbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_upperbound_pargs {
 public:


  virtual ~Apply_db_idx64_upperbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_upperbound_result__isset {
  _Apply_db_idx64_upperbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_upperbound_result__isset;

class Apply_db_idx64_upperbound_result {
 public:

  Apply_db_idx64_upperbound_result(const Apply_db_idx64_upperbound_result&);
  Apply_db_idx64_upperbound_result& operator=(const Apply_db_idx64_upperbound_result&);
  Apply_db_idx64_upperbound_result() noexcept {
  }

  virtual ~Apply_db_idx64_upperbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx64_upperbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx64_upperbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_upperbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_upperbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_upperbound_presult__isset {
  _Apply_db_idx64_upperbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_upperbound_presult__isset;

class Apply_db_idx64_upperbound_presult {
 public:


  virtual ~Apply_db_idx64_upperbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx64_upperbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx64_end_args__isset {
  _Apply_db_idx64_end_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _Apply_db_idx64_end_args__isset;

class Apply_db_idx64_end_args {
 public:

  Apply_db_idx64_end_args(const Apply_db_idx64_end_args&);
  Apply_db_idx64_end_args& operator=(const Apply_db_idx64_end_args&);
  Apply_db_idx64_end_args() noexcept {
  }

  virtual ~Apply_db_idx64_end_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;

  _Apply_db_idx64_end_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  bool operator == (const Apply_db_idx64_end_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_end_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_end_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx64_end_pargs {
 public:


  virtual ~Apply_db_idx64_end_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_end_result__isset {
  _Apply_db_idx64_end_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_end_result__isset;

class Apply_db_idx64_end_result {
 public:

  Apply_db_idx64_end_result(const Apply_db_idx64_end_result&) noexcept;
  Apply_db_idx64_end_result& operator=(const Apply_db_idx64_end_result&) noexcept;
  Apply_db_idx64_end_result() noexcept
                            : success(0) {
  }

  virtual ~Apply_db_idx64_end_result() noexcept;
  int32_t success;

  _Apply_db_idx64_end_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx64_end_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx64_end_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx64_end_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx64_end_presult__isset {
  _Apply_db_idx64_end_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx64_end_presult__isset;

class Apply_db_idx64_end_presult {
 public:


  virtual ~Apply_db_idx64_end_presult() noexcept;
  int32_t* success;

  _Apply_db_idx64_end_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_store_args__isset {
  _Apply_db_idx128_store_args__isset() : scope(false), table(false), payer(false), id(false), secondary(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool secondary :1;
} _Apply_db_idx128_store_args__isset;

class Apply_db_idx128_store_args {
 public:

  Apply_db_idx128_store_args(const Apply_db_idx128_store_args&);
  Apply_db_idx128_store_args& operator=(const Apply_db_idx128_store_args&);
  Apply_db_idx128_store_args() noexcept
                             : secondary() {
  }

  virtual ~Apply_db_idx128_store_args() noexcept;
  Uint64 scope;
  Uint64 table;
  Uint64 payer;
  Uint64 id;
  std::string secondary;

  _Apply_db_idx128_store_args__isset __isset;

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_payer(const Uint64& val);

  void __set_id(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx128_store_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_store_pargs {
 public:


  virtual ~Apply_db_idx128_store_pargs() noexcept;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* payer;
  const Uint64* id;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_store_result__isset {
  _Apply_db_idx128_store_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_store_result__isset;

class Apply_db_idx128_store_result {
 public:

  Apply_db_idx128_store_result(const Apply_db_idx128_store_result&) noexcept;
  Apply_db_idx128_store_result& operator=(const Apply_db_idx128_store_result&) noexcept;
  Apply_db_idx128_store_result() noexcept
                               : success(0) {
  }

  virtual ~Apply_db_idx128_store_result() noexcept;
  int32_t success;

  _Apply_db_idx128_store_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx128_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_store_presult__isset {
  _Apply_db_idx128_store_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_store_presult__isset;

class Apply_db_idx128_store_presult {
 public:


  virtual ~Apply_db_idx128_store_presult() noexcept;
  int32_t* success;

  _Apply_db_idx128_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_update_args__isset {
  _Apply_db_idx128_update_args__isset() : iterator(false), payer(false), secondary(false) {}
  bool iterator :1;
  bool payer :1;
  bool secondary :1;
} _Apply_db_idx128_update_args__isset;

class Apply_db_idx128_update_args {
 public:

  Apply_db_idx128_update_args(const Apply_db_idx128_update_args&);
  Apply_db_idx128_update_args& operator=(const Apply_db_idx128_update_args&);
  Apply_db_idx128_update_args() noexcept
                              : iterator(0),
                                secondary() {
  }

  virtual ~Apply_db_idx128_update_args() noexcept;
  int32_t iterator;
  Uint64 payer;
  std::string secondary;

  _Apply_db_idx128_update_args__isset __isset;

  void __set_iterator(const int32_t val);

  void __set_payer(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx128_update_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_update_pargs {
 public:


  virtual ~Apply_db_idx128_update_pargs() noexcept;
  const int32_t* iterator;
  const Uint64* payer;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_update_result {
 public:

  Apply_db_idx128_update_result(const Apply_db_idx128_update_result&) noexcept;
  Apply_db_idx128_update_result& operator=(const Apply_db_idx128_update_result&) noexcept;
  Apply_db_idx128_update_result() noexcept {
  }

  virtual ~Apply_db_idx128_update_result() noexcept;

  bool operator == (const Apply_db_idx128_update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx128_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_update_presult {
 public:


  virtual ~Apply_db_idx128_update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_remove_args__isset {
  _Apply_db_idx128_remove_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx128_remove_args__isset;

class Apply_db_idx128_remove_args {
 public:

  Apply_db_idx128_remove_args(const Apply_db_idx128_remove_args&) noexcept;
  Apply_db_idx128_remove_args& operator=(const Apply_db_idx128_remove_args&) noexcept;
  Apply_db_idx128_remove_args() noexcept
                              : iterator(0) {
  }

  virtual ~Apply_db_idx128_remove_args() noexcept;
  int32_t iterator;

  _Apply_db_idx128_remove_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx128_remove_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_remove_pargs {
 public:


  virtual ~Apply_db_idx128_remove_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_remove_result {
 public:

  Apply_db_idx128_remove_result(const Apply_db_idx128_remove_result&) noexcept;
  Apply_db_idx128_remove_result& operator=(const Apply_db_idx128_remove_result&) noexcept;
  Apply_db_idx128_remove_result() noexcept {
  }

  virtual ~Apply_db_idx128_remove_result() noexcept;

  bool operator == (const Apply_db_idx128_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx128_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_remove_presult {
 public:


  virtual ~Apply_db_idx128_remove_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_next_args__isset {
  _Apply_db_idx128_next_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx128_next_args__isset;

class Apply_db_idx128_next_args {
 public:

  Apply_db_idx128_next_args(const Apply_db_idx128_next_args&) noexcept;
  Apply_db_idx128_next_args& operator=(const Apply_db_idx128_next_args&) noexcept;
  Apply_db_idx128_next_args() noexcept
                            : iterator(0) {
  }

  virtual ~Apply_db_idx128_next_args() noexcept;
  int32_t iterator;

  _Apply_db_idx128_next_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx128_next_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_next_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_next_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_next_pargs {
 public:


  virtual ~Apply_db_idx128_next_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_next_result__isset {
  _Apply_db_idx128_next_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_next_result__isset;

class Apply_db_idx128_next_result {
 public:

  Apply_db_idx128_next_result(const Apply_db_idx128_next_result&);
  Apply_db_idx128_next_result& operator=(const Apply_db_idx128_next_result&);
  Apply_db_idx128_next_result() noexcept {
  }

  virtual ~Apply_db_idx128_next_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx128_next_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx128_next_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_next_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_next_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_next_presult__isset {
  _Apply_db_idx128_next_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_next_presult__isset;

class Apply_db_idx128_next_presult {
 public:


  virtual ~Apply_db_idx128_next_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx128_next_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_previous_args__isset {
  _Apply_db_idx128_previous_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx128_previous_args__isset;

class Apply_db_idx128_previous_args {
 public:

  Apply_db_idx128_previous_args(const Apply_db_idx128_previous_args&) noexcept;
  Apply_db_idx128_previous_args& operator=(const Apply_db_idx128_previous_args&) noexcept;
  Apply_db_idx128_previous_args() noexcept
                                : iterator(0) {
  }

  virtual ~Apply_db_idx128_previous_args() noexcept;
  int32_t iterator;

  _Apply_db_idx128_previous_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx128_previous_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_previous_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_previous_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_previous_pargs {
 public:


  virtual ~Apply_db_idx128_previous_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_previous_result__isset {
  _Apply_db_idx128_previous_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_previous_result__isset;

class Apply_db_idx128_previous_result {
 public:

  Apply_db_idx128_previous_result(const Apply_db_idx128_previous_result&);
  Apply_db_idx128_previous_result& operator=(const Apply_db_idx128_previous_result&);
  Apply_db_idx128_previous_result() noexcept {
  }

  virtual ~Apply_db_idx128_previous_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx128_previous_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx128_previous_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_previous_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_previous_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_previous_presult__isset {
  _Apply_db_idx128_previous_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_previous_presult__isset;

class Apply_db_idx128_previous_presult {
 public:


  virtual ~Apply_db_idx128_previous_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx128_previous_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_find_primary_args__isset {
  _Apply_db_idx128_find_primary_args__isset() : code(false), scope(false), table(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool primary :1;
} _Apply_db_idx128_find_primary_args__isset;

class Apply_db_idx128_find_primary_args {
 public:

  Apply_db_idx128_find_primary_args(const Apply_db_idx128_find_primary_args&);
  Apply_db_idx128_find_primary_args& operator=(const Apply_db_idx128_find_primary_args&);
  Apply_db_idx128_find_primary_args() noexcept {
  }

  virtual ~Apply_db_idx128_find_primary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 primary;

  _Apply_db_idx128_find_primary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx128_find_primary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_find_primary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_find_primary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_find_primary_pargs {
 public:


  virtual ~Apply_db_idx128_find_primary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_find_primary_result__isset {
  _Apply_db_idx128_find_primary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_find_primary_result__isset;

class Apply_db_idx128_find_primary_result {
 public:

  Apply_db_idx128_find_primary_result(const Apply_db_idx128_find_primary_result&);
  Apply_db_idx128_find_primary_result& operator=(const Apply_db_idx128_find_primary_result&);
  Apply_db_idx128_find_primary_result() noexcept {
  }

  virtual ~Apply_db_idx128_find_primary_result() noexcept;
  FindPrimaryReturn success;

  _Apply_db_idx128_find_primary_result__isset __isset;

  void __set_success(const FindPrimaryReturn& val);

  bool operator == (const Apply_db_idx128_find_primary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_find_primary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_find_primary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_find_primary_presult__isset {
  _Apply_db_idx128_find_primary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_find_primary_presult__isset;

class Apply_db_idx128_find_primary_presult {
 public:


  virtual ~Apply_db_idx128_find_primary_presult() noexcept;
  FindPrimaryReturn* success;

  _Apply_db_idx128_find_primary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_find_secondary_args__isset {
  _Apply_db_idx128_find_secondary_args__isset() : code(false), scope(false), table(false), secondary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
} _Apply_db_idx128_find_secondary_args__isset;

class Apply_db_idx128_find_secondary_args {
 public:

  Apply_db_idx128_find_secondary_args(const Apply_db_idx128_find_secondary_args&);
  Apply_db_idx128_find_secondary_args& operator=(const Apply_db_idx128_find_secondary_args&);
  Apply_db_idx128_find_secondary_args() noexcept
                                      : secondary() {
  }

  virtual ~Apply_db_idx128_find_secondary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;

  _Apply_db_idx128_find_secondary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx128_find_secondary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_find_secondary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_find_secondary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_find_secondary_pargs {
 public:


  virtual ~Apply_db_idx128_find_secondary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_find_secondary_result__isset {
  _Apply_db_idx128_find_secondary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_find_secondary_result__isset;

class Apply_db_idx128_find_secondary_result {
 public:

  Apply_db_idx128_find_secondary_result(const Apply_db_idx128_find_secondary_result&);
  Apply_db_idx128_find_secondary_result& operator=(const Apply_db_idx128_find_secondary_result&);
  Apply_db_idx128_find_secondary_result() noexcept {
  }

  virtual ~Apply_db_idx128_find_secondary_result() noexcept;
  FindSecondaryReturn success;

  _Apply_db_idx128_find_secondary_result__isset __isset;

  void __set_success(const FindSecondaryReturn& val);

  bool operator == (const Apply_db_idx128_find_secondary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_find_secondary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_find_secondary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_find_secondary_presult__isset {
  _Apply_db_idx128_find_secondary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_find_secondary_presult__isset;

class Apply_db_idx128_find_secondary_presult {
 public:


  virtual ~Apply_db_idx128_find_secondary_presult() noexcept;
  FindSecondaryReturn* success;

  _Apply_db_idx128_find_secondary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_lowerbound_args__isset {
  _Apply_db_idx128_lowerbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx128_lowerbound_args__isset;

class Apply_db_idx128_lowerbound_args {
 public:

  Apply_db_idx128_lowerbound_args(const Apply_db_idx128_lowerbound_args&);
  Apply_db_idx128_lowerbound_args& operator=(const Apply_db_idx128_lowerbound_args&);
  Apply_db_idx128_lowerbound_args() noexcept
                                  : secondary() {
  }

  virtual ~Apply_db_idx128_lowerbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;
  Uint64 primary;

  _Apply_db_idx128_lowerbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx128_lowerbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_lowerbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_lowerbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_lowerbound_pargs {
 public:


  virtual ~Apply_db_idx128_lowerbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_lowerbound_result__isset {
  _Apply_db_idx128_lowerbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_lowerbound_result__isset;

class Apply_db_idx128_lowerbound_result {
 public:

  Apply_db_idx128_lowerbound_result(const Apply_db_idx128_lowerbound_result&);
  Apply_db_idx128_lowerbound_result& operator=(const Apply_db_idx128_lowerbound_result&);
  Apply_db_idx128_lowerbound_result() noexcept {
  }

  virtual ~Apply_db_idx128_lowerbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx128_lowerbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx128_lowerbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_lowerbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_lowerbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_lowerbound_presult__isset {
  _Apply_db_idx128_lowerbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_lowerbound_presult__isset;

class Apply_db_idx128_lowerbound_presult {
 public:


  virtual ~Apply_db_idx128_lowerbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx128_lowerbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_upperbound_args__isset {
  _Apply_db_idx128_upperbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx128_upperbound_args__isset;

class Apply_db_idx128_upperbound_args {
 public:

  Apply_db_idx128_upperbound_args(const Apply_db_idx128_upperbound_args&);
  Apply_db_idx128_upperbound_args& operator=(const Apply_db_idx128_upperbound_args&);
  Apply_db_idx128_upperbound_args() noexcept
                                  : secondary() {
  }

  virtual ~Apply_db_idx128_upperbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;
  Uint64 primary;

  _Apply_db_idx128_upperbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx128_upperbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_upperbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_upperbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_upperbound_pargs {
 public:


  virtual ~Apply_db_idx128_upperbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_upperbound_result__isset {
  _Apply_db_idx128_upperbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_upperbound_result__isset;

class Apply_db_idx128_upperbound_result {
 public:

  Apply_db_idx128_upperbound_result(const Apply_db_idx128_upperbound_result&);
  Apply_db_idx128_upperbound_result& operator=(const Apply_db_idx128_upperbound_result&);
  Apply_db_idx128_upperbound_result() noexcept {
  }

  virtual ~Apply_db_idx128_upperbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx128_upperbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx128_upperbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_upperbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_upperbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_upperbound_presult__isset {
  _Apply_db_idx128_upperbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_upperbound_presult__isset;

class Apply_db_idx128_upperbound_presult {
 public:


  virtual ~Apply_db_idx128_upperbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx128_upperbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx128_end_args__isset {
  _Apply_db_idx128_end_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _Apply_db_idx128_end_args__isset;

class Apply_db_idx128_end_args {
 public:

  Apply_db_idx128_end_args(const Apply_db_idx128_end_args&);
  Apply_db_idx128_end_args& operator=(const Apply_db_idx128_end_args&);
  Apply_db_idx128_end_args() noexcept {
  }

  virtual ~Apply_db_idx128_end_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;

  _Apply_db_idx128_end_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  bool operator == (const Apply_db_idx128_end_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_end_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_end_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx128_end_pargs {
 public:


  virtual ~Apply_db_idx128_end_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_end_result__isset {
  _Apply_db_idx128_end_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_end_result__isset;

class Apply_db_idx128_end_result {
 public:

  Apply_db_idx128_end_result(const Apply_db_idx128_end_result&) noexcept;
  Apply_db_idx128_end_result& operator=(const Apply_db_idx128_end_result&) noexcept;
  Apply_db_idx128_end_result() noexcept
                             : success(0) {
  }

  virtual ~Apply_db_idx128_end_result() noexcept;
  int32_t success;

  _Apply_db_idx128_end_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx128_end_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx128_end_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx128_end_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx128_end_presult__isset {
  _Apply_db_idx128_end_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx128_end_presult__isset;

class Apply_db_idx128_end_presult {
 public:


  virtual ~Apply_db_idx128_end_presult() noexcept;
  int32_t* success;

  _Apply_db_idx128_end_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_store_args__isset {
  _Apply_db_idx256_store_args__isset() : scope(false), table(false), payer(false), id(false), data(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool data :1;
} _Apply_db_idx256_store_args__isset;

class Apply_db_idx256_store_args {
 public:

  Apply_db_idx256_store_args(const Apply_db_idx256_store_args&);
  Apply_db_idx256_store_args& operator=(const Apply_db_idx256_store_args&);
  Apply_db_idx256_store_args() noexcept
                             : data() {
  }

  virtual ~Apply_db_idx256_store_args() noexcept;
  Uint64 scope;
  Uint64 table;
  Uint64 payer;
  Uint64 id;
  std::string data;

  _Apply_db_idx256_store_args__isset __isset;

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_payer(const Uint64& val);

  void __set_id(const Uint64& val);

  void __set_data(const std::string& val);

  bool operator == (const Apply_db_idx256_store_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_store_pargs {
 public:


  virtual ~Apply_db_idx256_store_pargs() noexcept;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* payer;
  const Uint64* id;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_store_result__isset {
  _Apply_db_idx256_store_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_store_result__isset;

class Apply_db_idx256_store_result {
 public:

  Apply_db_idx256_store_result(const Apply_db_idx256_store_result&) noexcept;
  Apply_db_idx256_store_result& operator=(const Apply_db_idx256_store_result&) noexcept;
  Apply_db_idx256_store_result() noexcept
                               : success(0) {
  }

  virtual ~Apply_db_idx256_store_result() noexcept;
  int32_t success;

  _Apply_db_idx256_store_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx256_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_store_presult__isset {
  _Apply_db_idx256_store_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_store_presult__isset;

class Apply_db_idx256_store_presult {
 public:


  virtual ~Apply_db_idx256_store_presult() noexcept;
  int32_t* success;

  _Apply_db_idx256_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_update_args__isset {
  _Apply_db_idx256_update_args__isset() : iterator(false), payer(false), data(false) {}
  bool iterator :1;
  bool payer :1;
  bool data :1;
} _Apply_db_idx256_update_args__isset;

class Apply_db_idx256_update_args {
 public:

  Apply_db_idx256_update_args(const Apply_db_idx256_update_args&);
  Apply_db_idx256_update_args& operator=(const Apply_db_idx256_update_args&);
  Apply_db_idx256_update_args() noexcept
                              : iterator(0),
                                data() {
  }

  virtual ~Apply_db_idx256_update_args() noexcept;
  int32_t iterator;
  Uint64 payer;
  std::string data;

  _Apply_db_idx256_update_args__isset __isset;

  void __set_iterator(const int32_t val);

  void __set_payer(const Uint64& val);

  void __set_data(const std::string& val);

  bool operator == (const Apply_db_idx256_update_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_update_pargs {
 public:


  virtual ~Apply_db_idx256_update_pargs() noexcept;
  const int32_t* iterator;
  const Uint64* payer;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_update_result {
 public:

  Apply_db_idx256_update_result(const Apply_db_idx256_update_result&) noexcept;
  Apply_db_idx256_update_result& operator=(const Apply_db_idx256_update_result&) noexcept;
  Apply_db_idx256_update_result() noexcept {
  }

  virtual ~Apply_db_idx256_update_result() noexcept;

  bool operator == (const Apply_db_idx256_update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx256_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_update_presult {
 public:


  virtual ~Apply_db_idx256_update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_remove_args__isset {
  _Apply_db_idx256_remove_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx256_remove_args__isset;

class Apply_db_idx256_remove_args {
 public:

  Apply_db_idx256_remove_args(const Apply_db_idx256_remove_args&) noexcept;
  Apply_db_idx256_remove_args& operator=(const Apply_db_idx256_remove_args&) noexcept;
  Apply_db_idx256_remove_args() noexcept
                              : iterator(0) {
  }

  virtual ~Apply_db_idx256_remove_args() noexcept;
  int32_t iterator;

  _Apply_db_idx256_remove_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx256_remove_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_remove_pargs {
 public:


  virtual ~Apply_db_idx256_remove_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_remove_result {
 public:

  Apply_db_idx256_remove_result(const Apply_db_idx256_remove_result&) noexcept;
  Apply_db_idx256_remove_result& operator=(const Apply_db_idx256_remove_result&) noexcept;
  Apply_db_idx256_remove_result() noexcept {
  }

  virtual ~Apply_db_idx256_remove_result() noexcept;

  bool operator == (const Apply_db_idx256_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx256_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_remove_presult {
 public:


  virtual ~Apply_db_idx256_remove_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_next_args__isset {
  _Apply_db_idx256_next_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx256_next_args__isset;

class Apply_db_idx256_next_args {
 public:

  Apply_db_idx256_next_args(const Apply_db_idx256_next_args&) noexcept;
  Apply_db_idx256_next_args& operator=(const Apply_db_idx256_next_args&) noexcept;
  Apply_db_idx256_next_args() noexcept
                            : iterator(0) {
  }

  virtual ~Apply_db_idx256_next_args() noexcept;
  int32_t iterator;

  _Apply_db_idx256_next_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx256_next_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_next_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_next_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_next_pargs {
 public:


  virtual ~Apply_db_idx256_next_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_next_result__isset {
  _Apply_db_idx256_next_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_next_result__isset;

class Apply_db_idx256_next_result {
 public:

  Apply_db_idx256_next_result(const Apply_db_idx256_next_result&);
  Apply_db_idx256_next_result& operator=(const Apply_db_idx256_next_result&);
  Apply_db_idx256_next_result() noexcept {
  }

  virtual ~Apply_db_idx256_next_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx256_next_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx256_next_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_next_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_next_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_next_presult__isset {
  _Apply_db_idx256_next_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_next_presult__isset;

class Apply_db_idx256_next_presult {
 public:


  virtual ~Apply_db_idx256_next_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx256_next_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_previous_args__isset {
  _Apply_db_idx256_previous_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx256_previous_args__isset;

class Apply_db_idx256_previous_args {
 public:

  Apply_db_idx256_previous_args(const Apply_db_idx256_previous_args&) noexcept;
  Apply_db_idx256_previous_args& operator=(const Apply_db_idx256_previous_args&) noexcept;
  Apply_db_idx256_previous_args() noexcept
                                : iterator(0) {
  }

  virtual ~Apply_db_idx256_previous_args() noexcept;
  int32_t iterator;

  _Apply_db_idx256_previous_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx256_previous_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_previous_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_previous_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_previous_pargs {
 public:


  virtual ~Apply_db_idx256_previous_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_previous_result__isset {
  _Apply_db_idx256_previous_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_previous_result__isset;

class Apply_db_idx256_previous_result {
 public:

  Apply_db_idx256_previous_result(const Apply_db_idx256_previous_result&);
  Apply_db_idx256_previous_result& operator=(const Apply_db_idx256_previous_result&);
  Apply_db_idx256_previous_result() noexcept {
  }

  virtual ~Apply_db_idx256_previous_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx256_previous_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx256_previous_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_previous_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_previous_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_previous_presult__isset {
  _Apply_db_idx256_previous_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_previous_presult__isset;

class Apply_db_idx256_previous_presult {
 public:


  virtual ~Apply_db_idx256_previous_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx256_previous_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_find_primary_args__isset {
  _Apply_db_idx256_find_primary_args__isset() : code(false), scope(false), table(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool primary :1;
} _Apply_db_idx256_find_primary_args__isset;

class Apply_db_idx256_find_primary_args {
 public:

  Apply_db_idx256_find_primary_args(const Apply_db_idx256_find_primary_args&);
  Apply_db_idx256_find_primary_args& operator=(const Apply_db_idx256_find_primary_args&);
  Apply_db_idx256_find_primary_args() noexcept {
  }

  virtual ~Apply_db_idx256_find_primary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 primary;

  _Apply_db_idx256_find_primary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx256_find_primary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_find_primary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_find_primary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_find_primary_pargs {
 public:


  virtual ~Apply_db_idx256_find_primary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_find_primary_result__isset {
  _Apply_db_idx256_find_primary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_find_primary_result__isset;

class Apply_db_idx256_find_primary_result {
 public:

  Apply_db_idx256_find_primary_result(const Apply_db_idx256_find_primary_result&);
  Apply_db_idx256_find_primary_result& operator=(const Apply_db_idx256_find_primary_result&);
  Apply_db_idx256_find_primary_result() noexcept {
  }

  virtual ~Apply_db_idx256_find_primary_result() noexcept;
  FindPrimaryReturn success;

  _Apply_db_idx256_find_primary_result__isset __isset;

  void __set_success(const FindPrimaryReturn& val);

  bool operator == (const Apply_db_idx256_find_primary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_find_primary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_find_primary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_find_primary_presult__isset {
  _Apply_db_idx256_find_primary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_find_primary_presult__isset;

class Apply_db_idx256_find_primary_presult {
 public:


  virtual ~Apply_db_idx256_find_primary_presult() noexcept;
  FindPrimaryReturn* success;

  _Apply_db_idx256_find_primary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_find_secondary_args__isset {
  _Apply_db_idx256_find_secondary_args__isset() : code(false), scope(false), table(false), data(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool data :1;
} _Apply_db_idx256_find_secondary_args__isset;

class Apply_db_idx256_find_secondary_args {
 public:

  Apply_db_idx256_find_secondary_args(const Apply_db_idx256_find_secondary_args&);
  Apply_db_idx256_find_secondary_args& operator=(const Apply_db_idx256_find_secondary_args&);
  Apply_db_idx256_find_secondary_args() noexcept
                                      : data() {
  }

  virtual ~Apply_db_idx256_find_secondary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string data;

  _Apply_db_idx256_find_secondary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_data(const std::string& val);

  bool operator == (const Apply_db_idx256_find_secondary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_find_secondary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_find_secondary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_find_secondary_pargs {
 public:


  virtual ~Apply_db_idx256_find_secondary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_find_secondary_result__isset {
  _Apply_db_idx256_find_secondary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_find_secondary_result__isset;

class Apply_db_idx256_find_secondary_result {
 public:

  Apply_db_idx256_find_secondary_result(const Apply_db_idx256_find_secondary_result&);
  Apply_db_idx256_find_secondary_result& operator=(const Apply_db_idx256_find_secondary_result&);
  Apply_db_idx256_find_secondary_result() noexcept {
  }

  virtual ~Apply_db_idx256_find_secondary_result() noexcept;
  FindSecondaryReturn success;

  _Apply_db_idx256_find_secondary_result__isset __isset;

  void __set_success(const FindSecondaryReturn& val);

  bool operator == (const Apply_db_idx256_find_secondary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_find_secondary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_find_secondary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_find_secondary_presult__isset {
  _Apply_db_idx256_find_secondary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_find_secondary_presult__isset;

class Apply_db_idx256_find_secondary_presult {
 public:


  virtual ~Apply_db_idx256_find_secondary_presult() noexcept;
  FindSecondaryReturn* success;

  _Apply_db_idx256_find_secondary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_lowerbound_args__isset {
  _Apply_db_idx256_lowerbound_args__isset() : code(false), scope(false), table(false), data(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool data :1;
  bool primary :1;
} _Apply_db_idx256_lowerbound_args__isset;

class Apply_db_idx256_lowerbound_args {
 public:

  Apply_db_idx256_lowerbound_args(const Apply_db_idx256_lowerbound_args&);
  Apply_db_idx256_lowerbound_args& operator=(const Apply_db_idx256_lowerbound_args&);
  Apply_db_idx256_lowerbound_args() noexcept
                                  : data() {
  }

  virtual ~Apply_db_idx256_lowerbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string data;
  Uint64 primary;

  _Apply_db_idx256_lowerbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_data(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx256_lowerbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_lowerbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_lowerbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_lowerbound_pargs {
 public:


  virtual ~Apply_db_idx256_lowerbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* data;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_lowerbound_result__isset {
  _Apply_db_idx256_lowerbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_lowerbound_result__isset;

class Apply_db_idx256_lowerbound_result {
 public:

  Apply_db_idx256_lowerbound_result(const Apply_db_idx256_lowerbound_result&);
  Apply_db_idx256_lowerbound_result& operator=(const Apply_db_idx256_lowerbound_result&);
  Apply_db_idx256_lowerbound_result() noexcept {
  }

  virtual ~Apply_db_idx256_lowerbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx256_lowerbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx256_lowerbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_lowerbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_lowerbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_lowerbound_presult__isset {
  _Apply_db_idx256_lowerbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_lowerbound_presult__isset;

class Apply_db_idx256_lowerbound_presult {
 public:


  virtual ~Apply_db_idx256_lowerbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx256_lowerbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_upperbound_args__isset {
  _Apply_db_idx256_upperbound_args__isset() : code(false), scope(false), table(false), data(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool data :1;
  bool primary :1;
} _Apply_db_idx256_upperbound_args__isset;

class Apply_db_idx256_upperbound_args {
 public:

  Apply_db_idx256_upperbound_args(const Apply_db_idx256_upperbound_args&);
  Apply_db_idx256_upperbound_args& operator=(const Apply_db_idx256_upperbound_args&);
  Apply_db_idx256_upperbound_args() noexcept
                                  : data() {
  }

  virtual ~Apply_db_idx256_upperbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string data;
  Uint64 primary;

  _Apply_db_idx256_upperbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_data(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx256_upperbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_upperbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_upperbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_upperbound_pargs {
 public:


  virtual ~Apply_db_idx256_upperbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* data;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_upperbound_result__isset {
  _Apply_db_idx256_upperbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_upperbound_result__isset;

class Apply_db_idx256_upperbound_result {
 public:

  Apply_db_idx256_upperbound_result(const Apply_db_idx256_upperbound_result&);
  Apply_db_idx256_upperbound_result& operator=(const Apply_db_idx256_upperbound_result&);
  Apply_db_idx256_upperbound_result() noexcept {
  }

  virtual ~Apply_db_idx256_upperbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx256_upperbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx256_upperbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_upperbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_upperbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_upperbound_presult__isset {
  _Apply_db_idx256_upperbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_upperbound_presult__isset;

class Apply_db_idx256_upperbound_presult {
 public:


  virtual ~Apply_db_idx256_upperbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx256_upperbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx256_end_args__isset {
  _Apply_db_idx256_end_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _Apply_db_idx256_end_args__isset;

class Apply_db_idx256_end_args {
 public:

  Apply_db_idx256_end_args(const Apply_db_idx256_end_args&);
  Apply_db_idx256_end_args& operator=(const Apply_db_idx256_end_args&);
  Apply_db_idx256_end_args() noexcept {
  }

  virtual ~Apply_db_idx256_end_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;

  _Apply_db_idx256_end_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  bool operator == (const Apply_db_idx256_end_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_end_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_end_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx256_end_pargs {
 public:


  virtual ~Apply_db_idx256_end_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_end_result__isset {
  _Apply_db_idx256_end_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_end_result__isset;

class Apply_db_idx256_end_result {
 public:

  Apply_db_idx256_end_result(const Apply_db_idx256_end_result&) noexcept;
  Apply_db_idx256_end_result& operator=(const Apply_db_idx256_end_result&) noexcept;
  Apply_db_idx256_end_result() noexcept
                             : success(0) {
  }

  virtual ~Apply_db_idx256_end_result() noexcept;
  int32_t success;

  _Apply_db_idx256_end_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx256_end_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx256_end_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx256_end_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx256_end_presult__isset {
  _Apply_db_idx256_end_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx256_end_presult__isset;

class Apply_db_idx256_end_presult {
 public:


  virtual ~Apply_db_idx256_end_presult() noexcept;
  int32_t* success;

  _Apply_db_idx256_end_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_store_args__isset {
  _Apply_db_idx_double_store_args__isset() : scope(false), table(false), payer(false), id(false), secondary(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool secondary :1;
} _Apply_db_idx_double_store_args__isset;

class Apply_db_idx_double_store_args {
 public:

  Apply_db_idx_double_store_args(const Apply_db_idx_double_store_args&);
  Apply_db_idx_double_store_args& operator=(const Apply_db_idx_double_store_args&);
  Apply_db_idx_double_store_args() noexcept
                                 : secondary() {
  }

  virtual ~Apply_db_idx_double_store_args() noexcept;
  Uint64 scope;
  Uint64 table;
  Uint64 payer;
  Uint64 id;
  std::string secondary;

  _Apply_db_idx_double_store_args__isset __isset;

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_payer(const Uint64& val);

  void __set_id(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx_double_store_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_store_pargs {
 public:


  virtual ~Apply_db_idx_double_store_pargs() noexcept;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* payer;
  const Uint64* id;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_store_result__isset {
  _Apply_db_idx_double_store_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_store_result__isset;

class Apply_db_idx_double_store_result {
 public:

  Apply_db_idx_double_store_result(const Apply_db_idx_double_store_result&) noexcept;
  Apply_db_idx_double_store_result& operator=(const Apply_db_idx_double_store_result&) noexcept;
  Apply_db_idx_double_store_result() noexcept
                                   : success(0) {
  }

  virtual ~Apply_db_idx_double_store_result() noexcept;
  int32_t success;

  _Apply_db_idx_double_store_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx_double_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_store_presult__isset {
  _Apply_db_idx_double_store_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_store_presult__isset;

class Apply_db_idx_double_store_presult {
 public:


  virtual ~Apply_db_idx_double_store_presult() noexcept;
  int32_t* success;

  _Apply_db_idx_double_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_update_args__isset {
  _Apply_db_idx_double_update_args__isset() : iterator(false), payer(false), secondary(false) {}
  bool iterator :1;
  bool payer :1;
  bool secondary :1;
} _Apply_db_idx_double_update_args__isset;

class Apply_db_idx_double_update_args {
 public:

  Apply_db_idx_double_update_args(const Apply_db_idx_double_update_args&);
  Apply_db_idx_double_update_args& operator=(const Apply_db_idx_double_update_args&);
  Apply_db_idx_double_update_args() noexcept
                                  : iterator(0),
                                    secondary() {
  }

  virtual ~Apply_db_idx_double_update_args() noexcept;
  int32_t iterator;
  Uint64 payer;
  std::string secondary;

  _Apply_db_idx_double_update_args__isset __isset;

  void __set_iterator(const int32_t val);

  void __set_payer(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx_double_update_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_update_pargs {
 public:


  virtual ~Apply_db_idx_double_update_pargs() noexcept;
  const int32_t* iterator;
  const Uint64* payer;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_update_result {
 public:

  Apply_db_idx_double_update_result(const Apply_db_idx_double_update_result&) noexcept;
  Apply_db_idx_double_update_result& operator=(const Apply_db_idx_double_update_result&) noexcept;
  Apply_db_idx_double_update_result() noexcept {
  }

  virtual ~Apply_db_idx_double_update_result() noexcept;

  bool operator == (const Apply_db_idx_double_update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx_double_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_update_presult {
 public:


  virtual ~Apply_db_idx_double_update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_remove_args__isset {
  _Apply_db_idx_double_remove_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx_double_remove_args__isset;

class Apply_db_idx_double_remove_args {
 public:

  Apply_db_idx_double_remove_args(const Apply_db_idx_double_remove_args&) noexcept;
  Apply_db_idx_double_remove_args& operator=(const Apply_db_idx_double_remove_args&) noexcept;
  Apply_db_idx_double_remove_args() noexcept
                                  : iterator(0) {
  }

  virtual ~Apply_db_idx_double_remove_args() noexcept;
  int32_t iterator;

  _Apply_db_idx_double_remove_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx_double_remove_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_remove_pargs {
 public:


  virtual ~Apply_db_idx_double_remove_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_remove_result {
 public:

  Apply_db_idx_double_remove_result(const Apply_db_idx_double_remove_result&) noexcept;
  Apply_db_idx_double_remove_result& operator=(const Apply_db_idx_double_remove_result&) noexcept;
  Apply_db_idx_double_remove_result() noexcept {
  }

  virtual ~Apply_db_idx_double_remove_result() noexcept;

  bool operator == (const Apply_db_idx_double_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx_double_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_remove_presult {
 public:


  virtual ~Apply_db_idx_double_remove_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_next_args__isset {
  _Apply_db_idx_double_next_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx_double_next_args__isset;

class Apply_db_idx_double_next_args {
 public:

  Apply_db_idx_double_next_args(const Apply_db_idx_double_next_args&) noexcept;
  Apply_db_idx_double_next_args& operator=(const Apply_db_idx_double_next_args&) noexcept;
  Apply_db_idx_double_next_args() noexcept
                                : iterator(0) {
  }

  virtual ~Apply_db_idx_double_next_args() noexcept;
  int32_t iterator;

  _Apply_db_idx_double_next_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx_double_next_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_next_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_next_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_next_pargs {
 public:


  virtual ~Apply_db_idx_double_next_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_next_result__isset {
  _Apply_db_idx_double_next_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_next_result__isset;

class Apply_db_idx_double_next_result {
 public:

  Apply_db_idx_double_next_result(const Apply_db_idx_double_next_result&);
  Apply_db_idx_double_next_result& operator=(const Apply_db_idx_double_next_result&);
  Apply_db_idx_double_next_result() noexcept {
  }

  virtual ~Apply_db_idx_double_next_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx_double_next_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx_double_next_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_next_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_next_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_next_presult__isset {
  _Apply_db_idx_double_next_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_next_presult__isset;

class Apply_db_idx_double_next_presult {
 public:


  virtual ~Apply_db_idx_double_next_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx_double_next_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_previous_args__isset {
  _Apply_db_idx_double_previous_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx_double_previous_args__isset;

class Apply_db_idx_double_previous_args {
 public:

  Apply_db_idx_double_previous_args(const Apply_db_idx_double_previous_args&) noexcept;
  Apply_db_idx_double_previous_args& operator=(const Apply_db_idx_double_previous_args&) noexcept;
  Apply_db_idx_double_previous_args() noexcept
                                    : iterator(0) {
  }

  virtual ~Apply_db_idx_double_previous_args() noexcept;
  int32_t iterator;

  _Apply_db_idx_double_previous_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx_double_previous_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_previous_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_previous_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_previous_pargs {
 public:


  virtual ~Apply_db_idx_double_previous_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_previous_result__isset {
  _Apply_db_idx_double_previous_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_previous_result__isset;

class Apply_db_idx_double_previous_result {
 public:

  Apply_db_idx_double_previous_result(const Apply_db_idx_double_previous_result&);
  Apply_db_idx_double_previous_result& operator=(const Apply_db_idx_double_previous_result&);
  Apply_db_idx_double_previous_result() noexcept {
  }

  virtual ~Apply_db_idx_double_previous_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx_double_previous_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx_double_previous_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_previous_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_previous_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_previous_presult__isset {
  _Apply_db_idx_double_previous_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_previous_presult__isset;

class Apply_db_idx_double_previous_presult {
 public:


  virtual ~Apply_db_idx_double_previous_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx_double_previous_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_find_primary_args__isset {
  _Apply_db_idx_double_find_primary_args__isset() : code(false), scope(false), table(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool primary :1;
} _Apply_db_idx_double_find_primary_args__isset;

class Apply_db_idx_double_find_primary_args {
 public:

  Apply_db_idx_double_find_primary_args(const Apply_db_idx_double_find_primary_args&);
  Apply_db_idx_double_find_primary_args& operator=(const Apply_db_idx_double_find_primary_args&);
  Apply_db_idx_double_find_primary_args() noexcept {
  }

  virtual ~Apply_db_idx_double_find_primary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 primary;

  _Apply_db_idx_double_find_primary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx_double_find_primary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_find_primary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_find_primary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_find_primary_pargs {
 public:


  virtual ~Apply_db_idx_double_find_primary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_find_primary_result__isset {
  _Apply_db_idx_double_find_primary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_find_primary_result__isset;

class Apply_db_idx_double_find_primary_result {
 public:

  Apply_db_idx_double_find_primary_result(const Apply_db_idx_double_find_primary_result&);
  Apply_db_idx_double_find_primary_result& operator=(const Apply_db_idx_double_find_primary_result&);
  Apply_db_idx_double_find_primary_result() noexcept {
  }

  virtual ~Apply_db_idx_double_find_primary_result() noexcept;
  FindPrimaryReturn success;

  _Apply_db_idx_double_find_primary_result__isset __isset;

  void __set_success(const FindPrimaryReturn& val);

  bool operator == (const Apply_db_idx_double_find_primary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_find_primary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_find_primary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_find_primary_presult__isset {
  _Apply_db_idx_double_find_primary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_find_primary_presult__isset;

class Apply_db_idx_double_find_primary_presult {
 public:


  virtual ~Apply_db_idx_double_find_primary_presult() noexcept;
  FindPrimaryReturn* success;

  _Apply_db_idx_double_find_primary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_find_secondary_args__isset {
  _Apply_db_idx_double_find_secondary_args__isset() : code(false), scope(false), table(false), secondary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
} _Apply_db_idx_double_find_secondary_args__isset;

class Apply_db_idx_double_find_secondary_args {
 public:

  Apply_db_idx_double_find_secondary_args(const Apply_db_idx_double_find_secondary_args&);
  Apply_db_idx_double_find_secondary_args& operator=(const Apply_db_idx_double_find_secondary_args&);
  Apply_db_idx_double_find_secondary_args() noexcept
                                          : secondary() {
  }

  virtual ~Apply_db_idx_double_find_secondary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;

  _Apply_db_idx_double_find_secondary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx_double_find_secondary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_find_secondary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_find_secondary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_find_secondary_pargs {
 public:


  virtual ~Apply_db_idx_double_find_secondary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_find_secondary_result__isset {
  _Apply_db_idx_double_find_secondary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_find_secondary_result__isset;

class Apply_db_idx_double_find_secondary_result {
 public:

  Apply_db_idx_double_find_secondary_result(const Apply_db_idx_double_find_secondary_result&);
  Apply_db_idx_double_find_secondary_result& operator=(const Apply_db_idx_double_find_secondary_result&);
  Apply_db_idx_double_find_secondary_result() noexcept {
  }

  virtual ~Apply_db_idx_double_find_secondary_result() noexcept;
  FindSecondaryReturn success;

  _Apply_db_idx_double_find_secondary_result__isset __isset;

  void __set_success(const FindSecondaryReturn& val);

  bool operator == (const Apply_db_idx_double_find_secondary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_find_secondary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_find_secondary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_find_secondary_presult__isset {
  _Apply_db_idx_double_find_secondary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_find_secondary_presult__isset;

class Apply_db_idx_double_find_secondary_presult {
 public:


  virtual ~Apply_db_idx_double_find_secondary_presult() noexcept;
  FindSecondaryReturn* success;

  _Apply_db_idx_double_find_secondary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_lowerbound_args__isset {
  _Apply_db_idx_double_lowerbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx_double_lowerbound_args__isset;

class Apply_db_idx_double_lowerbound_args {
 public:

  Apply_db_idx_double_lowerbound_args(const Apply_db_idx_double_lowerbound_args&);
  Apply_db_idx_double_lowerbound_args& operator=(const Apply_db_idx_double_lowerbound_args&);
  Apply_db_idx_double_lowerbound_args() noexcept
                                      : secondary() {
  }

  virtual ~Apply_db_idx_double_lowerbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;
  Uint64 primary;

  _Apply_db_idx_double_lowerbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx_double_lowerbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_lowerbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_lowerbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_lowerbound_pargs {
 public:


  virtual ~Apply_db_idx_double_lowerbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_lowerbound_result__isset {
  _Apply_db_idx_double_lowerbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_lowerbound_result__isset;

class Apply_db_idx_double_lowerbound_result {
 public:

  Apply_db_idx_double_lowerbound_result(const Apply_db_idx_double_lowerbound_result&);
  Apply_db_idx_double_lowerbound_result& operator=(const Apply_db_idx_double_lowerbound_result&);
  Apply_db_idx_double_lowerbound_result() noexcept {
  }

  virtual ~Apply_db_idx_double_lowerbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx_double_lowerbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx_double_lowerbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_lowerbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_lowerbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_lowerbound_presult__isset {
  _Apply_db_idx_double_lowerbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_lowerbound_presult__isset;

class Apply_db_idx_double_lowerbound_presult {
 public:


  virtual ~Apply_db_idx_double_lowerbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx_double_lowerbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_upperbound_args__isset {
  _Apply_db_idx_double_upperbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx_double_upperbound_args__isset;

class Apply_db_idx_double_upperbound_args {
 public:

  Apply_db_idx_double_upperbound_args(const Apply_db_idx_double_upperbound_args&);
  Apply_db_idx_double_upperbound_args& operator=(const Apply_db_idx_double_upperbound_args&);
  Apply_db_idx_double_upperbound_args() noexcept
                                      : secondary() {
  }

  virtual ~Apply_db_idx_double_upperbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;
  Uint64 primary;

  _Apply_db_idx_double_upperbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx_double_upperbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_upperbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_upperbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_upperbound_pargs {
 public:


  virtual ~Apply_db_idx_double_upperbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_upperbound_result__isset {
  _Apply_db_idx_double_upperbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_upperbound_result__isset;

class Apply_db_idx_double_upperbound_result {
 public:

  Apply_db_idx_double_upperbound_result(const Apply_db_idx_double_upperbound_result&);
  Apply_db_idx_double_upperbound_result& operator=(const Apply_db_idx_double_upperbound_result&);
  Apply_db_idx_double_upperbound_result() noexcept {
  }

  virtual ~Apply_db_idx_double_upperbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx_double_upperbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx_double_upperbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_upperbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_upperbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_upperbound_presult__isset {
  _Apply_db_idx_double_upperbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_upperbound_presult__isset;

class Apply_db_idx_double_upperbound_presult {
 public:


  virtual ~Apply_db_idx_double_upperbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx_double_upperbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_double_end_args__isset {
  _Apply_db_idx_double_end_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _Apply_db_idx_double_end_args__isset;

class Apply_db_idx_double_end_args {
 public:

  Apply_db_idx_double_end_args(const Apply_db_idx_double_end_args&);
  Apply_db_idx_double_end_args& operator=(const Apply_db_idx_double_end_args&);
  Apply_db_idx_double_end_args() noexcept {
  }

  virtual ~Apply_db_idx_double_end_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;

  _Apply_db_idx_double_end_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  bool operator == (const Apply_db_idx_double_end_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_end_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_end_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_double_end_pargs {
 public:


  virtual ~Apply_db_idx_double_end_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_end_result__isset {
  _Apply_db_idx_double_end_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_end_result__isset;

class Apply_db_idx_double_end_result {
 public:

  Apply_db_idx_double_end_result(const Apply_db_idx_double_end_result&) noexcept;
  Apply_db_idx_double_end_result& operator=(const Apply_db_idx_double_end_result&) noexcept;
  Apply_db_idx_double_end_result() noexcept
                                 : success(0) {
  }

  virtual ~Apply_db_idx_double_end_result() noexcept;
  int32_t success;

  _Apply_db_idx_double_end_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx_double_end_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_double_end_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_double_end_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_double_end_presult__isset {
  _Apply_db_idx_double_end_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_double_end_presult__isset;

class Apply_db_idx_double_end_presult {
 public:


  virtual ~Apply_db_idx_double_end_presult() noexcept;
  int32_t* success;

  _Apply_db_idx_double_end_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_store_args__isset {
  _Apply_db_idx_long_double_store_args__isset() : scope(false), table(false), payer(false), id(false), secondary(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool secondary :1;
} _Apply_db_idx_long_double_store_args__isset;

class Apply_db_idx_long_double_store_args {
 public:

  Apply_db_idx_long_double_store_args(const Apply_db_idx_long_double_store_args&);
  Apply_db_idx_long_double_store_args& operator=(const Apply_db_idx_long_double_store_args&);
  Apply_db_idx_long_double_store_args() noexcept
                                      : secondary() {
  }

  virtual ~Apply_db_idx_long_double_store_args() noexcept;
  Uint64 scope;
  Uint64 table;
  Uint64 payer;
  Uint64 id;
  std::string secondary;

  _Apply_db_idx_long_double_store_args__isset __isset;

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_payer(const Uint64& val);

  void __set_id(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx_long_double_store_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_store_pargs {
 public:


  virtual ~Apply_db_idx_long_double_store_pargs() noexcept;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* payer;
  const Uint64* id;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_store_result__isset {
  _Apply_db_idx_long_double_store_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_store_result__isset;

class Apply_db_idx_long_double_store_result {
 public:

  Apply_db_idx_long_double_store_result(const Apply_db_idx_long_double_store_result&) noexcept;
  Apply_db_idx_long_double_store_result& operator=(const Apply_db_idx_long_double_store_result&) noexcept;
  Apply_db_idx_long_double_store_result() noexcept
                                        : success(0) {
  }

  virtual ~Apply_db_idx_long_double_store_result() noexcept;
  int32_t success;

  _Apply_db_idx_long_double_store_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx_long_double_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_store_presult__isset {
  _Apply_db_idx_long_double_store_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_store_presult__isset;

class Apply_db_idx_long_double_store_presult {
 public:


  virtual ~Apply_db_idx_long_double_store_presult() noexcept;
  int32_t* success;

  _Apply_db_idx_long_double_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_update_args__isset {
  _Apply_db_idx_long_double_update_args__isset() : iterator(false), payer(false), secondary(false) {}
  bool iterator :1;
  bool payer :1;
  bool secondary :1;
} _Apply_db_idx_long_double_update_args__isset;

class Apply_db_idx_long_double_update_args {
 public:

  Apply_db_idx_long_double_update_args(const Apply_db_idx_long_double_update_args&);
  Apply_db_idx_long_double_update_args& operator=(const Apply_db_idx_long_double_update_args&);
  Apply_db_idx_long_double_update_args() noexcept
                                       : iterator(0),
                                         secondary() {
  }

  virtual ~Apply_db_idx_long_double_update_args() noexcept;
  int32_t iterator;
  Uint64 payer;
  std::string secondary;

  _Apply_db_idx_long_double_update_args__isset __isset;

  void __set_iterator(const int32_t val);

  void __set_payer(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx_long_double_update_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_update_pargs {
 public:


  virtual ~Apply_db_idx_long_double_update_pargs() noexcept;
  const int32_t* iterator;
  const Uint64* payer;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_update_result {
 public:

  Apply_db_idx_long_double_update_result(const Apply_db_idx_long_double_update_result&) noexcept;
  Apply_db_idx_long_double_update_result& operator=(const Apply_db_idx_long_double_update_result&) noexcept;
  Apply_db_idx_long_double_update_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_update_result() noexcept;

  bool operator == (const Apply_db_idx_long_double_update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_update_presult {
 public:


  virtual ~Apply_db_idx_long_double_update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_remove_args__isset {
  _Apply_db_idx_long_double_remove_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx_long_double_remove_args__isset;

class Apply_db_idx_long_double_remove_args {
 public:

  Apply_db_idx_long_double_remove_args(const Apply_db_idx_long_double_remove_args&) noexcept;
  Apply_db_idx_long_double_remove_args& operator=(const Apply_db_idx_long_double_remove_args&) noexcept;
  Apply_db_idx_long_double_remove_args() noexcept
                                       : iterator(0) {
  }

  virtual ~Apply_db_idx_long_double_remove_args() noexcept;
  int32_t iterator;

  _Apply_db_idx_long_double_remove_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx_long_double_remove_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_remove_pargs {
 public:


  virtual ~Apply_db_idx_long_double_remove_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_remove_result {
 public:

  Apply_db_idx_long_double_remove_result(const Apply_db_idx_long_double_remove_result&) noexcept;
  Apply_db_idx_long_double_remove_result& operator=(const Apply_db_idx_long_double_remove_result&) noexcept;
  Apply_db_idx_long_double_remove_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_remove_result() noexcept;

  bool operator == (const Apply_db_idx_long_double_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_remove_presult {
 public:


  virtual ~Apply_db_idx_long_double_remove_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_next_args__isset {
  _Apply_db_idx_long_double_next_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx_long_double_next_args__isset;

class Apply_db_idx_long_double_next_args {
 public:

  Apply_db_idx_long_double_next_args(const Apply_db_idx_long_double_next_args&) noexcept;
  Apply_db_idx_long_double_next_args& operator=(const Apply_db_idx_long_double_next_args&) noexcept;
  Apply_db_idx_long_double_next_args() noexcept
                                     : iterator(0) {
  }

  virtual ~Apply_db_idx_long_double_next_args() noexcept;
  int32_t iterator;

  _Apply_db_idx_long_double_next_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx_long_double_next_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_next_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_next_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_next_pargs {
 public:


  virtual ~Apply_db_idx_long_double_next_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_next_result__isset {
  _Apply_db_idx_long_double_next_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_next_result__isset;

class Apply_db_idx_long_double_next_result {
 public:

  Apply_db_idx_long_double_next_result(const Apply_db_idx_long_double_next_result&);
  Apply_db_idx_long_double_next_result& operator=(const Apply_db_idx_long_double_next_result&);
  Apply_db_idx_long_double_next_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_next_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx_long_double_next_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx_long_double_next_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_next_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_next_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_next_presult__isset {
  _Apply_db_idx_long_double_next_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_next_presult__isset;

class Apply_db_idx_long_double_next_presult {
 public:


  virtual ~Apply_db_idx_long_double_next_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx_long_double_next_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_previous_args__isset {
  _Apply_db_idx_long_double_previous_args__isset() : iterator(false) {}
  bool iterator :1;
} _Apply_db_idx_long_double_previous_args__isset;

class Apply_db_idx_long_double_previous_args {
 public:

  Apply_db_idx_long_double_previous_args(const Apply_db_idx_long_double_previous_args&) noexcept;
  Apply_db_idx_long_double_previous_args& operator=(const Apply_db_idx_long_double_previous_args&) noexcept;
  Apply_db_idx_long_double_previous_args() noexcept
                                         : iterator(0) {
  }

  virtual ~Apply_db_idx_long_double_previous_args() noexcept;
  int32_t iterator;

  _Apply_db_idx_long_double_previous_args__isset __isset;

  void __set_iterator(const int32_t val);

  bool operator == (const Apply_db_idx_long_double_previous_args & rhs) const
  {
    if (!(iterator == rhs.iterator))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_previous_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_previous_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_previous_pargs {
 public:


  virtual ~Apply_db_idx_long_double_previous_pargs() noexcept;
  const int32_t* iterator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_previous_result__isset {
  _Apply_db_idx_long_double_previous_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_previous_result__isset;

class Apply_db_idx_long_double_previous_result {
 public:

  Apply_db_idx_long_double_previous_result(const Apply_db_idx_long_double_previous_result&);
  Apply_db_idx_long_double_previous_result& operator=(const Apply_db_idx_long_double_previous_result&);
  Apply_db_idx_long_double_previous_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_previous_result() noexcept;
  NextPreviousReturn success;

  _Apply_db_idx_long_double_previous_result__isset __isset;

  void __set_success(const NextPreviousReturn& val);

  bool operator == (const Apply_db_idx_long_double_previous_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_previous_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_previous_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_previous_presult__isset {
  _Apply_db_idx_long_double_previous_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_previous_presult__isset;

class Apply_db_idx_long_double_previous_presult {
 public:


  virtual ~Apply_db_idx_long_double_previous_presult() noexcept;
  NextPreviousReturn* success;

  _Apply_db_idx_long_double_previous_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_find_primary_args__isset {
  _Apply_db_idx_long_double_find_primary_args__isset() : code(false), scope(false), table(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool primary :1;
} _Apply_db_idx_long_double_find_primary_args__isset;

class Apply_db_idx_long_double_find_primary_args {
 public:

  Apply_db_idx_long_double_find_primary_args(const Apply_db_idx_long_double_find_primary_args&);
  Apply_db_idx_long_double_find_primary_args& operator=(const Apply_db_idx_long_double_find_primary_args&);
  Apply_db_idx_long_double_find_primary_args() noexcept {
  }

  virtual ~Apply_db_idx_long_double_find_primary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  Uint64 primary;

  _Apply_db_idx_long_double_find_primary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx_long_double_find_primary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_find_primary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_find_primary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_find_primary_pargs {
 public:


  virtual ~Apply_db_idx_long_double_find_primary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_find_primary_result__isset {
  _Apply_db_idx_long_double_find_primary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_find_primary_result__isset;

class Apply_db_idx_long_double_find_primary_result {
 public:

  Apply_db_idx_long_double_find_primary_result(const Apply_db_idx_long_double_find_primary_result&);
  Apply_db_idx_long_double_find_primary_result& operator=(const Apply_db_idx_long_double_find_primary_result&);
  Apply_db_idx_long_double_find_primary_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_find_primary_result() noexcept;
  FindPrimaryReturn success;

  _Apply_db_idx_long_double_find_primary_result__isset __isset;

  void __set_success(const FindPrimaryReturn& val);

  bool operator == (const Apply_db_idx_long_double_find_primary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_find_primary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_find_primary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_find_primary_presult__isset {
  _Apply_db_idx_long_double_find_primary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_find_primary_presult__isset;

class Apply_db_idx_long_double_find_primary_presult {
 public:


  virtual ~Apply_db_idx_long_double_find_primary_presult() noexcept;
  FindPrimaryReturn* success;

  _Apply_db_idx_long_double_find_primary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_find_secondary_args__isset {
  _Apply_db_idx_long_double_find_secondary_args__isset() : code(false), scope(false), table(false), secondary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
} _Apply_db_idx_long_double_find_secondary_args__isset;

class Apply_db_idx_long_double_find_secondary_args {
 public:

  Apply_db_idx_long_double_find_secondary_args(const Apply_db_idx_long_double_find_secondary_args&);
  Apply_db_idx_long_double_find_secondary_args& operator=(const Apply_db_idx_long_double_find_secondary_args&);
  Apply_db_idx_long_double_find_secondary_args() noexcept
                                               : secondary() {
  }

  virtual ~Apply_db_idx_long_double_find_secondary_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;

  _Apply_db_idx_long_double_find_secondary_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  bool operator == (const Apply_db_idx_long_double_find_secondary_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_find_secondary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_find_secondary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_find_secondary_pargs {
 public:


  virtual ~Apply_db_idx_long_double_find_secondary_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_find_secondary_result__isset {
  _Apply_db_idx_long_double_find_secondary_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_find_secondary_result__isset;

class Apply_db_idx_long_double_find_secondary_result {
 public:

  Apply_db_idx_long_double_find_secondary_result(const Apply_db_idx_long_double_find_secondary_result&);
  Apply_db_idx_long_double_find_secondary_result& operator=(const Apply_db_idx_long_double_find_secondary_result&);
  Apply_db_idx_long_double_find_secondary_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_find_secondary_result() noexcept;
  FindSecondaryReturn success;

  _Apply_db_idx_long_double_find_secondary_result__isset __isset;

  void __set_success(const FindSecondaryReturn& val);

  bool operator == (const Apply_db_idx_long_double_find_secondary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_find_secondary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_find_secondary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_find_secondary_presult__isset {
  _Apply_db_idx_long_double_find_secondary_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_find_secondary_presult__isset;

class Apply_db_idx_long_double_find_secondary_presult {
 public:


  virtual ~Apply_db_idx_long_double_find_secondary_presult() noexcept;
  FindSecondaryReturn* success;

  _Apply_db_idx_long_double_find_secondary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_lowerbound_args__isset {
  _Apply_db_idx_long_double_lowerbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx_long_double_lowerbound_args__isset;

class Apply_db_idx_long_double_lowerbound_args {
 public:

  Apply_db_idx_long_double_lowerbound_args(const Apply_db_idx_long_double_lowerbound_args&);
  Apply_db_idx_long_double_lowerbound_args& operator=(const Apply_db_idx_long_double_lowerbound_args&);
  Apply_db_idx_long_double_lowerbound_args() noexcept
                                           : secondary() {
  }

  virtual ~Apply_db_idx_long_double_lowerbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;
  Uint64 primary;

  _Apply_db_idx_long_double_lowerbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx_long_double_lowerbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_lowerbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_lowerbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_lowerbound_pargs {
 public:


  virtual ~Apply_db_idx_long_double_lowerbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_lowerbound_result__isset {
  _Apply_db_idx_long_double_lowerbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_lowerbound_result__isset;

class Apply_db_idx_long_double_lowerbound_result {
 public:

  Apply_db_idx_long_double_lowerbound_result(const Apply_db_idx_long_double_lowerbound_result&);
  Apply_db_idx_long_double_lowerbound_result& operator=(const Apply_db_idx_long_double_lowerbound_result&);
  Apply_db_idx_long_double_lowerbound_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_lowerbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx_long_double_lowerbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx_long_double_lowerbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_lowerbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_lowerbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_lowerbound_presult__isset {
  _Apply_db_idx_long_double_lowerbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_lowerbound_presult__isset;

class Apply_db_idx_long_double_lowerbound_presult {
 public:


  virtual ~Apply_db_idx_long_double_lowerbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx_long_double_lowerbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_upperbound_args__isset {
  _Apply_db_idx_long_double_upperbound_args__isset() : code(false), scope(false), table(false), secondary(false), primary(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool secondary :1;
  bool primary :1;
} _Apply_db_idx_long_double_upperbound_args__isset;

class Apply_db_idx_long_double_upperbound_args {
 public:

  Apply_db_idx_long_double_upperbound_args(const Apply_db_idx_long_double_upperbound_args&);
  Apply_db_idx_long_double_upperbound_args& operator=(const Apply_db_idx_long_double_upperbound_args&);
  Apply_db_idx_long_double_upperbound_args() noexcept
                                           : secondary() {
  }

  virtual ~Apply_db_idx_long_double_upperbound_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;
  std::string secondary;
  Uint64 primary;

  _Apply_db_idx_long_double_upperbound_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  void __set_secondary(const std::string& val);

  void __set_primary(const Uint64& val);

  bool operator == (const Apply_db_idx_long_double_upperbound_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(secondary == rhs.secondary))
      return false;
    if (!(primary == rhs.primary))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_upperbound_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_upperbound_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_upperbound_pargs {
 public:


  virtual ~Apply_db_idx_long_double_upperbound_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;
  const std::string* secondary;
  const Uint64* primary;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_upperbound_result__isset {
  _Apply_db_idx_long_double_upperbound_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_upperbound_result__isset;

class Apply_db_idx_long_double_upperbound_result {
 public:

  Apply_db_idx_long_double_upperbound_result(const Apply_db_idx_long_double_upperbound_result&);
  Apply_db_idx_long_double_upperbound_result& operator=(const Apply_db_idx_long_double_upperbound_result&);
  Apply_db_idx_long_double_upperbound_result() noexcept {
  }

  virtual ~Apply_db_idx_long_double_upperbound_result() noexcept;
  LowerBoundUpperBoundReturn success;

  _Apply_db_idx_long_double_upperbound_result__isset __isset;

  void __set_success(const LowerBoundUpperBoundReturn& val);

  bool operator == (const Apply_db_idx_long_double_upperbound_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_upperbound_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_upperbound_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_upperbound_presult__isset {
  _Apply_db_idx_long_double_upperbound_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_upperbound_presult__isset;

class Apply_db_idx_long_double_upperbound_presult {
 public:


  virtual ~Apply_db_idx_long_double_upperbound_presult() noexcept;
  LowerBoundUpperBoundReturn* success;

  _Apply_db_idx_long_double_upperbound_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Apply_db_idx_long_double_end_args__isset {
  _Apply_db_idx_long_double_end_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _Apply_db_idx_long_double_end_args__isset;

class Apply_db_idx_long_double_end_args {
 public:

  Apply_db_idx_long_double_end_args(const Apply_db_idx_long_double_end_args&);
  Apply_db_idx_long_double_end_args& operator=(const Apply_db_idx_long_double_end_args&);
  Apply_db_idx_long_double_end_args() noexcept {
  }

  virtual ~Apply_db_idx_long_double_end_args() noexcept;
  Uint64 code;
  Uint64 scope;
  Uint64 table;

  _Apply_db_idx_long_double_end_args__isset __isset;

  void __set_code(const Uint64& val);

  void __set_scope(const Uint64& val);

  void __set_table(const Uint64& val);

  bool operator == (const Apply_db_idx_long_double_end_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_end_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_end_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Apply_db_idx_long_double_end_pargs {
 public:


  virtual ~Apply_db_idx_long_double_end_pargs() noexcept;
  const Uint64* code;
  const Uint64* scope;
  const Uint64* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_end_result__isset {
  _Apply_db_idx_long_double_end_result__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_end_result__isset;

class Apply_db_idx_long_double_end_result {
 public:

  Apply_db_idx_long_double_end_result(const Apply_db_idx_long_double_end_result&) noexcept;
  Apply_db_idx_long_double_end_result& operator=(const Apply_db_idx_long_double_end_result&) noexcept;
  Apply_db_idx_long_double_end_result() noexcept
                                      : success(0) {
  }

  virtual ~Apply_db_idx_long_double_end_result() noexcept;
  int32_t success;

  _Apply_db_idx_long_double_end_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Apply_db_idx_long_double_end_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Apply_db_idx_long_double_end_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply_db_idx_long_double_end_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Apply_db_idx_long_double_end_presult__isset {
  _Apply_db_idx_long_double_end_presult__isset() : success(false) {}
  bool success :1;
} _Apply_db_idx_long_double_end_presult__isset;

class Apply_db_idx_long_double_end_presult {
 public:


  virtual ~Apply_db_idx_long_double_end_presult() noexcept;
  int32_t* success;

  _Apply_db_idx_long_double_end_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApplyClient : virtual public ApplyIf {
 public:
  ApplyClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApplyClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t end_apply() override;
  void send_end_apply();
  int32_t recv_end_apply();
  void get_active_producers(std::string& _return) override;
  void send_get_active_producers();
  void recv_get_active_producers(std::string& _return);
  void get_resource_limits(GetResourceLimitsReturn& _return, const Uint64& account) override;
  void send_get_resource_limits(const Uint64& account);
  void recv_get_resource_limits(GetResourceLimitsReturn& _return);
  void set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight) override;
  void send_set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight);
  void recv_set_resource_limits();
  int64_t set_proposed_producers(const std::string& producer_data) override;
  void send_set_proposed_producers(const std::string& producer_data);
  int64_t recv_set_proposed_producers();
  int64_t set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data) override;
  void send_set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data);
  int64_t recv_set_proposed_producers_ex();
  bool is_privileged(const Uint64& account) override;
  void send_is_privileged(const Uint64& account);
  bool recv_is_privileged();
  void set_privileged(const Uint64& account, const bool is_priv) override;
  void send_set_privileged(const Uint64& account, const bool is_priv);
  void recv_set_privileged();
  void set_blockchain_parameters_packed(const std::string& data) override;
  void send_set_blockchain_parameters_packed(const std::string& data);
  void recv_set_blockchain_parameters_packed();
  void get_blockchain_parameters_packed(std::string& _return) override;
  void send_get_blockchain_parameters_packed();
  void recv_get_blockchain_parameters_packed(std::string& _return);
  void preactivate_feature(const std::string& feature_digest) override;
  void send_preactivate_feature(const std::string& feature_digest);
  void recv_preactivate_feature();
  int32_t check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data) override;
  void send_check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data);
  int32_t recv_check_transaction_authorization();
  int32_t check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us) override;
  void send_check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us);
  int32_t recv_check_permission_authorization();
  int64_t get_permission_last_used(const Uint64& account, const Uint64& permission) override;
  void send_get_permission_last_used(const Uint64& account, const Uint64& permission);
  int64_t recv_get_permission_last_used();
  int64_t get_account_creation_time(const Uint64& account) override;
  void send_get_account_creation_time(const Uint64& account);
  int64_t recv_get_account_creation_time();
  void prints(const std::string& cstr) override;
  void send_prints(const std::string& cstr);
  void recv_prints();
  void prints_l(const std::string& cstr) override;
  void send_prints_l(const std::string& cstr);
  void recv_prints_l();
  void printi(const int64_t n) override;
  void send_printi(const int64_t n);
  void recv_printi();
  void printui(const Uint64& n) override;
  void send_printui(const Uint64& n);
  void recv_printui();
  void printi128(const std::string& value) override;
  void send_printi128(const std::string& value);
  void recv_printi128();
  void printui128(const std::string& value) override;
  void send_printui128(const std::string& value);
  void recv_printui128();
  void printsf(const std::string& value) override;
  void send_printsf(const std::string& value);
  void recv_printsf();
  void printdf(const std::string& value) override;
  void send_printdf(const std::string& value);
  void recv_printdf();
  void printqf(const std::string& value) override;
  void send_printqf(const std::string& value);
  void recv_printqf();
  void printn(const Uint64& name) override;
  void send_printn(const Uint64& name);
  void recv_printn();
  void printhex(const std::string& data) override;
  void send_printhex(const std::string& data);
  void recv_printhex();
  int32_t action_data_size() override;
  void send_action_data_size();
  int32_t recv_action_data_size();
  void read_action_data(std::string& _return) override;
  void send_read_action_data();
  void recv_read_action_data(std::string& _return);
  void require_recipient(const Uint64& name) override;
  void send_require_recipient(const Uint64& name);
  void recv_require_recipient();
  void require_auth(const Uint64& name) override;
  void send_require_auth(const Uint64& name);
  void recv_require_auth();
  bool has_auth(const Uint64& name) override;
  void send_has_auth(const Uint64& name);
  bool recv_has_auth();
  void require_auth2(const Uint64& name, const Uint64& permission) override;
  void send_require_auth2(const Uint64& name, const Uint64& permission);
  void recv_require_auth2();
  bool is_account(const Uint64& name) override;
  void send_is_account(const Uint64& name);
  bool recv_is_account();
  void send_inline(const std::string& serialized_action) override;
  void send_send_inline(const std::string& serialized_action);
  void recv_send_inline();
  void send_context_free_inline(const std::string& serialized_data) override;
  void send_send_context_free_inline(const std::string& serialized_data);
  void recv_send_context_free_inline();
  void publication_time(Uint64& _return) override;
  void send_publication_time();
  void recv_publication_time(Uint64& _return);
  void current_receiver(Uint64& _return) override;
  void send_current_receiver();
  void recv_current_receiver(Uint64& _return);
  void eosio_assert(const bool test, const std::string& msg) override;
  void send_eosio_assert(const bool test, const std::string& msg);
  void recv_eosio_assert();
  void eosio_assert_message(const bool test, const std::string& msg) override;
  void send_eosio_assert_message(const bool test, const std::string& msg);
  void recv_eosio_assert_message();
  void eosio_assert_code(const bool test, const Uint64& code) override;
  void send_eosio_assert_code(const bool test, const Uint64& code);
  void recv_eosio_assert_code();
  void eosio_exit(const int32_t code) override;
  void send_eosio_exit(const int32_t code);
  void recv_eosio_exit();
  void current_time(Uint64& _return) override;
  void send_current_time();
  void recv_current_time(Uint64& _return);
  bool is_feature_activated(const std::string& feature_digest) override;
  void send_is_feature_activated(const std::string& feature_digest);
  bool recv_is_feature_activated();
  void get_sender(Uint64& _return) override;
  void send_get_sender();
  void recv_get_sender(Uint64& _return);
  void assert_sha256(const std::string& data, const std::string& hash) override;
  void send_assert_sha256(const std::string& data, const std::string& hash);
  void recv_assert_sha256();
  void assert_sha1(const std::string& data, const std::string& hash) override;
  void send_assert_sha1(const std::string& data, const std::string& hash);
  void recv_assert_sha1();
  void assert_sha512(const std::string& data, const std::string& hash) override;
  void send_assert_sha512(const std::string& data, const std::string& hash);
  void recv_assert_sha512();
  void assert_ripemd160(const std::string& data, const std::string& hash) override;
  void send_assert_ripemd160(const std::string& data, const std::string& hash);
  void recv_assert_ripemd160();
  void sha256(std::string& _return, const std::string& data) override;
  void send_sha256(const std::string& data);
  void recv_sha256(std::string& _return);
  void sha1(std::string& _return, const std::string& data) override;
  void send_sha1(const std::string& data);
  void recv_sha1(std::string& _return);
  void sha512(std::string& _return, const std::string& data) override;
  void send_sha512(const std::string& data);
  void recv_sha512(std::string& _return);
  void ripemd160(std::string& _return, const std::string& data) override;
  void send_ripemd160(const std::string& data);
  void recv_ripemd160(std::string& _return);
  void recover_key(std::string& _return, const std::string& digest, const std::string& sig) override;
  void send_recover_key(const std::string& digest, const std::string& sig);
  void recv_recover_key(std::string& _return);
  void assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub) override;
  void send_assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub);
  void recv_assert_recover_key();
  void send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing) override;
  void send_send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing);
  void recv_send_deferred();
  int32_t cancel_deferred(const std::string& sender_id) override;
  void send_cancel_deferred(const std::string& sender_id);
  int32_t recv_cancel_deferred();
  void read_transaction(std::string& _return) override;
  void send_read_transaction();
  void recv_read_transaction(std::string& _return);
  int32_t transaction_size() override;
  void send_transaction_size();
  int32_t recv_transaction_size();
  int32_t tapos_block_num() override;
  void send_tapos_block_num();
  int32_t recv_tapos_block_num();
  int32_t tapos_block_prefix() override;
  void send_tapos_block_prefix();
  int32_t recv_tapos_block_prefix();
  int64_t expiration() override;
  void send_expiration();
  int64_t recv_expiration();
  void get_action(std::string& _return, const int32_t _type, const int32_t index) override;
  void send_get_action(const int32_t _type, const int32_t index);
  void recv_get_action(std::string& _return);
  void get_context_free_data(std::string& _return, const int32_t index) override;
  void send_get_context_free_data(const int32_t index);
  void recv_get_context_free_data(std::string& _return);
  int32_t db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) override;
  void send_db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data);
  int32_t recv_db_store_i64();
  void db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data) override;
  void send_db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data);
  void recv_db_update_i64();
  void db_remove_i64(const int32_t iterator) override;
  void send_db_remove_i64(const int32_t iterator);
  void recv_db_remove_i64();
  void db_get_i64(std::string& _return, const int32_t iterator) override;
  void send_db_get_i64(const int32_t iterator);
  void recv_db_get_i64(std::string& _return);
  void db_next_i64(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_next_i64(const int32_t iterator);
  void recv_db_next_i64(NextPreviousReturn& _return);
  void db_previous_i64(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_previous_i64(const int32_t iterator);
  void recv_db_previous_i64(NextPreviousReturn& _return);
  int32_t db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override;
  void send_db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id);
  int32_t recv_db_find_i64();
  int32_t db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override;
  void send_db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id);
  int32_t recv_db_lowerbound_i64();
  int32_t db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override;
  void send_db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id);
  int32_t recv_db_upperbound_i64();
  int32_t db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  void send_db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_end_i64();
  int32_t db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary) override;
  void send_db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary);
  int32_t recv_db_idx64_store();
  void db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary) override;
  void send_db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary);
  void recv_db_idx64_update();
  void db_idx64_remove(const int32_t iterator) override;
  void send_db_idx64_remove(const int32_t iterator);
  void recv_db_idx64_remove();
  void db_idx64_next(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx64_next(const int32_t iterator);
  void recv_db_idx64_next(NextPreviousReturn& _return);
  void db_idx64_previous(NextPreviousReturn& _return, const int32_t iteratory) override;
  void send_db_idx64_previous(const int32_t iteratory);
  void recv_db_idx64_previous(NextPreviousReturn& _return);
  void db_idx64_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  void send_db_idx64_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx64_find_primary(FindPrimaryReturn& _return);
  void db_idx64_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary) override;
  void send_db_idx64_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary);
  void recv_db_idx64_find_secondary(FindSecondaryReturn& _return);
  void db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) override;
  void send_db_idx64_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary);
  void recv_db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return);
  void db_idx64_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) override;
  void send_db_idx64_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary);
  void recv_db_idx64_upperbound(LowerBoundUpperBoundReturn& _return);
  int32_t db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  void send_db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx64_end();
  int32_t db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override;
  void send_db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary);
  int32_t recv_db_idx128_store();
  void db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override;
  void send_db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary);
  void recv_db_idx128_update();
  void db_idx128_remove(const int32_t iterator) override;
  void send_db_idx128_remove(const int32_t iterator);
  void recv_db_idx128_remove();
  void db_idx128_next(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx128_next(const int32_t iterator);
  void recv_db_idx128_next(NextPreviousReturn& _return);
  void db_idx128_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx128_previous(const int32_t iterator);
  void recv_db_idx128_previous(NextPreviousReturn& _return);
  void db_idx128_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  void send_db_idx128_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx128_find_primary(FindPrimaryReturn& _return);
  void db_idx128_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override;
  void send_db_idx128_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary);
  void recv_db_idx128_find_secondary(FindSecondaryReturn& _return);
  void db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  void send_db_idx128_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return);
  void db_idx128_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  void send_db_idx128_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx128_upperbound(LowerBoundUpperBoundReturn& _return);
  int32_t db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  void send_db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx128_end();
  int32_t db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) override;
  void send_db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data);
  int32_t recv_db_idx256_store();
  void db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data) override;
  void send_db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data);
  void recv_db_idx256_update();
  void db_idx256_remove(const int32_t iterator) override;
  void send_db_idx256_remove(const int32_t iterator);
  void recv_db_idx256_remove();
  void db_idx256_next(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx256_next(const int32_t iterator);
  void recv_db_idx256_next(NextPreviousReturn& _return);
  void db_idx256_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx256_previous(const int32_t iterator);
  void recv_db_idx256_previous(NextPreviousReturn& _return);
  void db_idx256_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  void send_db_idx256_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx256_find_primary(FindPrimaryReturn& _return);
  void db_idx256_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data) override;
  void send_db_idx256_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data);
  void recv_db_idx256_find_secondary(FindSecondaryReturn& _return);
  void db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) override;
  void send_db_idx256_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary);
  void recv_db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return);
  void db_idx256_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) override;
  void send_db_idx256_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary);
  void recv_db_idx256_upperbound(LowerBoundUpperBoundReturn& _return);
  int32_t db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  void send_db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx256_end();
  int32_t db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override;
  void send_db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary);
  int32_t recv_db_idx_double_store();
  void db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override;
  void send_db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary);
  void recv_db_idx_double_update();
  void db_idx_double_remove(const int32_t iterator) override;
  void send_db_idx_double_remove(const int32_t iterator);
  void recv_db_idx_double_remove();
  void db_idx_double_next(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx_double_next(const int32_t iterator);
  void recv_db_idx_double_next(NextPreviousReturn& _return);
  void db_idx_double_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx_double_previous(const int32_t iterator);
  void recv_db_idx_double_previous(NextPreviousReturn& _return);
  void db_idx_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  void send_db_idx_double_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx_double_find_primary(FindPrimaryReturn& _return);
  void db_idx_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override;
  void send_db_idx_double_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary);
  void recv_db_idx_double_find_secondary(FindSecondaryReturn& _return);
  void db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  void send_db_idx_double_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return);
  void db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  void send_db_idx_double_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return);
  int32_t db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  void send_db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx_double_end();
  int32_t db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override;
  void send_db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary);
  int32_t recv_db_idx_long_double_store();
  void db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override;
  void send_db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary);
  void recv_db_idx_long_double_update();
  void db_idx_long_double_remove(const int32_t iterator) override;
  void send_db_idx_long_double_remove(const int32_t iterator);
  void recv_db_idx_long_double_remove();
  void db_idx_long_double_next(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx_long_double_next(const int32_t iterator);
  void recv_db_idx_long_double_next(NextPreviousReturn& _return);
  void db_idx_long_double_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  void send_db_idx_long_double_previous(const int32_t iterator);
  void recv_db_idx_long_double_previous(NextPreviousReturn& _return);
  void db_idx_long_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  void send_db_idx_long_double_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx_long_double_find_primary(FindPrimaryReturn& _return);
  void db_idx_long_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override;
  void send_db_idx_long_double_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary);
  void recv_db_idx_long_double_find_secondary(FindSecondaryReturn& _return);
  void db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  void send_db_idx_long_double_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return);
  void db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  void send_db_idx_long_double_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return);
  int32_t db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  void send_db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx_long_double_end();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApplyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ApplyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ApplyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_end_apply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_active_producers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_resource_limits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_resource_limits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_proposed_producers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_proposed_producers_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_privileged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_privileged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_blockchain_parameters_packed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_blockchain_parameters_packed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_preactivate_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_transaction_authorization(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_permission_authorization(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_permission_last_used(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_account_creation_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prints_l(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printui(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printi128(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printui128(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printsf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printdf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printqf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printhex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_action_data_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_action_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_require_recipient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_require_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_has_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_require_auth2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_account(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_inline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_context_free_inline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_publication_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_current_receiver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_eosio_assert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_eosio_assert_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_eosio_assert_code(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_eosio_exit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_current_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_feature_activated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_sender(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assert_sha256(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assert_sha1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assert_sha512(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assert_ripemd160(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sha256(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sha1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sha512(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ripemd160(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recover_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_assert_recover_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_deferred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancel_deferred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_transaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transaction_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tapos_block_num(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tapos_block_prefix(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_expiration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_context_free_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_store_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_update_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_remove_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_get_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_next_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_previous_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_find_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_lowerbound_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_upperbound_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_end_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_next(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_previous(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_find_primary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_find_secondary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_lowerbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_upperbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx64_end(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_next(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_previous(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_find_primary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_find_secondary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_lowerbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_upperbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx128_end(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_next(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_previous(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_find_primary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_find_secondary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_lowerbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_upperbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx256_end(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_next(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_previous(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_find_primary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_find_secondary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_lowerbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_upperbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_double_end(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_next(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_previous(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_find_primary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_find_secondary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_lowerbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_upperbound(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_idx_long_double_end(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApplyProcessor(::std::shared_ptr<ApplyIf> iface) :
    iface_(iface) {
    processMap_["end_apply"] = &ApplyProcessor::process_end_apply;
    processMap_["get_active_producers"] = &ApplyProcessor::process_get_active_producers;
    processMap_["get_resource_limits"] = &ApplyProcessor::process_get_resource_limits;
    processMap_["set_resource_limits"] = &ApplyProcessor::process_set_resource_limits;
    processMap_["set_proposed_producers"] = &ApplyProcessor::process_set_proposed_producers;
    processMap_["set_proposed_producers_ex"] = &ApplyProcessor::process_set_proposed_producers_ex;
    processMap_["is_privileged"] = &ApplyProcessor::process_is_privileged;
    processMap_["set_privileged"] = &ApplyProcessor::process_set_privileged;
    processMap_["set_blockchain_parameters_packed"] = &ApplyProcessor::process_set_blockchain_parameters_packed;
    processMap_["get_blockchain_parameters_packed"] = &ApplyProcessor::process_get_blockchain_parameters_packed;
    processMap_["preactivate_feature"] = &ApplyProcessor::process_preactivate_feature;
    processMap_["check_transaction_authorization"] = &ApplyProcessor::process_check_transaction_authorization;
    processMap_["check_permission_authorization"] = &ApplyProcessor::process_check_permission_authorization;
    processMap_["get_permission_last_used"] = &ApplyProcessor::process_get_permission_last_used;
    processMap_["get_account_creation_time"] = &ApplyProcessor::process_get_account_creation_time;
    processMap_["prints"] = &ApplyProcessor::process_prints;
    processMap_["prints_l"] = &ApplyProcessor::process_prints_l;
    processMap_["printi"] = &ApplyProcessor::process_printi;
    processMap_["printui"] = &ApplyProcessor::process_printui;
    processMap_["printi128"] = &ApplyProcessor::process_printi128;
    processMap_["printui128"] = &ApplyProcessor::process_printui128;
    processMap_["printsf"] = &ApplyProcessor::process_printsf;
    processMap_["printdf"] = &ApplyProcessor::process_printdf;
    processMap_["printqf"] = &ApplyProcessor::process_printqf;
    processMap_["printn"] = &ApplyProcessor::process_printn;
    processMap_["printhex"] = &ApplyProcessor::process_printhex;
    processMap_["action_data_size"] = &ApplyProcessor::process_action_data_size;
    processMap_["read_action_data"] = &ApplyProcessor::process_read_action_data;
    processMap_["require_recipient"] = &ApplyProcessor::process_require_recipient;
    processMap_["require_auth"] = &ApplyProcessor::process_require_auth;
    processMap_["has_auth"] = &ApplyProcessor::process_has_auth;
    processMap_["require_auth2"] = &ApplyProcessor::process_require_auth2;
    processMap_["is_account"] = &ApplyProcessor::process_is_account;
    processMap_["send_inline"] = &ApplyProcessor::process_send_inline;
    processMap_["send_context_free_inline"] = &ApplyProcessor::process_send_context_free_inline;
    processMap_["publication_time"] = &ApplyProcessor::process_publication_time;
    processMap_["current_receiver"] = &ApplyProcessor::process_current_receiver;
    processMap_["eosio_assert"] = &ApplyProcessor::process_eosio_assert;
    processMap_["eosio_assert_message"] = &ApplyProcessor::process_eosio_assert_message;
    processMap_["eosio_assert_code"] = &ApplyProcessor::process_eosio_assert_code;
    processMap_["eosio_exit"] = &ApplyProcessor::process_eosio_exit;
    processMap_["current_time"] = &ApplyProcessor::process_current_time;
    processMap_["is_feature_activated"] = &ApplyProcessor::process_is_feature_activated;
    processMap_["get_sender"] = &ApplyProcessor::process_get_sender;
    processMap_["assert_sha256"] = &ApplyProcessor::process_assert_sha256;
    processMap_["assert_sha1"] = &ApplyProcessor::process_assert_sha1;
    processMap_["assert_sha512"] = &ApplyProcessor::process_assert_sha512;
    processMap_["assert_ripemd160"] = &ApplyProcessor::process_assert_ripemd160;
    processMap_["sha256"] = &ApplyProcessor::process_sha256;
    processMap_["sha1"] = &ApplyProcessor::process_sha1;
    processMap_["sha512"] = &ApplyProcessor::process_sha512;
    processMap_["ripemd160"] = &ApplyProcessor::process_ripemd160;
    processMap_["recover_key"] = &ApplyProcessor::process_recover_key;
    processMap_["assert_recover_key"] = &ApplyProcessor::process_assert_recover_key;
    processMap_["send_deferred"] = &ApplyProcessor::process_send_deferred;
    processMap_["cancel_deferred"] = &ApplyProcessor::process_cancel_deferred;
    processMap_["read_transaction"] = &ApplyProcessor::process_read_transaction;
    processMap_["transaction_size"] = &ApplyProcessor::process_transaction_size;
    processMap_["tapos_block_num"] = &ApplyProcessor::process_tapos_block_num;
    processMap_["tapos_block_prefix"] = &ApplyProcessor::process_tapos_block_prefix;
    processMap_["expiration"] = &ApplyProcessor::process_expiration;
    processMap_["get_action"] = &ApplyProcessor::process_get_action;
    processMap_["get_context_free_data"] = &ApplyProcessor::process_get_context_free_data;
    processMap_["db_store_i64"] = &ApplyProcessor::process_db_store_i64;
    processMap_["db_update_i64"] = &ApplyProcessor::process_db_update_i64;
    processMap_["db_remove_i64"] = &ApplyProcessor::process_db_remove_i64;
    processMap_["db_get_i64"] = &ApplyProcessor::process_db_get_i64;
    processMap_["db_next_i64"] = &ApplyProcessor::process_db_next_i64;
    processMap_["db_previous_i64"] = &ApplyProcessor::process_db_previous_i64;
    processMap_["db_find_i64"] = &ApplyProcessor::process_db_find_i64;
    processMap_["db_lowerbound_i64"] = &ApplyProcessor::process_db_lowerbound_i64;
    processMap_["db_upperbound_i64"] = &ApplyProcessor::process_db_upperbound_i64;
    processMap_["db_end_i64"] = &ApplyProcessor::process_db_end_i64;
    processMap_["db_idx64_store"] = &ApplyProcessor::process_db_idx64_store;
    processMap_["db_idx64_update"] = &ApplyProcessor::process_db_idx64_update;
    processMap_["db_idx64_remove"] = &ApplyProcessor::process_db_idx64_remove;
    processMap_["db_idx64_next"] = &ApplyProcessor::process_db_idx64_next;
    processMap_["db_idx64_previous"] = &ApplyProcessor::process_db_idx64_previous;
    processMap_["db_idx64_find_primary"] = &ApplyProcessor::process_db_idx64_find_primary;
    processMap_["db_idx64_find_secondary"] = &ApplyProcessor::process_db_idx64_find_secondary;
    processMap_["db_idx64_lowerbound"] = &ApplyProcessor::process_db_idx64_lowerbound;
    processMap_["db_idx64_upperbound"] = &ApplyProcessor::process_db_idx64_upperbound;
    processMap_["db_idx64_end"] = &ApplyProcessor::process_db_idx64_end;
    processMap_["db_idx128_store"] = &ApplyProcessor::process_db_idx128_store;
    processMap_["db_idx128_update"] = &ApplyProcessor::process_db_idx128_update;
    processMap_["db_idx128_remove"] = &ApplyProcessor::process_db_idx128_remove;
    processMap_["db_idx128_next"] = &ApplyProcessor::process_db_idx128_next;
    processMap_["db_idx128_previous"] = &ApplyProcessor::process_db_idx128_previous;
    processMap_["db_idx128_find_primary"] = &ApplyProcessor::process_db_idx128_find_primary;
    processMap_["db_idx128_find_secondary"] = &ApplyProcessor::process_db_idx128_find_secondary;
    processMap_["db_idx128_lowerbound"] = &ApplyProcessor::process_db_idx128_lowerbound;
    processMap_["db_idx128_upperbound"] = &ApplyProcessor::process_db_idx128_upperbound;
    processMap_["db_idx128_end"] = &ApplyProcessor::process_db_idx128_end;
    processMap_["db_idx256_store"] = &ApplyProcessor::process_db_idx256_store;
    processMap_["db_idx256_update"] = &ApplyProcessor::process_db_idx256_update;
    processMap_["db_idx256_remove"] = &ApplyProcessor::process_db_idx256_remove;
    processMap_["db_idx256_next"] = &ApplyProcessor::process_db_idx256_next;
    processMap_["db_idx256_previous"] = &ApplyProcessor::process_db_idx256_previous;
    processMap_["db_idx256_find_primary"] = &ApplyProcessor::process_db_idx256_find_primary;
    processMap_["db_idx256_find_secondary"] = &ApplyProcessor::process_db_idx256_find_secondary;
    processMap_["db_idx256_lowerbound"] = &ApplyProcessor::process_db_idx256_lowerbound;
    processMap_["db_idx256_upperbound"] = &ApplyProcessor::process_db_idx256_upperbound;
    processMap_["db_idx256_end"] = &ApplyProcessor::process_db_idx256_end;
    processMap_["db_idx_double_store"] = &ApplyProcessor::process_db_idx_double_store;
    processMap_["db_idx_double_update"] = &ApplyProcessor::process_db_idx_double_update;
    processMap_["db_idx_double_remove"] = &ApplyProcessor::process_db_idx_double_remove;
    processMap_["db_idx_double_next"] = &ApplyProcessor::process_db_idx_double_next;
    processMap_["db_idx_double_previous"] = &ApplyProcessor::process_db_idx_double_previous;
    processMap_["db_idx_double_find_primary"] = &ApplyProcessor::process_db_idx_double_find_primary;
    processMap_["db_idx_double_find_secondary"] = &ApplyProcessor::process_db_idx_double_find_secondary;
    processMap_["db_idx_double_lowerbound"] = &ApplyProcessor::process_db_idx_double_lowerbound;
    processMap_["db_idx_double_upperbound"] = &ApplyProcessor::process_db_idx_double_upperbound;
    processMap_["db_idx_double_end"] = &ApplyProcessor::process_db_idx_double_end;
    processMap_["db_idx_long_double_store"] = &ApplyProcessor::process_db_idx_long_double_store;
    processMap_["db_idx_long_double_update"] = &ApplyProcessor::process_db_idx_long_double_update;
    processMap_["db_idx_long_double_remove"] = &ApplyProcessor::process_db_idx_long_double_remove;
    processMap_["db_idx_long_double_next"] = &ApplyProcessor::process_db_idx_long_double_next;
    processMap_["db_idx_long_double_previous"] = &ApplyProcessor::process_db_idx_long_double_previous;
    processMap_["db_idx_long_double_find_primary"] = &ApplyProcessor::process_db_idx_long_double_find_primary;
    processMap_["db_idx_long_double_find_secondary"] = &ApplyProcessor::process_db_idx_long_double_find_secondary;
    processMap_["db_idx_long_double_lowerbound"] = &ApplyProcessor::process_db_idx_long_double_lowerbound;
    processMap_["db_idx_long_double_upperbound"] = &ApplyProcessor::process_db_idx_long_double_upperbound;
    processMap_["db_idx_long_double_end"] = &ApplyProcessor::process_db_idx_long_double_end;
  }

  virtual ~ApplyProcessor() {}
};

class ApplyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApplyProcessorFactory(const ::std::shared_ptr< ApplyIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ApplyIfFactory > handlerFactory_;
};

class ApplyMultiface : virtual public ApplyIf {
 public:
  ApplyMultiface(std::vector<std::shared_ptr<ApplyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApplyMultiface() {}
 protected:
  std::vector<std::shared_ptr<ApplyIf> > ifaces_;
  ApplyMultiface() {}
  void add(::std::shared_ptr<ApplyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t end_apply() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->end_apply();
    }
    return ifaces_[i]->end_apply();
  }

  void get_active_producers(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_active_producers(_return);
    }
    ifaces_[i]->get_active_producers(_return);
    return;
  }

  void get_resource_limits(GetResourceLimitsReturn& _return, const Uint64& account) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_resource_limits(_return, account);
    }
    ifaces_[i]->get_resource_limits(_return, account);
    return;
  }

  void set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_resource_limits(account, ram_bytes, net_weight, cpu_weight);
    }
    ifaces_[i]->set_resource_limits(account, ram_bytes, net_weight, cpu_weight);
  }

  int64_t set_proposed_producers(const std::string& producer_data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_proposed_producers(producer_data);
    }
    return ifaces_[i]->set_proposed_producers(producer_data);
  }

  int64_t set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_proposed_producers_ex(producer_data_format, producer_data);
    }
    return ifaces_[i]->set_proposed_producers_ex(producer_data_format, producer_data);
  }

  bool is_privileged(const Uint64& account) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_privileged(account);
    }
    return ifaces_[i]->is_privileged(account);
  }

  void set_privileged(const Uint64& account, const bool is_priv) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_privileged(account, is_priv);
    }
    ifaces_[i]->set_privileged(account, is_priv);
  }

  void set_blockchain_parameters_packed(const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_blockchain_parameters_packed(data);
    }
    ifaces_[i]->set_blockchain_parameters_packed(data);
  }

  void get_blockchain_parameters_packed(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_blockchain_parameters_packed(_return);
    }
    ifaces_[i]->get_blockchain_parameters_packed(_return);
    return;
  }

  void preactivate_feature(const std::string& feature_digest) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->preactivate_feature(feature_digest);
    }
    ifaces_[i]->preactivate_feature(feature_digest);
  }

  int32_t check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_transaction_authorization(trx_data, pubkeys_data, perms_data);
    }
    return ifaces_[i]->check_transaction_authorization(trx_data, pubkeys_data, perms_data);
  }

  int32_t check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_permission_authorization(account, permission, pubkeys_data, perms_data, delay_us);
    }
    return ifaces_[i]->check_permission_authorization(account, permission, pubkeys_data, perms_data, delay_us);
  }

  int64_t get_permission_last_used(const Uint64& account, const Uint64& permission) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_permission_last_used(account, permission);
    }
    return ifaces_[i]->get_permission_last_used(account, permission);
  }

  int64_t get_account_creation_time(const Uint64& account) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_account_creation_time(account);
    }
    return ifaces_[i]->get_account_creation_time(account);
  }

  void prints(const std::string& cstr) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prints(cstr);
    }
    ifaces_[i]->prints(cstr);
  }

  void prints_l(const std::string& cstr) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prints_l(cstr);
    }
    ifaces_[i]->prints_l(cstr);
  }

  void printi(const int64_t n) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printi(n);
    }
    ifaces_[i]->printi(n);
  }

  void printui(const Uint64& n) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printui(n);
    }
    ifaces_[i]->printui(n);
  }

  void printi128(const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printi128(value);
    }
    ifaces_[i]->printi128(value);
  }

  void printui128(const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printui128(value);
    }
    ifaces_[i]->printui128(value);
  }

  void printsf(const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printsf(value);
    }
    ifaces_[i]->printsf(value);
  }

  void printdf(const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printdf(value);
    }
    ifaces_[i]->printdf(value);
  }

  void printqf(const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printqf(value);
    }
    ifaces_[i]->printqf(value);
  }

  void printn(const Uint64& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printn(name);
    }
    ifaces_[i]->printn(name);
  }

  void printhex(const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printhex(data);
    }
    ifaces_[i]->printhex(data);
  }

  int32_t action_data_size() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->action_data_size();
    }
    return ifaces_[i]->action_data_size();
  }

  void read_action_data(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_action_data(_return);
    }
    ifaces_[i]->read_action_data(_return);
    return;
  }

  void require_recipient(const Uint64& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->require_recipient(name);
    }
    ifaces_[i]->require_recipient(name);
  }

  void require_auth(const Uint64& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->require_auth(name);
    }
    ifaces_[i]->require_auth(name);
  }

  bool has_auth(const Uint64& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->has_auth(name);
    }
    return ifaces_[i]->has_auth(name);
  }

  void require_auth2(const Uint64& name, const Uint64& permission) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->require_auth2(name, permission);
    }
    ifaces_[i]->require_auth2(name, permission);
  }

  bool is_account(const Uint64& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_account(name);
    }
    return ifaces_[i]->is_account(name);
  }

  void send_inline(const std::string& serialized_action) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_inline(serialized_action);
    }
    ifaces_[i]->send_inline(serialized_action);
  }

  void send_context_free_inline(const std::string& serialized_data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_context_free_inline(serialized_data);
    }
    ifaces_[i]->send_context_free_inline(serialized_data);
  }

  void publication_time(Uint64& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->publication_time(_return);
    }
    ifaces_[i]->publication_time(_return);
    return;
  }

  void current_receiver(Uint64& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->current_receiver(_return);
    }
    ifaces_[i]->current_receiver(_return);
    return;
  }

  void eosio_assert(const bool test, const std::string& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->eosio_assert(test, msg);
    }
    ifaces_[i]->eosio_assert(test, msg);
  }

  void eosio_assert_message(const bool test, const std::string& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->eosio_assert_message(test, msg);
    }
    ifaces_[i]->eosio_assert_message(test, msg);
  }

  void eosio_assert_code(const bool test, const Uint64& code) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->eosio_assert_code(test, code);
    }
    ifaces_[i]->eosio_assert_code(test, code);
  }

  void eosio_exit(const int32_t code) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->eosio_exit(code);
    }
    ifaces_[i]->eosio_exit(code);
  }

  void current_time(Uint64& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->current_time(_return);
    }
    ifaces_[i]->current_time(_return);
    return;
  }

  bool is_feature_activated(const std::string& feature_digest) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_feature_activated(feature_digest);
    }
    return ifaces_[i]->is_feature_activated(feature_digest);
  }

  void get_sender(Uint64& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_sender(_return);
    }
    ifaces_[i]->get_sender(_return);
    return;
  }

  void assert_sha256(const std::string& data, const std::string& hash) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assert_sha256(data, hash);
    }
    ifaces_[i]->assert_sha256(data, hash);
  }

  void assert_sha1(const std::string& data, const std::string& hash) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assert_sha1(data, hash);
    }
    ifaces_[i]->assert_sha1(data, hash);
  }

  void assert_sha512(const std::string& data, const std::string& hash) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assert_sha512(data, hash);
    }
    ifaces_[i]->assert_sha512(data, hash);
  }

  void assert_ripemd160(const std::string& data, const std::string& hash) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assert_ripemd160(data, hash);
    }
    ifaces_[i]->assert_ripemd160(data, hash);
  }

  void sha256(std::string& _return, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sha256(_return, data);
    }
    ifaces_[i]->sha256(_return, data);
    return;
  }

  void sha1(std::string& _return, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sha1(_return, data);
    }
    ifaces_[i]->sha1(_return, data);
    return;
  }

  void sha512(std::string& _return, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sha512(_return, data);
    }
    ifaces_[i]->sha512(_return, data);
    return;
  }

  void ripemd160(std::string& _return, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ripemd160(_return, data);
    }
    ifaces_[i]->ripemd160(_return, data);
    return;
  }

  void recover_key(std::string& _return, const std::string& digest, const std::string& sig) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recover_key(_return, digest, sig);
    }
    ifaces_[i]->recover_key(_return, digest, sig);
    return;
  }

  void assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->assert_recover_key(digest, sig, pub);
    }
    ifaces_[i]->assert_recover_key(digest, sig, pub);
  }

  void send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_deferred(sender_id, payer, serialized_transaction, replace_existing);
    }
    ifaces_[i]->send_deferred(sender_id, payer, serialized_transaction, replace_existing);
  }

  int32_t cancel_deferred(const std::string& sender_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancel_deferred(sender_id);
    }
    return ifaces_[i]->cancel_deferred(sender_id);
  }

  void read_transaction(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_transaction(_return);
    }
    ifaces_[i]->read_transaction(_return);
    return;
  }

  int32_t transaction_size() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transaction_size();
    }
    return ifaces_[i]->transaction_size();
  }

  int32_t tapos_block_num() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tapos_block_num();
    }
    return ifaces_[i]->tapos_block_num();
  }

  int32_t tapos_block_prefix() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tapos_block_prefix();
    }
    return ifaces_[i]->tapos_block_prefix();
  }

  int64_t expiration() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->expiration();
    }
    return ifaces_[i]->expiration();
  }

  void get_action(std::string& _return, const int32_t _type, const int32_t index) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_action(_return, _type, index);
    }
    ifaces_[i]->get_action(_return, _type, index);
    return;
  }

  void get_context_free_data(std::string& _return, const int32_t index) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_context_free_data(_return, index);
    }
    ifaces_[i]->get_context_free_data(_return, index);
    return;
  }

  int32_t db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_store_i64(scope, table, payer, id, data);
    }
    return ifaces_[i]->db_store_i64(scope, table, payer, id, data);
  }

  void db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_update_i64(iterator, payer, data);
    }
    ifaces_[i]->db_update_i64(iterator, payer, data);
  }

  void db_remove_i64(const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_remove_i64(iterator);
    }
    ifaces_[i]->db_remove_i64(iterator);
  }

  void db_get_i64(std::string& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_get_i64(_return, iterator);
    }
    ifaces_[i]->db_get_i64(_return, iterator);
    return;
  }

  void db_next_i64(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_next_i64(_return, iterator);
    }
    ifaces_[i]->db_next_i64(_return, iterator);
    return;
  }

  void db_previous_i64(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_previous_i64(_return, iterator);
    }
    ifaces_[i]->db_previous_i64(_return, iterator);
    return;
  }

  int32_t db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_find_i64(code, scope, table, id);
    }
    return ifaces_[i]->db_find_i64(code, scope, table, id);
  }

  int32_t db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_lowerbound_i64(code, scope, table, id);
    }
    return ifaces_[i]->db_lowerbound_i64(code, scope, table, id);
  }

  int32_t db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_upperbound_i64(code, scope, table, id);
    }
    return ifaces_[i]->db_upperbound_i64(code, scope, table, id);
  }

  int32_t db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_end_i64(code, scope, table);
    }
    return ifaces_[i]->db_end_i64(code, scope, table);
  }

  int32_t db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_store(scope, table, payer, id, secondary);
    }
    return ifaces_[i]->db_idx64_store(scope, table, payer, id, secondary);
  }

  void db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_update(iterator, payer, secondary);
    }
    ifaces_[i]->db_idx64_update(iterator, payer, secondary);
  }

  void db_idx64_remove(const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_remove(iterator);
    }
    ifaces_[i]->db_idx64_remove(iterator);
  }

  void db_idx64_next(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_next(_return, iterator);
    }
    ifaces_[i]->db_idx64_next(_return, iterator);
    return;
  }

  void db_idx64_previous(NextPreviousReturn& _return, const int32_t iteratory) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_previous(_return, iteratory);
    }
    ifaces_[i]->db_idx64_previous(_return, iteratory);
    return;
  }

  void db_idx64_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_find_primary(_return, code, scope, table, primary);
    }
    ifaces_[i]->db_idx64_find_primary(_return, code, scope, table, primary);
    return;
  }

  void db_idx64_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_find_secondary(_return, code, scope, table, secondary);
    }
    ifaces_[i]->db_idx64_find_secondary(_return, code, scope, table, secondary);
    return;
  }

  void db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_lowerbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx64_lowerbound(_return, code, scope, table, secondary, primary);
    return;
  }

  void db_idx64_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_upperbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx64_upperbound(_return, code, scope, table, secondary, primary);
    return;
  }

  int32_t db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx64_end(code, scope, table);
    }
    return ifaces_[i]->db_idx64_end(code, scope, table);
  }

  int32_t db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_store(scope, table, payer, id, secondary);
    }
    return ifaces_[i]->db_idx128_store(scope, table, payer, id, secondary);
  }

  void db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_update(iterator, payer, secondary);
    }
    ifaces_[i]->db_idx128_update(iterator, payer, secondary);
  }

  void db_idx128_remove(const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_remove(iterator);
    }
    ifaces_[i]->db_idx128_remove(iterator);
  }

  void db_idx128_next(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_next(_return, iterator);
    }
    ifaces_[i]->db_idx128_next(_return, iterator);
    return;
  }

  void db_idx128_previous(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_previous(_return, iterator);
    }
    ifaces_[i]->db_idx128_previous(_return, iterator);
    return;
  }

  void db_idx128_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_find_primary(_return, code, scope, table, primary);
    }
    ifaces_[i]->db_idx128_find_primary(_return, code, scope, table, primary);
    return;
  }

  void db_idx128_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_find_secondary(_return, code, scope, table, secondary);
    }
    ifaces_[i]->db_idx128_find_secondary(_return, code, scope, table, secondary);
    return;
  }

  void db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_lowerbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx128_lowerbound(_return, code, scope, table, secondary, primary);
    return;
  }

  void db_idx128_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_upperbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx128_upperbound(_return, code, scope, table, secondary, primary);
    return;
  }

  int32_t db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx128_end(code, scope, table);
    }
    return ifaces_[i]->db_idx128_end(code, scope, table);
  }

  int32_t db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_store(scope, table, payer, id, data);
    }
    return ifaces_[i]->db_idx256_store(scope, table, payer, id, data);
  }

  void db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_update(iterator, payer, data);
    }
    ifaces_[i]->db_idx256_update(iterator, payer, data);
  }

  void db_idx256_remove(const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_remove(iterator);
    }
    ifaces_[i]->db_idx256_remove(iterator);
  }

  void db_idx256_next(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_next(_return, iterator);
    }
    ifaces_[i]->db_idx256_next(_return, iterator);
    return;
  }

  void db_idx256_previous(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_previous(_return, iterator);
    }
    ifaces_[i]->db_idx256_previous(_return, iterator);
    return;
  }

  void db_idx256_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_find_primary(_return, code, scope, table, primary);
    }
    ifaces_[i]->db_idx256_find_primary(_return, code, scope, table, primary);
    return;
  }

  void db_idx256_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_find_secondary(_return, code, scope, table, data);
    }
    ifaces_[i]->db_idx256_find_secondary(_return, code, scope, table, data);
    return;
  }

  void db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_lowerbound(_return, code, scope, table, data, primary);
    }
    ifaces_[i]->db_idx256_lowerbound(_return, code, scope, table, data, primary);
    return;
  }

  void db_idx256_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_upperbound(_return, code, scope, table, data, primary);
    }
    ifaces_[i]->db_idx256_upperbound(_return, code, scope, table, data, primary);
    return;
  }

  int32_t db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx256_end(code, scope, table);
    }
    return ifaces_[i]->db_idx256_end(code, scope, table);
  }

  int32_t db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_store(scope, table, payer, id, secondary);
    }
    return ifaces_[i]->db_idx_double_store(scope, table, payer, id, secondary);
  }

  void db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_update(iterator, payer, secondary);
    }
    ifaces_[i]->db_idx_double_update(iterator, payer, secondary);
  }

  void db_idx_double_remove(const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_remove(iterator);
    }
    ifaces_[i]->db_idx_double_remove(iterator);
  }

  void db_idx_double_next(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_next(_return, iterator);
    }
    ifaces_[i]->db_idx_double_next(_return, iterator);
    return;
  }

  void db_idx_double_previous(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_previous(_return, iterator);
    }
    ifaces_[i]->db_idx_double_previous(_return, iterator);
    return;
  }

  void db_idx_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_find_primary(_return, code, scope, table, primary);
    }
    ifaces_[i]->db_idx_double_find_primary(_return, code, scope, table, primary);
    return;
  }

  void db_idx_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_find_secondary(_return, code, scope, table, secondary);
    }
    ifaces_[i]->db_idx_double_find_secondary(_return, code, scope, table, secondary);
    return;
  }

  void db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_lowerbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx_double_lowerbound(_return, code, scope, table, secondary, primary);
    return;
  }

  void db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_upperbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx_double_upperbound(_return, code, scope, table, secondary, primary);
    return;
  }

  int32_t db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_double_end(code, scope, table);
    }
    return ifaces_[i]->db_idx_double_end(code, scope, table);
  }

  int32_t db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_store(scope, table, payer, id, secondary);
    }
    return ifaces_[i]->db_idx_long_double_store(scope, table, payer, id, secondary);
  }

  void db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_update(iterator, payer, secondary);
    }
    ifaces_[i]->db_idx_long_double_update(iterator, payer, secondary);
  }

  void db_idx_long_double_remove(const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_remove(iterator);
    }
    ifaces_[i]->db_idx_long_double_remove(iterator);
  }

  void db_idx_long_double_next(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_next(_return, iterator);
    }
    ifaces_[i]->db_idx_long_double_next(_return, iterator);
    return;
  }

  void db_idx_long_double_previous(NextPreviousReturn& _return, const int32_t iterator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_previous(_return, iterator);
    }
    ifaces_[i]->db_idx_long_double_previous(_return, iterator);
    return;
  }

  void db_idx_long_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_find_primary(_return, code, scope, table, primary);
    }
    ifaces_[i]->db_idx_long_double_find_primary(_return, code, scope, table, primary);
    return;
  }

  void db_idx_long_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_find_secondary(_return, code, scope, table, secondary);
    }
    ifaces_[i]->db_idx_long_double_find_secondary(_return, code, scope, table, secondary);
    return;
  }

  void db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_lowerbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx_long_double_lowerbound(_return, code, scope, table, secondary, primary);
    return;
  }

  void db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_upperbound(_return, code, scope, table, secondary, primary);
    }
    ifaces_[i]->db_idx_long_double_upperbound(_return, code, scope, table, secondary, primary);
    return;
  }

  int32_t db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_idx_long_double_end(code, scope, table);
    }
    return ifaces_[i]->db_idx_long_double_end(code, scope, table);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApplyConcurrentClient : virtual public ApplyIf {
 public:
  ApplyConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ApplyConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t end_apply() override;
  int32_t send_end_apply();
  int32_t recv_end_apply(const int32_t seqid);
  void get_active_producers(std::string& _return) override;
  int32_t send_get_active_producers();
  void recv_get_active_producers(std::string& _return, const int32_t seqid);
  void get_resource_limits(GetResourceLimitsReturn& _return, const Uint64& account) override;
  int32_t send_get_resource_limits(const Uint64& account);
  void recv_get_resource_limits(GetResourceLimitsReturn& _return, const int32_t seqid);
  void set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight) override;
  int32_t send_set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight);
  void recv_set_resource_limits(const int32_t seqid);
  int64_t set_proposed_producers(const std::string& producer_data) override;
  int32_t send_set_proposed_producers(const std::string& producer_data);
  int64_t recv_set_proposed_producers(const int32_t seqid);
  int64_t set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data) override;
  int32_t send_set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data);
  int64_t recv_set_proposed_producers_ex(const int32_t seqid);
  bool is_privileged(const Uint64& account) override;
  int32_t send_is_privileged(const Uint64& account);
  bool recv_is_privileged(const int32_t seqid);
  void set_privileged(const Uint64& account, const bool is_priv) override;
  int32_t send_set_privileged(const Uint64& account, const bool is_priv);
  void recv_set_privileged(const int32_t seqid);
  void set_blockchain_parameters_packed(const std::string& data) override;
  int32_t send_set_blockchain_parameters_packed(const std::string& data);
  void recv_set_blockchain_parameters_packed(const int32_t seqid);
  void get_blockchain_parameters_packed(std::string& _return) override;
  int32_t send_get_blockchain_parameters_packed();
  void recv_get_blockchain_parameters_packed(std::string& _return, const int32_t seqid);
  void preactivate_feature(const std::string& feature_digest) override;
  int32_t send_preactivate_feature(const std::string& feature_digest);
  void recv_preactivate_feature(const int32_t seqid);
  int32_t check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data) override;
  int32_t send_check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data);
  int32_t recv_check_transaction_authorization(const int32_t seqid);
  int32_t check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us) override;
  int32_t send_check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us);
  int32_t recv_check_permission_authorization(const int32_t seqid);
  int64_t get_permission_last_used(const Uint64& account, const Uint64& permission) override;
  int32_t send_get_permission_last_used(const Uint64& account, const Uint64& permission);
  int64_t recv_get_permission_last_used(const int32_t seqid);
  int64_t get_account_creation_time(const Uint64& account) override;
  int32_t send_get_account_creation_time(const Uint64& account);
  int64_t recv_get_account_creation_time(const int32_t seqid);
  void prints(const std::string& cstr) override;
  int32_t send_prints(const std::string& cstr);
  void recv_prints(const int32_t seqid);
  void prints_l(const std::string& cstr) override;
  int32_t send_prints_l(const std::string& cstr);
  void recv_prints_l(const int32_t seqid);
  void printi(const int64_t n) override;
  int32_t send_printi(const int64_t n);
  void recv_printi(const int32_t seqid);
  void printui(const Uint64& n) override;
  int32_t send_printui(const Uint64& n);
  void recv_printui(const int32_t seqid);
  void printi128(const std::string& value) override;
  int32_t send_printi128(const std::string& value);
  void recv_printi128(const int32_t seqid);
  void printui128(const std::string& value) override;
  int32_t send_printui128(const std::string& value);
  void recv_printui128(const int32_t seqid);
  void printsf(const std::string& value) override;
  int32_t send_printsf(const std::string& value);
  void recv_printsf(const int32_t seqid);
  void printdf(const std::string& value) override;
  int32_t send_printdf(const std::string& value);
  void recv_printdf(const int32_t seqid);
  void printqf(const std::string& value) override;
  int32_t send_printqf(const std::string& value);
  void recv_printqf(const int32_t seqid);
  void printn(const Uint64& name) override;
  int32_t send_printn(const Uint64& name);
  void recv_printn(const int32_t seqid);
  void printhex(const std::string& data) override;
  int32_t send_printhex(const std::string& data);
  void recv_printhex(const int32_t seqid);
  int32_t action_data_size() override;
  int32_t send_action_data_size();
  int32_t recv_action_data_size(const int32_t seqid);
  void read_action_data(std::string& _return) override;
  int32_t send_read_action_data();
  void recv_read_action_data(std::string& _return, const int32_t seqid);
  void require_recipient(const Uint64& name) override;
  int32_t send_require_recipient(const Uint64& name);
  void recv_require_recipient(const int32_t seqid);
  void require_auth(const Uint64& name) override;
  int32_t send_require_auth(const Uint64& name);
  void recv_require_auth(const int32_t seqid);
  bool has_auth(const Uint64& name) override;
  int32_t send_has_auth(const Uint64& name);
  bool recv_has_auth(const int32_t seqid);
  void require_auth2(const Uint64& name, const Uint64& permission) override;
  int32_t send_require_auth2(const Uint64& name, const Uint64& permission);
  void recv_require_auth2(const int32_t seqid);
  bool is_account(const Uint64& name) override;
  int32_t send_is_account(const Uint64& name);
  bool recv_is_account(const int32_t seqid);
  void send_inline(const std::string& serialized_action) override;
  int32_t send_send_inline(const std::string& serialized_action);
  void recv_send_inline(const int32_t seqid);
  void send_context_free_inline(const std::string& serialized_data) override;
  int32_t send_send_context_free_inline(const std::string& serialized_data);
  void recv_send_context_free_inline(const int32_t seqid);
  void publication_time(Uint64& _return) override;
  int32_t send_publication_time();
  void recv_publication_time(Uint64& _return, const int32_t seqid);
  void current_receiver(Uint64& _return) override;
  int32_t send_current_receiver();
  void recv_current_receiver(Uint64& _return, const int32_t seqid);
  void eosio_assert(const bool test, const std::string& msg) override;
  int32_t send_eosio_assert(const bool test, const std::string& msg);
  void recv_eosio_assert(const int32_t seqid);
  void eosio_assert_message(const bool test, const std::string& msg) override;
  int32_t send_eosio_assert_message(const bool test, const std::string& msg);
  void recv_eosio_assert_message(const int32_t seqid);
  void eosio_assert_code(const bool test, const Uint64& code) override;
  int32_t send_eosio_assert_code(const bool test, const Uint64& code);
  void recv_eosio_assert_code(const int32_t seqid);
  void eosio_exit(const int32_t code) override;
  int32_t send_eosio_exit(const int32_t code);
  void recv_eosio_exit(const int32_t seqid);
  void current_time(Uint64& _return) override;
  int32_t send_current_time();
  void recv_current_time(Uint64& _return, const int32_t seqid);
  bool is_feature_activated(const std::string& feature_digest) override;
  int32_t send_is_feature_activated(const std::string& feature_digest);
  bool recv_is_feature_activated(const int32_t seqid);
  void get_sender(Uint64& _return) override;
  int32_t send_get_sender();
  void recv_get_sender(Uint64& _return, const int32_t seqid);
  void assert_sha256(const std::string& data, const std::string& hash) override;
  int32_t send_assert_sha256(const std::string& data, const std::string& hash);
  void recv_assert_sha256(const int32_t seqid);
  void assert_sha1(const std::string& data, const std::string& hash) override;
  int32_t send_assert_sha1(const std::string& data, const std::string& hash);
  void recv_assert_sha1(const int32_t seqid);
  void assert_sha512(const std::string& data, const std::string& hash) override;
  int32_t send_assert_sha512(const std::string& data, const std::string& hash);
  void recv_assert_sha512(const int32_t seqid);
  void assert_ripemd160(const std::string& data, const std::string& hash) override;
  int32_t send_assert_ripemd160(const std::string& data, const std::string& hash);
  void recv_assert_ripemd160(const int32_t seqid);
  void sha256(std::string& _return, const std::string& data) override;
  int32_t send_sha256(const std::string& data);
  void recv_sha256(std::string& _return, const int32_t seqid);
  void sha1(std::string& _return, const std::string& data) override;
  int32_t send_sha1(const std::string& data);
  void recv_sha1(std::string& _return, const int32_t seqid);
  void sha512(std::string& _return, const std::string& data) override;
  int32_t send_sha512(const std::string& data);
  void recv_sha512(std::string& _return, const int32_t seqid);
  void ripemd160(std::string& _return, const std::string& data) override;
  int32_t send_ripemd160(const std::string& data);
  void recv_ripemd160(std::string& _return, const int32_t seqid);
  void recover_key(std::string& _return, const std::string& digest, const std::string& sig) override;
  int32_t send_recover_key(const std::string& digest, const std::string& sig);
  void recv_recover_key(std::string& _return, const int32_t seqid);
  void assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub) override;
  int32_t send_assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub);
  void recv_assert_recover_key(const int32_t seqid);
  void send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing) override;
  int32_t send_send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing);
  void recv_send_deferred(const int32_t seqid);
  int32_t cancel_deferred(const std::string& sender_id) override;
  int32_t send_cancel_deferred(const std::string& sender_id);
  int32_t recv_cancel_deferred(const int32_t seqid);
  void read_transaction(std::string& _return) override;
  int32_t send_read_transaction();
  void recv_read_transaction(std::string& _return, const int32_t seqid);
  int32_t transaction_size() override;
  int32_t send_transaction_size();
  int32_t recv_transaction_size(const int32_t seqid);
  int32_t tapos_block_num() override;
  int32_t send_tapos_block_num();
  int32_t recv_tapos_block_num(const int32_t seqid);
  int32_t tapos_block_prefix() override;
  int32_t send_tapos_block_prefix();
  int32_t recv_tapos_block_prefix(const int32_t seqid);
  int64_t expiration() override;
  int32_t send_expiration();
  int64_t recv_expiration(const int32_t seqid);
  void get_action(std::string& _return, const int32_t _type, const int32_t index) override;
  int32_t send_get_action(const int32_t _type, const int32_t index);
  void recv_get_action(std::string& _return, const int32_t seqid);
  void get_context_free_data(std::string& _return, const int32_t index) override;
  int32_t send_get_context_free_data(const int32_t index);
  void recv_get_context_free_data(std::string& _return, const int32_t seqid);
  int32_t db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) override;
  int32_t send_db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data);
  int32_t recv_db_store_i64(const int32_t seqid);
  void db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data) override;
  int32_t send_db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data);
  void recv_db_update_i64(const int32_t seqid);
  void db_remove_i64(const int32_t iterator) override;
  int32_t send_db_remove_i64(const int32_t iterator);
  void recv_db_remove_i64(const int32_t seqid);
  void db_get_i64(std::string& _return, const int32_t iterator) override;
  int32_t send_db_get_i64(const int32_t iterator);
  void recv_db_get_i64(std::string& _return, const int32_t seqid);
  void db_next_i64(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_next_i64(const int32_t iterator);
  void recv_db_next_i64(NextPreviousReturn& _return, const int32_t seqid);
  void db_previous_i64(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_previous_i64(const int32_t iterator);
  void recv_db_previous_i64(NextPreviousReturn& _return, const int32_t seqid);
  int32_t db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override;
  int32_t send_db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id);
  int32_t recv_db_find_i64(const int32_t seqid);
  int32_t db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override;
  int32_t send_db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id);
  int32_t recv_db_lowerbound_i64(const int32_t seqid);
  int32_t db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) override;
  int32_t send_db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id);
  int32_t recv_db_upperbound_i64(const int32_t seqid);
  int32_t db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  int32_t send_db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_end_i64(const int32_t seqid);
  int32_t db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary) override;
  int32_t send_db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary);
  int32_t recv_db_idx64_store(const int32_t seqid);
  void db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary) override;
  int32_t send_db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary);
  void recv_db_idx64_update(const int32_t seqid);
  void db_idx64_remove(const int32_t iterator) override;
  int32_t send_db_idx64_remove(const int32_t iterator);
  void recv_db_idx64_remove(const int32_t seqid);
  void db_idx64_next(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx64_next(const int32_t iterator);
  void recv_db_idx64_next(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx64_previous(NextPreviousReturn& _return, const int32_t iteratory) override;
  int32_t send_db_idx64_previous(const int32_t iteratory);
  void recv_db_idx64_previous(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx64_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  int32_t send_db_idx64_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx64_find_primary(FindPrimaryReturn& _return, const int32_t seqid);
  void db_idx64_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary) override;
  int32_t send_db_idx64_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary);
  void recv_db_idx64_find_secondary(FindSecondaryReturn& _return, const int32_t seqid);
  void db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) override;
  int32_t send_db_idx64_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary);
  void recv_db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  void db_idx64_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) override;
  int32_t send_db_idx64_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary);
  void recv_db_idx64_upperbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  int32_t db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  int32_t send_db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx64_end(const int32_t seqid);
  int32_t db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override;
  int32_t send_db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary);
  int32_t recv_db_idx128_store(const int32_t seqid);
  void db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override;
  int32_t send_db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary);
  void recv_db_idx128_update(const int32_t seqid);
  void db_idx128_remove(const int32_t iterator) override;
  int32_t send_db_idx128_remove(const int32_t iterator);
  void recv_db_idx128_remove(const int32_t seqid);
  void db_idx128_next(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx128_next(const int32_t iterator);
  void recv_db_idx128_next(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx128_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx128_previous(const int32_t iterator);
  void recv_db_idx128_previous(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx128_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  int32_t send_db_idx128_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx128_find_primary(FindPrimaryReturn& _return, const int32_t seqid);
  void db_idx128_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override;
  int32_t send_db_idx128_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary);
  void recv_db_idx128_find_secondary(FindSecondaryReturn& _return, const int32_t seqid);
  void db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  int32_t send_db_idx128_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  void db_idx128_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  int32_t send_db_idx128_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx128_upperbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  int32_t db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  int32_t send_db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx128_end(const int32_t seqid);
  int32_t db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) override;
  int32_t send_db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data);
  int32_t recv_db_idx256_store(const int32_t seqid);
  void db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data) override;
  int32_t send_db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data);
  void recv_db_idx256_update(const int32_t seqid);
  void db_idx256_remove(const int32_t iterator) override;
  int32_t send_db_idx256_remove(const int32_t iterator);
  void recv_db_idx256_remove(const int32_t seqid);
  void db_idx256_next(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx256_next(const int32_t iterator);
  void recv_db_idx256_next(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx256_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx256_previous(const int32_t iterator);
  void recv_db_idx256_previous(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx256_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  int32_t send_db_idx256_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx256_find_primary(FindPrimaryReturn& _return, const int32_t seqid);
  void db_idx256_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data) override;
  int32_t send_db_idx256_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data);
  void recv_db_idx256_find_secondary(FindSecondaryReturn& _return, const int32_t seqid);
  void db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) override;
  int32_t send_db_idx256_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary);
  void recv_db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  void db_idx256_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) override;
  int32_t send_db_idx256_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary);
  void recv_db_idx256_upperbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  int32_t db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  int32_t send_db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx256_end(const int32_t seqid);
  int32_t db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override;
  int32_t send_db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary);
  int32_t recv_db_idx_double_store(const int32_t seqid);
  void db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override;
  int32_t send_db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary);
  void recv_db_idx_double_update(const int32_t seqid);
  void db_idx_double_remove(const int32_t iterator) override;
  int32_t send_db_idx_double_remove(const int32_t iterator);
  void recv_db_idx_double_remove(const int32_t seqid);
  void db_idx_double_next(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx_double_next(const int32_t iterator);
  void recv_db_idx_double_next(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx_double_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx_double_previous(const int32_t iterator);
  void recv_db_idx_double_previous(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  int32_t send_db_idx_double_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx_double_find_primary(FindPrimaryReturn& _return, const int32_t seqid);
  void db_idx_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override;
  int32_t send_db_idx_double_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary);
  void recv_db_idx_double_find_secondary(FindSecondaryReturn& _return, const int32_t seqid);
  void db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  int32_t send_db_idx_double_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  void db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  int32_t send_db_idx_double_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  int32_t db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  int32_t send_db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx_double_end(const int32_t seqid);
  int32_t db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) override;
  int32_t send_db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary);
  int32_t recv_db_idx_long_double_store(const int32_t seqid);
  void db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) override;
  int32_t send_db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary);
  void recv_db_idx_long_double_update(const int32_t seqid);
  void db_idx_long_double_remove(const int32_t iterator) override;
  int32_t send_db_idx_long_double_remove(const int32_t iterator);
  void recv_db_idx_long_double_remove(const int32_t seqid);
  void db_idx_long_double_next(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx_long_double_next(const int32_t iterator);
  void recv_db_idx_long_double_next(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx_long_double_previous(NextPreviousReturn& _return, const int32_t iterator) override;
  int32_t send_db_idx_long_double_previous(const int32_t iterator);
  void recv_db_idx_long_double_previous(NextPreviousReturn& _return, const int32_t seqid);
  void db_idx_long_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) override;
  int32_t send_db_idx_long_double_find_primary(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary);
  void recv_db_idx_long_double_find_primary(FindPrimaryReturn& _return, const int32_t seqid);
  void db_idx_long_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) override;
  int32_t send_db_idx_long_double_find_secondary(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary);
  void recv_db_idx_long_double_find_secondary(FindSecondaryReturn& _return, const int32_t seqid);
  void db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  int32_t send_db_idx_long_double_lowerbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  void db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) override;
  int32_t send_db_idx_long_double_upperbound(const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary);
  void recv_db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return, const int32_t seqid);
  int32_t db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) override;
  int32_t send_db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table);
  int32_t recv_db_idx_long_double_end(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif

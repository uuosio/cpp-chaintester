/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApplyRequest_H
#define ApplyRequest_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "interfaces_types.h"

namespace chaintester {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApplyRequestIf {
 public:
  virtual ~ApplyRequestIf() {}
  virtual int32_t apply_request(const Uint64& receiver, const Uint64& firstReceiver, const Uint64& action, const int32_t chainTesterId) = 0;
  virtual int32_t apply_end(const int32_t chainTesterId) = 0;
};

class ApplyRequestIfFactory {
 public:
  typedef ApplyRequestIf Handler;

  virtual ~ApplyRequestIfFactory() {}

  virtual ApplyRequestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApplyRequestIf* /* handler */) = 0;
  };

class ApplyRequestIfSingletonFactory : virtual public ApplyRequestIfFactory {
 public:
  ApplyRequestIfSingletonFactory(const ::std::shared_ptr<ApplyRequestIf>& iface) : iface_(iface) {}
  virtual ~ApplyRequestIfSingletonFactory() {}

  virtual ApplyRequestIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ApplyRequestIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ApplyRequestIf> iface_;
};

class ApplyRequestNull : virtual public ApplyRequestIf {
 public:
  virtual ~ApplyRequestNull() {}
  int32_t apply_request(const Uint64& /* receiver */, const Uint64& /* firstReceiver */, const Uint64& /* action */, const int32_t /* chainTesterId */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t apply_end(const int32_t /* chainTesterId */) override {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ApplyRequest_apply_request_args__isset {
  _ApplyRequest_apply_request_args__isset() : receiver(false), firstReceiver(false), action(false), chainTesterId(false) {}
  bool receiver :1;
  bool firstReceiver :1;
  bool action :1;
  bool chainTesterId :1;
} _ApplyRequest_apply_request_args__isset;

class ApplyRequest_apply_request_args {
 public:

  ApplyRequest_apply_request_args(const ApplyRequest_apply_request_args&);
  ApplyRequest_apply_request_args& operator=(const ApplyRequest_apply_request_args&);
  ApplyRequest_apply_request_args() noexcept
                                  : chainTesterId(0) {
  }

  virtual ~ApplyRequest_apply_request_args() noexcept;
  Uint64 receiver;
  Uint64 firstReceiver;
  Uint64 action;
  int32_t chainTesterId;

  _ApplyRequest_apply_request_args__isset __isset;

  void __set_receiver(const Uint64& val);

  void __set_firstReceiver(const Uint64& val);

  void __set_action(const Uint64& val);

  void __set_chainTesterId(const int32_t val);

  bool operator == (const ApplyRequest_apply_request_args & rhs) const
  {
    if (!(receiver == rhs.receiver))
      return false;
    if (!(firstReceiver == rhs.firstReceiver))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(chainTesterId == rhs.chainTesterId))
      return false;
    return true;
  }
  bool operator != (const ApplyRequest_apply_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyRequest_apply_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplyRequest_apply_request_pargs {
 public:


  virtual ~ApplyRequest_apply_request_pargs() noexcept;
  const Uint64* receiver;
  const Uint64* firstReceiver;
  const Uint64* action;
  const int32_t* chainTesterId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplyRequest_apply_request_result__isset {
  _ApplyRequest_apply_request_result__isset() : success(false) {}
  bool success :1;
} _ApplyRequest_apply_request_result__isset;

class ApplyRequest_apply_request_result {
 public:

  ApplyRequest_apply_request_result(const ApplyRequest_apply_request_result&) noexcept;
  ApplyRequest_apply_request_result& operator=(const ApplyRequest_apply_request_result&) noexcept;
  ApplyRequest_apply_request_result() noexcept
                                    : success(0) {
  }

  virtual ~ApplyRequest_apply_request_result() noexcept;
  int32_t success;

  _ApplyRequest_apply_request_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ApplyRequest_apply_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApplyRequest_apply_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyRequest_apply_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplyRequest_apply_request_presult__isset {
  _ApplyRequest_apply_request_presult__isset() : success(false) {}
  bool success :1;
} _ApplyRequest_apply_request_presult__isset;

class ApplyRequest_apply_request_presult {
 public:


  virtual ~ApplyRequest_apply_request_presult() noexcept;
  int32_t* success;

  _ApplyRequest_apply_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApplyRequest_apply_end_args__isset {
  _ApplyRequest_apply_end_args__isset() : chainTesterId(false) {}
  bool chainTesterId :1;
} _ApplyRequest_apply_end_args__isset;

class ApplyRequest_apply_end_args {
 public:

  ApplyRequest_apply_end_args(const ApplyRequest_apply_end_args&) noexcept;
  ApplyRequest_apply_end_args& operator=(const ApplyRequest_apply_end_args&) noexcept;
  ApplyRequest_apply_end_args() noexcept
                              : chainTesterId(0) {
  }

  virtual ~ApplyRequest_apply_end_args() noexcept;
  int32_t chainTesterId;

  _ApplyRequest_apply_end_args__isset __isset;

  void __set_chainTesterId(const int32_t val);

  bool operator == (const ApplyRequest_apply_end_args & rhs) const
  {
    if (!(chainTesterId == rhs.chainTesterId))
      return false;
    return true;
  }
  bool operator != (const ApplyRequest_apply_end_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyRequest_apply_end_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplyRequest_apply_end_pargs {
 public:


  virtual ~ApplyRequest_apply_end_pargs() noexcept;
  const int32_t* chainTesterId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplyRequest_apply_end_result__isset {
  _ApplyRequest_apply_end_result__isset() : success(false) {}
  bool success :1;
} _ApplyRequest_apply_end_result__isset;

class ApplyRequest_apply_end_result {
 public:

  ApplyRequest_apply_end_result(const ApplyRequest_apply_end_result&) noexcept;
  ApplyRequest_apply_end_result& operator=(const ApplyRequest_apply_end_result&) noexcept;
  ApplyRequest_apply_end_result() noexcept
                                : success(0) {
  }

  virtual ~ApplyRequest_apply_end_result() noexcept;
  int32_t success;

  _ApplyRequest_apply_end_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ApplyRequest_apply_end_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApplyRequest_apply_end_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyRequest_apply_end_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplyRequest_apply_end_presult__isset {
  _ApplyRequest_apply_end_presult__isset() : success(false) {}
  bool success :1;
} _ApplyRequest_apply_end_presult__isset;

class ApplyRequest_apply_end_presult {
 public:


  virtual ~ApplyRequest_apply_end_presult() noexcept;
  int32_t* success;

  _ApplyRequest_apply_end_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApplyRequestClient : virtual public ApplyRequestIf {
 public:
  ApplyRequestClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApplyRequestClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t apply_request(const Uint64& receiver, const Uint64& firstReceiver, const Uint64& action, const int32_t chainTesterId) override;
  void send_apply_request(const Uint64& receiver, const Uint64& firstReceiver, const Uint64& action, const int32_t chainTesterId);
  int32_t recv_apply_request();
  int32_t apply_end(const int32_t chainTesterId) override;
  void send_apply_end(const int32_t chainTesterId);
  int32_t recv_apply_end();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApplyRequestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ApplyRequestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ApplyRequestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_apply_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_apply_end(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApplyRequestProcessor(::std::shared_ptr<ApplyRequestIf> iface) :
    iface_(iface) {
    processMap_["apply_request"] = &ApplyRequestProcessor::process_apply_request;
    processMap_["apply_end"] = &ApplyRequestProcessor::process_apply_end;
  }

  virtual ~ApplyRequestProcessor() {}
};

class ApplyRequestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApplyRequestProcessorFactory(const ::std::shared_ptr< ApplyRequestIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ApplyRequestIfFactory > handlerFactory_;
};

class ApplyRequestMultiface : virtual public ApplyRequestIf {
 public:
  ApplyRequestMultiface(std::vector<std::shared_ptr<ApplyRequestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApplyRequestMultiface() {}
 protected:
  std::vector<std::shared_ptr<ApplyRequestIf> > ifaces_;
  ApplyRequestMultiface() {}
  void add(::std::shared_ptr<ApplyRequestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t apply_request(const Uint64& receiver, const Uint64& firstReceiver, const Uint64& action, const int32_t chainTesterId) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply_request(receiver, firstReceiver, action, chainTesterId);
    }
    return ifaces_[i]->apply_request(receiver, firstReceiver, action, chainTesterId);
  }

  int32_t apply_end(const int32_t chainTesterId) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply_end(chainTesterId);
    }
    return ifaces_[i]->apply_end(chainTesterId);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApplyRequestConcurrentClient : virtual public ApplyRequestIf {
 public:
  ApplyRequestConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ApplyRequestConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t apply_request(const Uint64& receiver, const Uint64& firstReceiver, const Uint64& action, const int32_t chainTesterId) override;
  int32_t send_apply_request(const Uint64& receiver, const Uint64& firstReceiver, const Uint64& action, const int32_t chainTesterId);
  int32_t recv_apply_request(const int32_t seqid);
  int32_t apply_end(const int32_t chainTesterId) override;
  int32_t send_apply_end(const int32_t chainTesterId);
  int32_t recv_apply_end(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif

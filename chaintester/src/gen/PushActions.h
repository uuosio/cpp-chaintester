/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PushActions_H
#define PushActions_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "interfaces_types.h"

namespace chaintester {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PushActionsIf {
 public:
  virtual ~PushActionsIf() {}
  virtual int32_t push_actions(const std::vector<Action> & actions) = 0;
};

class PushActionsIfFactory {
 public:
  typedef PushActionsIf Handler;

  virtual ~PushActionsIfFactory() {}

  virtual PushActionsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PushActionsIf* /* handler */) = 0;
  };

class PushActionsIfSingletonFactory : virtual public PushActionsIfFactory {
 public:
  PushActionsIfSingletonFactory(const ::std::shared_ptr<PushActionsIf>& iface) : iface_(iface) {}
  virtual ~PushActionsIfSingletonFactory() {}

  virtual PushActionsIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(PushActionsIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<PushActionsIf> iface_;
};

class PushActionsNull : virtual public PushActionsIf {
 public:
  virtual ~PushActionsNull() {}
  int32_t push_actions(const std::vector<Action> & /* actions */) override {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _PushActions_push_actions_args__isset {
  _PushActions_push_actions_args__isset() : actions(false) {}
  bool actions :1;
} _PushActions_push_actions_args__isset;

class PushActions_push_actions_args {
 public:

  PushActions_push_actions_args(const PushActions_push_actions_args&);
  PushActions_push_actions_args& operator=(const PushActions_push_actions_args&);
  PushActions_push_actions_args() noexcept {
  }

  virtual ~PushActions_push_actions_args() noexcept;
  std::vector<Action>  actions;

  _PushActions_push_actions_args__isset __isset;

  void __set_actions(const std::vector<Action> & val);

  bool operator == (const PushActions_push_actions_args & rhs) const
  {
    if (!(actions == rhs.actions))
      return false;
    return true;
  }
  bool operator != (const PushActions_push_actions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushActions_push_actions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PushActions_push_actions_pargs {
 public:


  virtual ~PushActions_push_actions_pargs() noexcept;
  const std::vector<Action> * actions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PushActions_push_actions_result__isset {
  _PushActions_push_actions_result__isset() : success(false) {}
  bool success :1;
} _PushActions_push_actions_result__isset;

class PushActions_push_actions_result {
 public:

  PushActions_push_actions_result(const PushActions_push_actions_result&) noexcept;
  PushActions_push_actions_result& operator=(const PushActions_push_actions_result&) noexcept;
  PushActions_push_actions_result() noexcept
                                  : success(0) {
  }

  virtual ~PushActions_push_actions_result() noexcept;
  int32_t success;

  _PushActions_push_actions_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PushActions_push_actions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PushActions_push_actions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushActions_push_actions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PushActions_push_actions_presult__isset {
  _PushActions_push_actions_presult__isset() : success(false) {}
  bool success :1;
} _PushActions_push_actions_presult__isset;

class PushActions_push_actions_presult {
 public:


  virtual ~PushActions_push_actions_presult() noexcept;
  int32_t* success;

  _PushActions_push_actions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PushActionsClient : virtual public PushActionsIf {
 public:
  PushActionsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PushActionsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t push_actions(const std::vector<Action> & actions) override;
  void send_push_actions(const std::vector<Action> & actions);
  int32_t recv_push_actions();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PushActionsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<PushActionsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (PushActionsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_push_actions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PushActionsProcessor(::std::shared_ptr<PushActionsIf> iface) :
    iface_(iface) {
    processMap_["push_actions"] = &PushActionsProcessor::process_push_actions;
  }

  virtual ~PushActionsProcessor() {}
};

class PushActionsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PushActionsProcessorFactory(const ::std::shared_ptr< PushActionsIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< PushActionsIfFactory > handlerFactory_;
};

class PushActionsMultiface : virtual public PushActionsIf {
 public:
  PushActionsMultiface(std::vector<std::shared_ptr<PushActionsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PushActionsMultiface() {}
 protected:
  std::vector<std::shared_ptr<PushActionsIf> > ifaces_;
  PushActionsMultiface() {}
  void add(::std::shared_ptr<PushActionsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t push_actions(const std::vector<Action> & actions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_actions(actions);
    }
    return ifaces_[i]->push_actions(actions);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PushActionsConcurrentClient : virtual public PushActionsIf {
 public:
  PushActionsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  PushActionsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t push_actions(const std::vector<Action> & actions) override;
  int32_t send_push_actions(const std::vector<Action> & actions);
  int32_t recv_push_actions(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif

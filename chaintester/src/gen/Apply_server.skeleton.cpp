// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Apply.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::chaintester;

class ApplyHandler : virtual public ApplyIf {
 public:
  ApplyHandler() {
    // Your initialization goes here
  }

  int32_t end_apply() {
    // Your implementation goes here
    printf("end_apply\n");
  }

  void get_active_producers(std::string& _return) {
    // Your implementation goes here
    printf("get_active_producers\n");
  }

  void get_resource_limits(GetResourceLimitsReturn& _return, const Uint64& account) {
    // Your implementation goes here
    printf("get_resource_limits\n");
  }

  void set_resource_limits(const Uint64& account, const int64_t ram_bytes, const int64_t net_weight, const int64_t cpu_weight) {
    // Your implementation goes here
    printf("set_resource_limits\n");
  }

  int64_t set_proposed_producers(const std::string& producer_data) {
    // Your implementation goes here
    printf("set_proposed_producers\n");
  }

  int64_t set_proposed_producers_ex(const Uint64& producer_data_format, const std::string& producer_data) {
    // Your implementation goes here
    printf("set_proposed_producers_ex\n");
  }

  bool is_privileged(const Uint64& account) {
    // Your implementation goes here
    printf("is_privileged\n");
  }

  void set_privileged(const Uint64& account, const bool is_priv) {
    // Your implementation goes here
    printf("set_privileged\n");
  }

  void set_blockchain_parameters_packed(const std::string& data) {
    // Your implementation goes here
    printf("set_blockchain_parameters_packed\n");
  }

  void get_blockchain_parameters_packed(std::string& _return) {
    // Your implementation goes here
    printf("get_blockchain_parameters_packed\n");
  }

  void preactivate_feature(const std::string& feature_digest) {
    // Your implementation goes here
    printf("preactivate_feature\n");
  }

  int32_t check_transaction_authorization(const std::string& trx_data, const std::string& pubkeys_data, const std::string& perms_data) {
    // Your implementation goes here
    printf("check_transaction_authorization\n");
  }

  int32_t check_permission_authorization(const Uint64& account, const Uint64& permission, const std::string& pubkeys_data, const std::string& perms_data, const Uint64& delay_us) {
    // Your implementation goes here
    printf("check_permission_authorization\n");
  }

  int64_t get_permission_last_used(const Uint64& account, const Uint64& permission) {
    // Your implementation goes here
    printf("get_permission_last_used\n");
  }

  int64_t get_account_creation_time(const Uint64& account) {
    // Your implementation goes here
    printf("get_account_creation_time\n");
  }

  void prints(const std::string& cstr) {
    // Your implementation goes here
    printf("prints\n");
  }

  void prints_l(const std::string& cstr) {
    // Your implementation goes here
    printf("prints_l\n");
  }

  void printi(const int64_t n) {
    // Your implementation goes here
    printf("printi\n");
  }

  void printui(const Uint64& n) {
    // Your implementation goes here
    printf("printui\n");
  }

  void printi128(const std::string& value) {
    // Your implementation goes here
    printf("printi128\n");
  }

  void printui128(const std::string& value) {
    // Your implementation goes here
    printf("printui128\n");
  }

  void printsf(const std::string& value) {
    // Your implementation goes here
    printf("printsf\n");
  }

  void printdf(const std::string& value) {
    // Your implementation goes here
    printf("printdf\n");
  }

  void printqf(const std::string& value) {
    // Your implementation goes here
    printf("printqf\n");
  }

  void printn(const Uint64& name) {
    // Your implementation goes here
    printf("printn\n");
  }

  void printhex(const std::string& data) {
    // Your implementation goes here
    printf("printhex\n");
  }

  int32_t action_data_size() {
    // Your implementation goes here
    printf("action_data_size\n");
  }

  void read_action_data(std::string& _return) {
    // Your implementation goes here
    printf("read_action_data\n");
  }

  void require_recipient(const Uint64& name) {
    // Your implementation goes here
    printf("require_recipient\n");
  }

  void require_auth(const Uint64& name) {
    // Your implementation goes here
    printf("require_auth\n");
  }

  bool has_auth(const Uint64& name) {
    // Your implementation goes here
    printf("has_auth\n");
  }

  void require_auth2(const Uint64& name, const Uint64& permission) {
    // Your implementation goes here
    printf("require_auth2\n");
  }

  bool is_account(const Uint64& name) {
    // Your implementation goes here
    printf("is_account\n");
  }

  void send_inline(const std::string& serialized_action) {
    // Your implementation goes here
    printf("send_inline\n");
  }

  void send_context_free_inline(const std::string& serialized_data) {
    // Your implementation goes here
    printf("send_context_free_inline\n");
  }

  void publication_time(Uint64& _return) {
    // Your implementation goes here
    printf("publication_time\n");
  }

  void current_receiver(Uint64& _return) {
    // Your implementation goes here
    printf("current_receiver\n");
  }

  void eosio_assert(const bool test, const std::string& msg) {
    // Your implementation goes here
    printf("eosio_assert\n");
  }

  void eosio_assert_message(const bool test, const std::string& msg) {
    // Your implementation goes here
    printf("eosio_assert_message\n");
  }

  void eosio_assert_code(const bool test, const Uint64& code) {
    // Your implementation goes here
    printf("eosio_assert_code\n");
  }

  void eosio_exit(const int32_t code) {
    // Your implementation goes here
    printf("eosio_exit\n");
  }

  void current_time(Uint64& _return) {
    // Your implementation goes here
    printf("current_time\n");
  }

  bool is_feature_activated(const std::string& feature_digest) {
    // Your implementation goes here
    printf("is_feature_activated\n");
  }

  void get_sender(Uint64& _return) {
    // Your implementation goes here
    printf("get_sender\n");
  }

  void assert_sha256(const std::string& data, const std::string& hash) {
    // Your implementation goes here
    printf("assert_sha256\n");
  }

  void assert_sha1(const std::string& data, const std::string& hash) {
    // Your implementation goes here
    printf("assert_sha1\n");
  }

  void assert_sha512(const std::string& data, const std::string& hash) {
    // Your implementation goes here
    printf("assert_sha512\n");
  }

  void assert_ripemd160(const std::string& data, const std::string& hash) {
    // Your implementation goes here
    printf("assert_ripemd160\n");
  }

  void sha256(std::string& _return, const std::string& data) {
    // Your implementation goes here
    printf("sha256\n");
  }

  void sha1(std::string& _return, const std::string& data) {
    // Your implementation goes here
    printf("sha1\n");
  }

  void sha512(std::string& _return, const std::string& data) {
    // Your implementation goes here
    printf("sha512\n");
  }

  void ripemd160(std::string& _return, const std::string& data) {
    // Your implementation goes here
    printf("ripemd160\n");
  }

  void recover_key(std::string& _return, const std::string& digest, const std::string& sig) {
    // Your implementation goes here
    printf("recover_key\n");
  }

  void assert_recover_key(const std::string& digest, const std::string& sig, const std::string& pub) {
    // Your implementation goes here
    printf("assert_recover_key\n");
  }

  void send_deferred(const std::string& sender_id, const Uint64& payer, const std::string& serialized_transaction, const int32_t replace_existing) {
    // Your implementation goes here
    printf("send_deferred\n");
  }

  int32_t cancel_deferred(const std::string& sender_id) {
    // Your implementation goes here
    printf("cancel_deferred\n");
  }

  void read_transaction(std::string& _return) {
    // Your implementation goes here
    printf("read_transaction\n");
  }

  int32_t transaction_size() {
    // Your implementation goes here
    printf("transaction_size\n");
  }

  int32_t tapos_block_num() {
    // Your implementation goes here
    printf("tapos_block_num\n");
  }

  int32_t tapos_block_prefix() {
    // Your implementation goes here
    printf("tapos_block_prefix\n");
  }

  int64_t expiration() {
    // Your implementation goes here
    printf("expiration\n");
  }

  void get_action(std::string& _return, const int32_t _type, const int32_t index) {
    // Your implementation goes here
    printf("get_action\n");
  }

  void get_context_free_data(std::string& _return, const int32_t index) {
    // Your implementation goes here
    printf("get_context_free_data\n");
  }

  int32_t db_store_i64(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) {
    // Your implementation goes here
    printf("db_store_i64\n");
  }

  void db_update_i64(const int32_t iterator, const Uint64& payer, const std::string& data) {
    // Your implementation goes here
    printf("db_update_i64\n");
  }

  void db_remove_i64(const int32_t iterator) {
    // Your implementation goes here
    printf("db_remove_i64\n");
  }

  void db_get_i64(std::string& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_get_i64\n");
  }

  void db_next_i64(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_next_i64\n");
  }

  void db_previous_i64(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_previous_i64\n");
  }

  int32_t db_find_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) {
    // Your implementation goes here
    printf("db_find_i64\n");
  }

  int32_t db_lowerbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) {
    // Your implementation goes here
    printf("db_lowerbound_i64\n");
  }

  int32_t db_upperbound_i64(const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& id) {
    // Your implementation goes here
    printf("db_upperbound_i64\n");
  }

  int32_t db_end_i64(const Uint64& code, const Uint64& scope, const Uint64& table) {
    // Your implementation goes here
    printf("db_end_i64\n");
  }

  int32_t db_idx64_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const Uint64& secondary) {
    // Your implementation goes here
    printf("db_idx64_store\n");
  }

  void db_idx64_update(const int32_t iterator, const Uint64& payer, const Uint64& secondary) {
    // Your implementation goes here
    printf("db_idx64_update\n");
  }

  void db_idx64_remove(const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx64_remove\n");
  }

  void db_idx64_next(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx64_next\n");
  }

  void db_idx64_previous(NextPreviousReturn& _return, const int32_t iteratory) {
    // Your implementation goes here
    printf("db_idx64_previous\n");
  }

  void db_idx64_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx64_find_primary\n");
  }

  void db_idx64_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary) {
    // Your implementation goes here
    printf("db_idx64_find_secondary\n");
  }

  void db_idx64_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx64_lowerbound\n");
  }

  void db_idx64_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx64_upperbound\n");
  }

  int32_t db_idx64_end(const Uint64& code, const Uint64& scope, const Uint64& table) {
    // Your implementation goes here
    printf("db_idx64_end\n");
  }

  int32_t db_idx128_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx128_store\n");
  }

  void db_idx128_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx128_update\n");
  }

  void db_idx128_remove(const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx128_remove\n");
  }

  void db_idx128_next(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx128_next\n");
  }

  void db_idx128_previous(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx128_previous\n");
  }

  void db_idx128_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx128_find_primary\n");
  }

  void db_idx128_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx128_find_secondary\n");
  }

  void db_idx128_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx128_lowerbound\n");
  }

  void db_idx128_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx128_upperbound\n");
  }

  int32_t db_idx128_end(const Uint64& code, const Uint64& scope, const Uint64& table) {
    // Your implementation goes here
    printf("db_idx128_end\n");
  }

  int32_t db_idx256_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& data) {
    // Your implementation goes here
    printf("db_idx256_store\n");
  }

  void db_idx256_update(const int32_t iterator, const Uint64& payer, const std::string& data) {
    // Your implementation goes here
    printf("db_idx256_update\n");
  }

  void db_idx256_remove(const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx256_remove\n");
  }

  void db_idx256_next(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx256_next\n");
  }

  void db_idx256_previous(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx256_previous\n");
  }

  void db_idx256_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx256_find_primary\n");
  }

  void db_idx256_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data) {
    // Your implementation goes here
    printf("db_idx256_find_secondary\n");
  }

  void db_idx256_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx256_lowerbound\n");
  }

  void db_idx256_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& data, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx256_upperbound\n");
  }

  int32_t db_idx256_end(const Uint64& code, const Uint64& scope, const Uint64& table) {
    // Your implementation goes here
    printf("db_idx256_end\n");
  }

  int32_t db_idx_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx_double_store\n");
  }

  void db_idx_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx_double_update\n");
  }

  void db_idx_double_remove(const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx_double_remove\n");
  }

  void db_idx_double_next(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx_double_next\n");
  }

  void db_idx_double_previous(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx_double_previous\n");
  }

  void db_idx_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx_double_find_primary\n");
  }

  void db_idx_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx_double_find_secondary\n");
  }

  void db_idx_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx_double_lowerbound\n");
  }

  void db_idx_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx_double_upperbound\n");
  }

  int32_t db_idx_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) {
    // Your implementation goes here
    printf("db_idx_double_end\n");
  }

  int32_t db_idx_long_double_store(const Uint64& scope, const Uint64& table, const Uint64& payer, const Uint64& id, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx_long_double_store\n");
  }

  void db_idx_long_double_update(const int32_t iterator, const Uint64& payer, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx_long_double_update\n");
  }

  void db_idx_long_double_remove(const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx_long_double_remove\n");
  }

  void db_idx_long_double_next(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx_long_double_next\n");
  }

  void db_idx_long_double_previous(NextPreviousReturn& _return, const int32_t iterator) {
    // Your implementation goes here
    printf("db_idx_long_double_previous\n");
  }

  void db_idx_long_double_find_primary(FindPrimaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx_long_double_find_primary\n");
  }

  void db_idx_long_double_find_secondary(FindSecondaryReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary) {
    // Your implementation goes here
    printf("db_idx_long_double_find_secondary\n");
  }

  void db_idx_long_double_lowerbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx_long_double_lowerbound\n");
  }

  void db_idx_long_double_upperbound(LowerBoundUpperBoundReturn& _return, const Uint64& code, const Uint64& scope, const Uint64& table, const std::string& secondary, const Uint64& primary) {
    // Your implementation goes here
    printf("db_idx_long_double_upperbound\n");
  }

  int32_t db_idx_long_double_end(const Uint64& code, const Uint64& scope, const Uint64& table) {
    // Your implementation goes here
    printf("db_idx_long_double_end\n");
  }

  void set_action_return_value(const std::string& data) {
    // Your implementation goes here
    printf("set_action_return_value\n");
  }

  void get_code_hash(std::string& _return, const Uint64& account, const int64_t struct_version) {
    // Your implementation goes here
    printf("get_code_hash\n");
  }

  int64_t get_block_num() {
    // Your implementation goes here
    printf("get_block_num\n");
  }

  void sha3(std::string& _return, const std::string& data, const int32_t keccak) {
    // Your implementation goes here
    printf("sha3\n");
  }

  void blake2_f(std::string& _return, const int64_t rounds, const std::string& state, const std::string& msg, const std::string& t0_offset, const std::string& t1_offset, const int32_t final) {
    // Your implementation goes here
    printf("blake2_f\n");
  }

  void k1_recover(std::string& _return, const std::string& sig, const std::string& dig) {
    // Your implementation goes here
    printf("k1_recover\n");
  }

  void alt_bn128_add(std::string& _return, const std::string& op1, const std::string& op2) {
    // Your implementation goes here
    printf("alt_bn128_add\n");
  }

  void alt_bn128_mul(std::string& _return, const std::string& g1, const std::string& scalar) {
    // Your implementation goes here
    printf("alt_bn128_mul\n");
  }

  int32_t alt_bn128_pair(const std::string& pairs) {
    // Your implementation goes here
    printf("alt_bn128_pair\n");
  }

  void mod_exp(std::string& _return, const std::string& base, const std::string& exp, const std::string& mod) {
    // Your implementation goes here
    printf("mod_exp\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<ApplyHandler> handler(new ApplyHandler());
  ::std::shared_ptr<TProcessor> processor(new ApplyProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

